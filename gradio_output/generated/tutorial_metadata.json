{
  "title": "python-sdk - Tutorial Documentation",
  "content": "# Python SDK Project Tutorial\n\nWelcome to the Python SDK project tutorial! This guide will walk you through setting up and running a Python SDK project with various server and client examples. This tutorial is designed to be beginner-friendly and comprehensive, providing you with a solid foundation to explore more advanced features.\n\n## Learning Objectives\n\nBy the end of this tutorial, you will be able to:\n\n1. Understand the structure and purpose of a Python SDK project.\n2. Set up the project environment and dependencies.\n3. Run various server and client examples included in the project.\n4. Troubleshoot common issues.\n5. Explore advanced usage and customization.\n\n## Prerequisites and Setup\n\nBefore you begin, ensure you have the following:\n\n- **Python 3.7 or later**: Make sure Python is installed on your system. You can download it from the [official Python website](https://www.python.org/downloads/).\n- **Git**: You will need Git to clone the project repository. Download it from the [official Git website](https://git-scm.com/).\n- **A code editor**: Use any code editor of your choice, such as VSCode, PyCharm, or Sublime Text.\n\n### Setup Instructions\n\n1. **Clone the Repository**\n\n   Open your terminal or command prompt and run the following command to clone the project repository:\n\n   ```bash\n   git clone https://github.com/your-username/python-sdk.git\n   cd python-sdk\n   ```\n\n2. **Create a Virtual Environment**\n\n   It's a good practice to use a virtual environment for Python projects to manage dependencies. Run the following commands:\n\n   ```bash\n   python -m venv venv\n   source venv/bin/activate  # On Windows, use `venv\\Scripts\\activate`\n   ```\n\n3. **Install Dependencies**\n\n   Install the necessary dependencies using pip:\n\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n## Step-by-Step Instructions\n\n### 1. Running the Simple Auth Client\n\nNavigate to the `examples/clients/simple-auth-client/mcp_simple_auth_client` directory and run the client:\n\n```bash\ncd examples/clients/simple-auth-client/mcp_simple_auth_client\npython main.py\n```\n\n**Expected Output**: You should see logs indicating that the client has started and is attempting to authenticate.\n\n### 2. Running the Simple Auth Server\n\nNavigate to the `examples/servers/simple-auth/mcp_simple_auth` directory and run the server:\n\n```bash\ncd examples/servers/simple-auth/mcp_simple_auth\npython server.py\n```\n\n**Expected Output**: The server should start and listen for incoming authentication requests.\n\n### 3. Running Other Server Examples\n\nYou can explore other server examples by navigating to their respective directories and running the `server.py` files. For example, to run the simple prompt server:\n\n```bash\ncd examples/servers/simple-prompt/mcp_simple_prompt\npython server.py\n```\n\n### 4. Running the CLI\n\nThe project includes a command-line interface (CLI) tool. You can run it as follows:\n\n```bash\ncd src/mcp/cli\npython cli.py\n```\n\n**Expected Output**: The CLI should display available commands and options.\n\n## Common Troubleshooting Tips\n\n- **Module Not Found Error**: Ensure your virtual environment is activated and all dependencies are installed.\n- **Port Already in Use**: If a server fails to start due to a port conflict, change the port number in the server script.\n- **Permission Denied**: Ensure you have the necessary permissions to execute scripts and access network resources.\n\n## Next Steps for Advanced Usage\n\nOnce you're comfortable with the basics, consider exploring the following:\n\n- **Concurrency Testing**: Run the `tests/issues/test_188_concurrency.py` script to understand concurrency handling.\n- **Customizing Servers**: Modify server scripts to add custom features or integrate with other services.\n- **Extending the CLI**: Add new commands to the CLI tool to automate tasks or interact with your servers.\n\nCongratulations on completing this tutorial! You now have a foundational understanding of the Python SDK project and can explore more advanced features and customizations. Happy coding!",
  "doc_type": "tutorial",
  "metadata": {
    "repository": "python-sdk",
    "language": "python",
    "generation_model": "gpt-4o",
    "modules_count": 157
  },
  "confidence_score": 0.85,
  "word_count": 553
}
{
  "repository_metadata": {
    "name": "python-sdk",
    "description": "<div align=\"center\">",
    "language": "python",
    "size": 970380,
    "file_count": 157,
    "dependencies": [
      "examples",
      "event_store",
      "logging",
      "tests",
      "pydantic",
      "io",
      "pydantic_ai",
      "abc",
      "fastmcp",
      "tempfile",
      "tool_manager",
      "typing_extensions",
      "asyncpg",
      "anyio",
      "socket",
      "re",
      "functools",
      "subprocess",
      "itertools",
      "uvicorn",
      "win32",
      "traceback",
      "openai",
      "importlib",
      "typing",
      "hashlib",
      "threading",
      "time",
      "pgvector",
      "datetime",
      "webbrowser",
      "enum",
      "manager",
      "dataclasses",
      "starlette",
      "templates",
      "base",
      "warnings",
      "httpx",
      "http",
      "websockets",
      "numpy",
      "mcp_simple_auth",
      "__future__",
      "httpx_sse",
      "annotated_types",
      "server",
      "secrets",
      "sys",
      "pydantic_core",
      "uuid",
      "cli",
      "lowlevel",
      "inspect",
      "click",
      "pyautogui",
      "requests",
      "urllib",
      "shutil",
      "typer",
      "argparse",
      "base64",
      "pydantic_settings",
      "os",
      "inline_snapshot",
      "contextlib",
      "contextvars",
      "json",
      "rich",
      "math",
      "multiprocessing",
      "client",
      "sse_starlette",
      "dotenv",
      "collections",
      "string",
      "resource_manager",
      "pathlib",
      "unittest",
      "asyncio",
      "utilities",
      "mcp",
      "pytest",
      "types",
      "models",
      "pytest_examples",
      "shared"
    ],
    "entry_points": [
      "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py::start",
      "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py::CallbackServer.start",
      "examples/servers/simple-auth/mcp_simple_auth/server.py::main",
      "examples/servers/simple-prompt/mcp_simple_prompt/server.py::main",
      "examples/servers/simple-resource/mcp_simple_resource/server.py::main",
      "examples/servers/simple-streamablehttp/mcp_simple_streamablehttp/server.py::main",
      "examples/servers/simple-streamablehttp-stateless/mcp_simple_streamablehttp_stateless/server.py::main",
      "examples/servers/simple-tool/mcp_simple_tool/server.py::main",
      "src/mcp/cli/cli.py::run",
      "src/mcp/server/fastmcp/server.py::run",
      "src/mcp/server/fastmcp/server.py::FastMCP.run",
      "tests/issues/test_188_concurrency.py::main"
    ],
    "test_coverage": 0.0,
    "complexity_score": 1.9123505976095618
  },
  "modules": [
    {
      "name": "main",
      "path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
      "docstring": "Simple MCP client example with OAuth authentication support.\n\nThis client connects to an MCP server using streamable HTTP transport with OAuth.",
      "imports": [
        "asyncio",
        "os",
        "threading",
        "time",
        "webbrowser",
        "datetime.timedelta",
        "http.server.BaseHTTPRequestHandler",
        "http.server.HTTPServer",
        "typing.Any",
        "urllib.parse.parse_qs",
        "urllib.parse.urlparse",
        "mcp.client.auth.OAuthClientProvider",
        "mcp.client.auth.TokenStorage",
        "mcp.client.session.ClientSession",
        "mcp.client.sse.sse_client",
        "mcp.client.streamable_http.streamablehttp_client",
        "mcp.shared.auth.OAuthClientInformationFull",
        "mcp.shared.auth.OAuthClientMetadata",
        "mcp.shared.auth.OAuthToken",
        "traceback",
        "json"
      ],
      "functions": [
        {
          "name": "cli",
          "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
          "line_start": 358,
          "line_end": 360,
          "docstring": "CLI entry point for uv script.",
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
          "line_start": 29,
          "line_end": 31,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
          "line_start": 49,
          "line_end": 52,
          "docstring": "Initialize with callback data storage.",
          "parameters": [
            "self",
            "request",
            "client_address",
            "server",
            "callback_data"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "do_GET",
          "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
          "line_start": 54,
          "line_end": 92,
          "docstring": "Handle GET request from OAuth redirect.",
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 3,
          "is_async": false
        },
        {
          "name": "log_message",
          "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
          "line_start": 94,
          "line_end": 96,
          "docstring": "Suppress default logging.",
          "parameters": [
            "self",
            "format"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
          "line_start": 102,
          "line_end": 106,
          "docstring": null,
          "parameters": [
            "self",
            "port"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "_create_handler_with_data",
          "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
          "line_start": 108,
          "line_end": 116,
          "docstring": "Create a handler class with access to callback data.",
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "start",
          "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
          "line_start": 118,
          "line_end": 124,
          "docstring": "Start the callback server in a background thread.",
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "stop",
          "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
          "line_start": 126,
          "line_end": 132,
          "docstring": "Stop the callback server.",
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 3,
          "is_async": false
        },
        {
          "name": "wait_for_callback",
          "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
          "line_start": 134,
          "line_end": 143,
          "docstring": "Wait for OAuth callback with timeout.",
          "parameters": [
            "self",
            "timeout"
          ],
          "return_type": null,
          "complexity": 4,
          "is_async": false
        },
        {
          "name": "get_state",
          "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
          "line_start": 145,
          "line_end": 147,
          "docstring": "Get the received state parameter.",
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
          "line_start": 153,
          "line_end": 156,
          "docstring": null,
          "parameters": [
            "self",
            "server_url",
            "transport_type"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
          "line_start": 113,
          "line_end": 114,
          "docstring": null,
          "parameters": [
            "self",
            "request",
            "client_address",
            "server"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "InMemoryTokenStorage",
          "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
          "line_start": 26,
          "line_end": 43,
          "docstring": "Simple in-memory token storage implementation.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
              "line_start": 29,
              "line_end": 31,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": [
            "TokenStorage"
          ]
        },
        {
          "name": "CallbackHandler",
          "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
          "line_start": 46,
          "line_end": 96,
          "docstring": "Simple HTTP handler to capture OAuth callback.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
              "line_start": 49,
              "line_end": 52,
              "docstring": "Initialize with callback data storage.",
              "parameters": [
                "self",
                "request",
                "client_address",
                "server",
                "callback_data"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "do_GET",
              "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
              "line_start": 54,
              "line_end": 92,
              "docstring": "Handle GET request from OAuth redirect.",
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 3,
              "is_async": false
            },
            {
              "name": "log_message",
              "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
              "line_start": 94,
              "line_end": 96,
              "docstring": "Suppress default logging.",
              "parameters": [
                "self",
                "format"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "callback_data"
          ],
          "inheritance": [
            "BaseHTTPRequestHandler"
          ]
        },
        {
          "name": "CallbackServer",
          "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
          "line_start": 99,
          "line_end": 147,
          "docstring": "Simple server to handle OAuth callbacks.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
              "line_start": 102,
              "line_end": 106,
              "docstring": null,
              "parameters": [
                "self",
                "port"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "_create_handler_with_data",
              "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
              "line_start": 108,
              "line_end": 116,
              "docstring": "Create a handler class with access to callback data.",
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "start",
              "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
              "line_start": 118,
              "line_end": 124,
              "docstring": "Start the callback server in a background thread.",
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "stop",
              "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
              "line_start": 126,
              "line_end": 132,
              "docstring": "Stop the callback server.",
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 3,
              "is_async": false
            },
            {
              "name": "wait_for_callback",
              "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
              "line_start": 134,
              "line_end": 143,
              "docstring": "Wait for OAuth callback with timeout.",
              "parameters": [
                "self",
                "timeout"
              ],
              "return_type": null,
              "complexity": 4,
              "is_async": false
            },
            {
              "name": "get_state",
              "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
              "line_start": 145,
              "line_end": 147,
              "docstring": "Get the received state parameter.",
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "port",
            "server",
            "thread",
            "callback_data"
          ],
          "inheritance": []
        },
        {
          "name": "SimpleAuthClient",
          "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
          "line_start": 150,
          "line_end": 334,
          "docstring": "Simple MCP client with auth support.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
              "line_start": 153,
              "line_end": 156,
              "docstring": null,
              "parameters": [
                "self",
                "server_url",
                "transport_type"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "server_url",
            "transport_type"
          ],
          "inheritance": []
        },
        {
          "name": "DataCallbackHandler",
          "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
          "line_start": 112,
          "line_end": 114,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "file_path": "examples/clients/simple-auth-client/mcp_simple_auth_client/main.py",
              "line_start": 113,
              "line_end": 114,
              "docstring": null,
              "parameters": [
                "self",
                "request",
                "client_address",
                "server"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": [
            "CallbackHandler"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 365,
      "complexity_score": 1.5384615384615385
    },
    {
      "name": "__init__",
      "path": "examples/clients/simple-auth-client/mcp_simple_auth_client/__init__.py",
      "docstring": "Simple OAuth client for MCP simple-auth server.",
      "imports": [],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 2,
      "complexity_score": 0.0
    },
    {
      "name": "main",
      "path": "examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
      "docstring": null,
      "imports": [
        "asyncio",
        "json",
        "logging",
        "os",
        "shutil",
        "contextlib.AsyncExitStack",
        "typing.Any",
        "httpx",
        "dotenv.load_dotenv",
        "mcp.ClientSession",
        "mcp.StdioServerParameters",
        "mcp.client.stdio.stdio_client",
        "json"
      ],
      "functions": [
        {
          "name": "__init__",
          "file_path": "examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
          "line_start": 23,
          "line_end": 26,
          "docstring": "Initialize configuration with environment variables.",
          "parameters": [
            "self"
          ],
          "return_type": "None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "load_env",
          "file_path": "examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
          "line_start": 29,
          "line_end": 31,
          "docstring": "Load environment variables from .env file.",
          "parameters": [],
          "return_type": "None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "load_config",
          "file_path": "examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
          "line_start": 34,
          "line_end": 48,
          "docstring": "Load server configuration from JSON file.\n\nArgs:\n    file_path: Path to the JSON configuration file.\n\nReturns:\n    Dict containing server configuration.\n\nRaises:\n    FileNotFoundError: If configuration file doesn't exist.\n    JSONDecodeError: If configuration file is invalid JSON.",
          "parameters": [
            "file_path"
          ],
          "return_type": "dict[str, Any]",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "llm_api_key",
          "file_path": "examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
          "line_start": 51,
          "line_end": 62,
          "docstring": "Get the LLM API key.\n\nReturns:\n    The API key as a string.\n\nRaises:\n    ValueError: If the API key is not found in environment variables.",
          "parameters": [
            "self"
          ],
          "return_type": "str",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
          "line_start": 68,
          "line_end": 74,
          "docstring": null,
          "parameters": [
            "self",
            "name",
            "config"
          ],
          "return_type": "None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
          "line_start": 191,
          "line_end": 196,
          "docstring": null,
          "parameters": [
            "self",
            "name",
            "description",
            "input_schema"
          ],
          "return_type": "None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "format_for_llm",
          "file_path": "examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
          "line_start": 198,
          "line_end": 219,
          "docstring": "Format tool information for LLM.\n\nReturns:\n    A formatted string describing the tool.",
          "parameters": [
            "self"
          ],
          "return_type": "str",
          "complexity": 4,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
          "line_start": 225,
          "line_end": 226,
          "docstring": null,
          "parameters": [
            "self",
            "api_key"
          ],
          "return_type": "None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_response",
          "file_path": "examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
          "line_start": 228,
          "line_end": 275,
          "docstring": "Get a response from the LLM.\n\nArgs:\n    messages: A list of message dictionaries.\n\nReturns:\n    The LLM's response as a string.\n\nRaises:\n    httpx.RequestError: If the request to the LLM fails.",
          "parameters": [
            "self",
            "messages"
          ],
          "return_type": "str",
          "complexity": 4,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
          "line_start": 281,
          "line_end": 283,
          "docstring": null,
          "parameters": [
            "self",
            "servers",
            "llm_client"
          ],
          "return_type": "None",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "Configuration",
          "file_path": "examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
          "line_start": 20,
          "line_end": 62,
          "docstring": "Manages configuration and environment variables for the MCP client.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
              "line_start": 23,
              "line_end": 26,
              "docstring": "Initialize configuration with environment variables.",
              "parameters": [
                "self"
              ],
              "return_type": "None",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "load_env",
              "file_path": "examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
              "line_start": 29,
              "line_end": 31,
              "docstring": "Load environment variables from .env file.",
              "parameters": [],
              "return_type": "None",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "load_config",
              "file_path": "examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
              "line_start": 34,
              "line_end": 48,
              "docstring": "Load server configuration from JSON file.\n\nArgs:\n    file_path: Path to the JSON configuration file.\n\nReturns:\n    Dict containing server configuration.\n\nRaises:\n    FileNotFoundError: If configuration file doesn't exist.\n    JSONDecodeError: If configuration file is invalid JSON.",
              "parameters": [
                "file_path"
              ],
              "return_type": "dict[str, Any]",
              "complexity": 2,
              "is_async": false
            },
            {
              "name": "llm_api_key",
              "file_path": "examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
              "line_start": 51,
              "line_end": 62,
              "docstring": "Get the LLM API key.\n\nReturns:\n    The API key as a string.\n\nRaises:\n    ValueError: If the API key is not found in environment variables.",
              "parameters": [
                "self"
              ],
              "return_type": "str",
              "complexity": 2,
              "is_async": false
            }
          ],
          "attributes": [
            "api_key"
          ],
          "inheritance": []
        },
        {
          "name": "Server",
          "file_path": "examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
          "line_start": 65,
          "line_end": 185,
          "docstring": "Manages MCP server connections and tool execution.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
              "line_start": 68,
              "line_end": 74,
              "docstring": null,
              "parameters": [
                "self",
                "name",
                "config"
              ],
              "return_type": "None",
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "Tool",
          "file_path": "examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
          "line_start": 188,
          "line_end": 219,
          "docstring": "Represents a tool with its properties and formatting.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
              "line_start": 191,
              "line_end": 196,
              "docstring": null,
              "parameters": [
                "self",
                "name",
                "description",
                "input_schema"
              ],
              "return_type": "None",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "format_for_llm",
              "file_path": "examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
              "line_start": 198,
              "line_end": 219,
              "docstring": "Format tool information for LLM.\n\nReturns:\n    A formatted string describing the tool.",
              "parameters": [
                "self"
              ],
              "return_type": "str",
              "complexity": 4,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "LLMClient",
          "file_path": "examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
          "line_start": 222,
          "line_end": 275,
          "docstring": "Manages communication with the LLM provider.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
              "line_start": 225,
              "line_end": 226,
              "docstring": null,
              "parameters": [
                "self",
                "api_key"
              ],
              "return_type": "None",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "get_response",
              "file_path": "examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
              "line_start": 228,
              "line_end": 275,
              "docstring": "Get a response from the LLM.\n\nArgs:\n    messages: A list of message dictionaries.\n\nReturns:\n    The LLM's response as a string.\n\nRaises:\n    httpx.RequestError: If the request to the LLM fails.",
              "parameters": [
                "self",
                "messages"
              ],
              "return_type": "str",
              "complexity": 4,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "ChatSession",
          "file_path": "examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
          "line_start": 278,
          "line_end": 410,
          "docstring": "Orchestrates the interaction between user, LLM, and tools.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "examples/clients/simple-chatbot/mcp_simple_chatbot/main.py",
              "line_start": 281,
              "line_end": 283,
              "docstring": null,
              "parameters": [
                "self",
                "servers",
                "llm_client"
              ],
              "return_type": "None",
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 428,
      "complexity_score": 1.8
    },
    {
      "name": "complex_inputs",
      "path": "examples/fastmcp/complex_inputs.py",
      "docstring": "FastMCP Complex inputs Example\n\nDemonstrates validation via pydantic with complex models.",
      "imports": [
        "typing.Annotated",
        "pydantic.BaseModel",
        "pydantic.Field",
        "mcp.server.fastmcp.FastMCP"
      ],
      "functions": [
        {
          "name": "name_shrimp",
          "file_path": "examples/fastmcp/complex_inputs.py",
          "line_start": 24,
          "line_end": 30,
          "docstring": "List all shrimp names in the tank",
          "parameters": [
            "tank",
            "extra_names"
          ],
          "return_type": "list[str]",
          "complexity": 2,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "ShrimpTank",
          "file_path": "examples/fastmcp/complex_inputs.py",
          "line_start": 16,
          "line_end": 20,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "Shrimp",
          "file_path": "examples/fastmcp/complex_inputs.py",
          "line_start": 17,
          "line_end": 18,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 31,
      "complexity_score": 2.0
    },
    {
      "name": "desktop",
      "path": "examples/fastmcp/desktop.py",
      "docstring": "FastMCP Desktop Example\n\nA simple example that exposes the desktop directory as a resource.",
      "imports": [
        "pathlib.Path",
        "mcp.server.fastmcp.FastMCP"
      ],
      "functions": [
        {
          "name": "desktop",
          "file_path": "examples/fastmcp/desktop.py",
          "line_start": 16,
          "line_end": 19,
          "docstring": "List the files in the user's desktop",
          "parameters": [],
          "return_type": "list[str]",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "add",
          "file_path": "examples/fastmcp/desktop.py",
          "line_start": 23,
          "line_end": 25,
          "docstring": "Add two numbers",
          "parameters": [
            "a",
            "b"
          ],
          "return_type": "int",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 26,
      "complexity_score": 1.5
    },
    {
      "name": "echo",
      "path": "examples/fastmcp/echo.py",
      "docstring": "FastMCP Echo Server",
      "imports": [
        "mcp.server.fastmcp.FastMCP"
      ],
      "functions": [
        {
          "name": "echo_tool",
          "file_path": "examples/fastmcp/echo.py",
          "line_start": 12,
          "line_end": 14,
          "docstring": "Echo the input text",
          "parameters": [
            "text"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "echo_resource",
          "file_path": "examples/fastmcp/echo.py",
          "line_start": 18,
          "line_end": 19,
          "docstring": null,
          "parameters": [],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "echo_template",
          "file_path": "examples/fastmcp/echo.py",
          "line_start": 23,
          "line_end": 25,
          "docstring": "Echo the input text",
          "parameters": [
            "text"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "echo_prompt",
          "file_path": "examples/fastmcp/echo.py",
          "line_start": 29,
          "line_end": 30,
          "docstring": null,
          "parameters": [
            "text"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 31,
      "complexity_score": 1.0
    },
    {
      "name": "memory",
      "path": "examples/fastmcp/memory.py",
      "docstring": "Recursive memory system inspired by the human brain's clustering of memories.\nUses OpenAI's 'text-embedding-3-small' model and pgvector for efficient\nsimilarity search.",
      "imports": [
        "asyncio",
        "math",
        "os",
        "dataclasses.dataclass",
        "datetime.datetime",
        "datetime.timezone",
        "pathlib.Path",
        "typing.Annotated",
        "typing.Self",
        "asyncpg",
        "numpy",
        "openai.AsyncOpenAI",
        "pgvector.asyncpg.register_vector",
        "pydantic.BaseModel",
        "pydantic.Field",
        "pydantic_ai.Agent",
        "mcp.server.fastmcp.FastMCP"
      ],
      "functions": [
        {
          "name": "cosine_similarity",
          "file_path": "examples/fastmcp/memory.py",
          "line_start": 56,
          "line_end": 61,
          "docstring": null,
          "parameters": [
            "a",
            "b"
          ],
          "return_type": "float",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_effective_importance",
          "file_path": "examples/fastmcp/memory.py",
          "line_start": 163,
          "line_end": 164,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "Deps",
          "file_path": "examples/fastmcp/memory.py",
          "line_start": 80,
          "line_end": 82,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "MemoryNode",
          "file_path": "examples/fastmcp/memory.py",
          "line_start": 94,
          "line_end": 164,
          "docstring": null,
          "methods": [
            {
              "name": "get_effective_importance",
              "file_path": "examples/fastmcp/memory.py",
              "line_start": 163,
              "line_end": 164,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        }
      ],
      "constants": [
        "MAX_DEPTH",
        "SIMILARITY_THRESHOLD",
        "DECAY_FACTOR",
        "REINFORCEMENT_FACTOR",
        "DEFAULT_LLM_MODEL",
        "DEFAULT_EMBEDDING_MODEL",
        "DB_DSN",
        "PROFILE_DIR"
      ],
      "language": "python",
      "lines_of_code": 350,
      "complexity_score": 1.0
    },
    {
      "name": "parameter_descriptions",
      "path": "examples/fastmcp/parameter_descriptions.py",
      "docstring": "FastMCP Example showing parameter descriptions",
      "imports": [
        "pydantic.Field",
        "mcp.server.fastmcp.FastMCP"
      ],
      "functions": [
        {
          "name": "greet_user",
          "file_path": "examples/fastmcp/parameter_descriptions.py",
          "line_start": 14,
          "line_end": 21,
          "docstring": "Greet a user with optional title and repetition",
          "parameters": [
            "name",
            "title",
            "times"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 22,
      "complexity_score": 1.0
    },
    {
      "name": "readme-quickstart",
      "path": "examples/fastmcp/readme-quickstart.py",
      "docstring": null,
      "imports": [
        "mcp.server.fastmcp.FastMCP"
      ],
      "functions": [
        {
          "name": "add",
          "file_path": "examples/fastmcp/readme-quickstart.py",
          "line_start": 9,
          "line_end": 11,
          "docstring": "Add two numbers",
          "parameters": [
            "a",
            "b"
          ],
          "return_type": "int",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_greeting",
          "file_path": "examples/fastmcp/readme-quickstart.py",
          "line_start": 16,
          "line_end": 18,
          "docstring": "Get a personalized greeting",
          "parameters": [
            "name"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 19,
      "complexity_score": 1.0
    },
    {
      "name": "screenshot",
      "path": "examples/fastmcp/screenshot.py",
      "docstring": "FastMCP Screenshot Example\n\nGive Claude a tool to capture and view screenshots.",
      "imports": [
        "io",
        "mcp.server.fastmcp.FastMCP",
        "mcp.server.fastmcp.utilities.types.Image",
        "pyautogui"
      ],
      "functions": [
        {
          "name": "take_screenshot",
          "file_path": "examples/fastmcp/screenshot.py",
          "line_start": 17,
          "line_end": 29,
          "docstring": "Take a screenshot of the user's screen and return it as an image. Use\nthis tool anytime the user wants you to look at something they're doing.",
          "parameters": [],
          "return_type": "Image",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 30,
      "complexity_score": 1.0
    },
    {
      "name": "simple_echo",
      "path": "examples/fastmcp/simple_echo.py",
      "docstring": "FastMCP Echo Server",
      "imports": [
        "mcp.server.fastmcp.FastMCP"
      ],
      "functions": [
        {
          "name": "echo",
          "file_path": "examples/fastmcp/simple_echo.py",
          "line_start": 12,
          "line_end": 14,
          "docstring": "Echo the input text",
          "parameters": [
            "text"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 15,
      "complexity_score": 1.0
    },
    {
      "name": "text_me",
      "path": "examples/fastmcp/text_me.py",
      "docstring": "FastMCP Text Me Server\n--------------------------------\nThis defines a simple FastMCP server that sends a text message to a phone number via https://surgemsg.com/.\n\nTo run this example, create a `.env` file with the following values:\n\nSURGE_API_KEY=...\nSURGE_ACCOUNT_ID=...\nSURGE_MY_PHONE_NUMBER=...\nSURGE_MY_FIRST_NAME=...\nSURGE_MY_LAST_NAME=...\n\nVisit https://surgemsg.com/ and click \"Get Started\" to obtain these values.",
      "imports": [
        "typing.Annotated",
        "httpx",
        "pydantic.BeforeValidator",
        "pydantic_settings.BaseSettings",
        "pydantic_settings.SettingsConfigDict",
        "mcp.server.fastmcp.FastMCP"
      ],
      "functions": [
        {
          "name": "text_me",
          "file_path": "examples/fastmcp/text_me.py",
          "line_start": 50,
          "line_end": 72,
          "docstring": "Send a text message to a phone number via https://surgemsg.com/",
          "parameters": [
            "text_content"
          ],
          "return_type": "str",
          "complexity": 2,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "SurgeSettings",
          "file_path": "examples/fastmcp/text_me.py",
          "line_start": 30,
          "line_end": 41,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseSettings"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 73,
      "complexity_score": 2.0
    },
    {
      "name": "unicode_example",
      "path": "examples/fastmcp/unicode_example.py",
      "docstring": "Example FastMCP server that uses Unicode characters in various places to help test\nUnicode handling in tools and inspectors.",
      "imports": [
        "mcp.server.fastmcp.FastMCP"
      ],
      "functions": [
        {
          "name": "hello_unicode",
          "file_path": "examples/fastmcp/unicode_example.py",
          "line_start": 15,
          "line_end": 22,
          "docstring": "A simple tool that demonstrates Unicode handling in:\n- Tool description (emojis, accents, CJK characters)\n- Parameter defaults (CJK characters)\n- Return values (Spanish punctuation, emojis)",
          "parameters": [
            "name",
            "greeting"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "list_emoji_categories",
          "file_path": "examples/fastmcp/unicode_example.py",
          "line_start": 26,
          "line_end": 38,
          "docstring": "Returns a list of emoji categories with emoji examples.",
          "parameters": [],
          "return_type": "list[str]",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "multilingual_hello",
          "file_path": "examples/fastmcp/unicode_example.py",
          "line_start": 42,
          "line_end": 60,
          "docstring": "Returns hello in different scripts and writing systems.",
          "parameters": [],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 65,
      "complexity_score": 1.0
    },
    {
      "name": "server",
      "path": "examples/servers/simple-auth/mcp_simple_auth/server.py",
      "docstring": "Simple MCP Server with GitHub OAuth Authentication.",
      "imports": [
        "logging",
        "secrets",
        "time",
        "typing.Any",
        "typing.Literal",
        "click",
        "pydantic.AnyHttpUrl",
        "pydantic_settings.BaseSettings",
        "pydantic_settings.SettingsConfigDict",
        "starlette.exceptions.HTTPException",
        "starlette.requests.Request",
        "starlette.responses.JSONResponse",
        "starlette.responses.RedirectResponse",
        "starlette.responses.Response",
        "mcp.server.auth.middleware.auth_context.get_access_token",
        "mcp.server.auth.provider.AccessToken",
        "mcp.server.auth.provider.AuthorizationCode",
        "mcp.server.auth.provider.AuthorizationParams",
        "mcp.server.auth.provider.OAuthAuthorizationServerProvider",
        "mcp.server.auth.provider.RefreshToken",
        "mcp.server.auth.provider.construct_redirect_uri",
        "mcp.server.auth.settings.AuthSettings",
        "mcp.server.auth.settings.ClientRegistrationOptions",
        "mcp.server.fastmcp.server.FastMCP",
        "mcp.shared._httpx_utils.create_mcp_http_client",
        "mcp.shared.auth.OAuthClientInformationFull",
        "mcp.shared.auth.OAuthToken"
      ],
      "functions": [
        {
          "name": "create_simple_mcp_server",
          "file_path": "examples/servers/simple-auth/mcp_simple_auth/server.py",
          "line_start": 258,
          "line_end": 344,
          "docstring": "Create a simple FastMCP server with GitHub OAuth.",
          "parameters": [
            "settings"
          ],
          "return_type": "FastMCP",
          "complexity": 8,
          "is_async": false
        },
        {
          "name": "main",
          "file_path": "examples/servers/simple-auth/mcp_simple_auth/server.py",
          "line_start": 356,
          "line_end": 375,
          "docstring": "Run the simple GitHub MCP server.",
          "parameters": [
            "port",
            "host",
            "transport"
          ],
          "return_type": "int",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "examples/servers/simple-auth/mcp_simple_auth/server.py",
          "line_start": 54,
          "line_end": 61,
          "docstring": "Initialize settings with values from environment variables.\n\nNote: github_client_id and github_client_secret are required but can be\nloaded automatically from environment variables (MCP_GITHUB_GITHUB_CLIENT_ID\nand MCP_GITHUB_GITHUB_CLIENT_SECRET) and don't need to be passed explicitly.",
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "examples/servers/simple-auth/mcp_simple_auth/server.py",
          "line_start": 67,
          "line_end": 75,
          "docstring": null,
          "parameters": [
            "self",
            "settings"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_github_token",
          "file_path": "examples/servers/simple-auth/mcp_simple_auth/server.py",
          "line_start": 306,
          "line_end": 318,
          "docstring": "Get the GitHub token for the authenticated user.",
          "parameters": [],
          "return_type": "str",
          "complexity": 3,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "ServerSettings",
          "file_path": "examples/servers/simple-auth/mcp_simple_auth/server.py",
          "line_start": 32,
          "line_end": 61,
          "docstring": "Settings for the simple GitHub MCP server.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "examples/servers/simple-auth/mcp_simple_auth/server.py",
              "line_start": 54,
              "line_end": 61,
              "docstring": "Initialize settings with values from environment variables.\n\nNote: github_client_id and github_client_secret are required but can be\nloaded automatically from environment variables (MCP_GITHUB_GITHUB_CLIENT_ID\nand MCP_GITHUB_GITHUB_CLIENT_SECRET) and don't need to be passed explicitly.",
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": [
            "BaseSettings"
          ]
        },
        {
          "name": "SimpleGitHubOAuthProvider",
          "file_path": "examples/servers/simple-auth/mcp_simple_auth/server.py",
          "line_start": 64,
          "line_end": 255,
          "docstring": "Simple GitHub OAuth provider with essential functionality.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "examples/servers/simple-auth/mcp_simple_auth/server.py",
              "line_start": 67,
              "line_end": 75,
              "docstring": null,
              "parameters": [
                "self",
                "settings"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "settings"
          ],
          "inheritance": [
            "OAuthAuthorizationServerProvider"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 376,
      "complexity_score": 3.0
    },
    {
      "name": "__init__",
      "path": "examples/servers/simple-auth/mcp_simple_auth/__init__.py",
      "docstring": "Simple MCP server with GitHub OAuth authentication.",
      "imports": [],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 2,
      "complexity_score": 0.0
    },
    {
      "name": "__main__",
      "path": "examples/servers/simple-auth/mcp_simple_auth/__main__.py",
      "docstring": "Main entry point for simple MCP server with GitHub OAuth authentication.",
      "imports": [
        "sys",
        "mcp_simple_auth.server.main"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 8,
      "complexity_score": 0.0
    },
    {
      "name": "server",
      "path": "examples/servers/simple-prompt/mcp_simple_prompt/server.py",
      "docstring": null,
      "imports": [
        "anyio",
        "click",
        "mcp.types",
        "mcp.server.lowlevel.Server",
        "mcp.server.sse.SseServerTransport",
        "starlette.applications.Starlette",
        "starlette.responses.Response",
        "starlette.routing.Mount",
        "starlette.routing.Route",
        "uvicorn",
        "mcp.server.stdio.stdio_server"
      ],
      "functions": [
        {
          "name": "create_messages",
          "file_path": "examples/servers/simple-prompt/mcp_simple_prompt/server.py",
          "line_start": 7,
          "line_end": 37,
          "docstring": "Create the messages for the prompt.",
          "parameters": [
            "context",
            "topic"
          ],
          "return_type": "list[types.PromptMessage]",
          "complexity": 3,
          "is_async": false
        },
        {
          "name": "main",
          "file_path": "examples/servers/simple-prompt/mcp_simple_prompt/server.py",
          "line_start": 48,
          "line_end": 129,
          "docstring": null,
          "parameters": [
            "port",
            "transport"
          ],
          "return_type": "int",
          "complexity": 6,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 130,
      "complexity_score": 4.5
    },
    {
      "name": "__init__",
      "path": "examples/servers/simple-prompt/mcp_simple_prompt/__init__.py",
      "docstring": null,
      "imports": [],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 2,
      "complexity_score": 0.0
    },
    {
      "name": "__main__",
      "path": "examples/servers/simple-prompt/mcp_simple_prompt/__main__.py",
      "docstring": null,
      "imports": [
        "sys",
        "server.main"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 6,
      "complexity_score": 0.0
    },
    {
      "name": "server",
      "path": "examples/servers/simple-resource/mcp_simple_resource/server.py",
      "docstring": null,
      "imports": [
        "anyio",
        "click",
        "mcp.types",
        "mcp.server.lowlevel.Server",
        "pydantic.AnyUrl",
        "mcp.server.sse.SseServerTransport",
        "starlette.applications.Starlette",
        "starlette.responses.Response",
        "starlette.routing.Mount",
        "starlette.routing.Route",
        "uvicorn",
        "mcp.server.stdio.stdio_server"
      ],
      "functions": [
        {
          "name": "main",
          "file_path": "examples/servers/simple-resource/mcp_simple_resource/server.py",
          "line_start": 22,
          "line_end": 87,
          "docstring": null,
          "parameters": [
            "port",
            "transport"
          ],
          "return_type": "int",
          "complexity": 7,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [
        "SAMPLE_RESOURCES"
      ],
      "language": "python",
      "lines_of_code": 88,
      "complexity_score": 7.0
    },
    {
      "name": "__init__",
      "path": "examples/servers/simple-resource/mcp_simple_resource/__init__.py",
      "docstring": null,
      "imports": [],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 2,
      "complexity_score": 0.0
    },
    {
      "name": "__main__",
      "path": "examples/servers/simple-resource/mcp_simple_resource/__main__.py",
      "docstring": null,
      "imports": [
        "sys",
        "server.main"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 6,
      "complexity_score": 0.0
    },
    {
      "name": "event_store",
      "path": "examples/servers/simple-streamablehttp/mcp_simple_streamablehttp/event_store.py",
      "docstring": "In-memory event store for demonstrating resumability functionality.\n\nThis is a simple implementation intended for examples and testing,\nnot for production use where a persistent storage solution would be more appropriate.",
      "imports": [
        "logging",
        "collections.deque",
        "dataclasses.dataclass",
        "uuid.uuid4",
        "mcp.server.streamable_http.EventCallback",
        "mcp.server.streamable_http.EventId",
        "mcp.server.streamable_http.EventMessage",
        "mcp.server.streamable_http.EventStore",
        "mcp.server.streamable_http.StreamId",
        "mcp.types.JSONRPCMessage"
      ],
      "functions": [
        {
          "name": "__init__",
          "file_path": "examples/servers/simple-streamablehttp/mcp_simple_streamablehttp/event_store.py",
          "line_start": 45,
          "line_end": 55,
          "docstring": "Initialize the event store.\n\nArgs:\n    max_events_per_stream: Maximum number of events to keep per stream",
          "parameters": [
            "self",
            "max_events_per_stream"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "EventEntry",
          "file_path": "examples/servers/simple-streamablehttp/mcp_simple_streamablehttp/event_store.py",
          "line_start": 26,
          "line_end": 33,
          "docstring": "Represents an event entry in the event store.",
          "methods": [],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "InMemoryEventStore",
          "file_path": "examples/servers/simple-streamablehttp/mcp_simple_streamablehttp/event_store.py",
          "line_start": 36,
          "line_end": 105,
          "docstring": "Simple in-memory implementation of the EventStore interface for resumability.\nThis is primarily intended for examples and testing, not for production use\nwhere a persistent storage solution would be more appropriate.\n\nThis implementation keeps only the last N events per stream for memory efficiency.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "examples/servers/simple-streamablehttp/mcp_simple_streamablehttp/event_store.py",
              "line_start": 45,
              "line_end": 55,
              "docstring": "Initialize the event store.\n\nArgs:\n    max_events_per_stream: Maximum number of events to keep per stream",
              "parameters": [
                "self",
                "max_events_per_stream"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "max_events_per_stream"
          ],
          "inheritance": [
            "EventStore"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 106,
      "complexity_score": 1.0
    },
    {
      "name": "server",
      "path": "examples/servers/simple-streamablehttp/mcp_simple_streamablehttp/server.py",
      "docstring": null,
      "imports": [
        "contextlib",
        "logging",
        "collections.abc.AsyncIterator",
        "anyio",
        "click",
        "mcp.types",
        "mcp.server.lowlevel.Server",
        "mcp.server.streamable_http_manager.StreamableHTTPSessionManager",
        "pydantic.AnyUrl",
        "starlette.applications.Starlette",
        "starlette.routing.Mount",
        "starlette.types.Receive",
        "starlette.types.Scope",
        "starlette.types.Send",
        "event_store.InMemoryEventStore",
        "uvicorn"
      ],
      "functions": [
        {
          "name": "main",
          "file_path": "examples/servers/simple-streamablehttp/mcp_simple_streamablehttp/server.py",
          "line_start": 34,
          "line_end": 174,
          "docstring": null,
          "parameters": [
            "port",
            "log_level",
            "json_response"
          ],
          "return_type": "int",
          "complexity": 5,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 175,
      "complexity_score": 5.0
    },
    {
      "name": "__main__",
      "path": "examples/servers/simple-streamablehttp/mcp_simple_streamablehttp/__main__.py",
      "docstring": null,
      "imports": [
        "server.main"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 5,
      "complexity_score": 0.0
    },
    {
      "name": "server",
      "path": "examples/servers/simple-streamablehttp-stateless/mcp_simple_streamablehttp_stateless/server.py",
      "docstring": null,
      "imports": [
        "contextlib",
        "logging",
        "collections.abc.AsyncIterator",
        "anyio",
        "click",
        "mcp.types",
        "mcp.server.lowlevel.Server",
        "mcp.server.streamable_http_manager.StreamableHTTPSessionManager",
        "starlette.applications.Starlette",
        "starlette.routing.Mount",
        "starlette.types.Receive",
        "starlette.types.Scope",
        "starlette.types.Send",
        "uvicorn"
      ],
      "functions": [
        {
          "name": "main",
          "file_path": "examples/servers/simple-streamablehttp-stateless/mcp_simple_streamablehttp_stateless/server.py",
          "line_start": 30,
          "line_end": 146,
          "docstring": null,
          "parameters": [
            "port",
            "log_level",
            "json_response"
          ],
          "return_type": "int",
          "complexity": 5,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 147,
      "complexity_score": 5.0
    },
    {
      "name": "__main__",
      "path": "examples/servers/simple-streamablehttp-stateless/mcp_simple_streamablehttp_stateless/__main__.py",
      "docstring": null,
      "imports": [
        "server.main",
        "sys"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 8,
      "complexity_score": 0.0
    },
    {
      "name": "server",
      "path": "examples/servers/simple-tool/mcp_simple_tool/server.py",
      "docstring": null,
      "imports": [
        "anyio",
        "click",
        "mcp.types",
        "mcp.server.lowlevel.Server",
        "mcp.shared._httpx_utils.create_mcp_http_client",
        "mcp.server.sse.SseServerTransport",
        "starlette.applications.Starlette",
        "starlette.responses.Response",
        "starlette.routing.Mount",
        "starlette.routing.Route",
        "uvicorn",
        "mcp.server.stdio.stdio_server"
      ],
      "functions": [
        {
          "name": "main",
          "file_path": "examples/servers/simple-tool/mcp_simple_tool/server.py",
          "line_start": 30,
          "line_end": 106,
          "docstring": null,
          "parameters": [
            "port",
            "transport"
          ],
          "return_type": "int",
          "complexity": 6,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 107,
      "complexity_score": 6.0
    },
    {
      "name": "__init__",
      "path": "examples/servers/simple-tool/mcp_simple_tool/__init__.py",
      "docstring": null,
      "imports": [],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 2,
      "complexity_score": 0.0
    },
    {
      "name": "__main__",
      "path": "examples/servers/simple-tool/mcp_simple_tool/__main__.py",
      "docstring": null,
      "imports": [
        "sys",
        "server.main"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 6,
      "complexity_score": 0.0
    },
    {
      "name": "types",
      "path": "src/mcp/types.py",
      "docstring": null,
      "imports": [
        "collections.abc.Callable",
        "typing.Annotated",
        "typing.Any",
        "typing.Generic",
        "typing.Literal",
        "typing.TypeAlias",
        "typing.TypeVar",
        "pydantic.BaseModel",
        "pydantic.ConfigDict",
        "pydantic.Field",
        "pydantic.FileUrl",
        "pydantic.RootModel",
        "pydantic.networks.AnyUrl",
        "pydantic.networks.UrlConstraints"
      ],
      "functions": [],
      "classes": [
        {
          "name": "RequestParams",
          "file_path": "src/mcp/types.py",
          "line_start": 41,
          "line_end": 53,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "PaginatedRequestParams",
          "file_path": "src/mcp/types.py",
          "line_start": 56,
          "line_end": 61,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "RequestParams"
          ]
        },
        {
          "name": "NotificationParams",
          "file_path": "src/mcp/types.py",
          "line_start": 64,
          "line_end": 72,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "Request",
          "file_path": "src/mcp/types.py",
          "line_start": 82,
          "line_end": 87,
          "docstring": "Base class for JSON-RPC requests.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel",
            "Generic[RequestParamsT, MethodT]"
          ]
        },
        {
          "name": "PaginatedRequest",
          "file_path": "src/mcp/types.py",
          "line_start": 90,
          "line_end": 96,
          "docstring": "Base class for paginated requests,\nmatching the schema's PaginatedRequest interface.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Request[PaginatedRequestParams | None, MethodT]",
            "Generic[MethodT]"
          ]
        },
        {
          "name": "Notification",
          "file_path": "src/mcp/types.py",
          "line_start": 99,
          "line_end": 104,
          "docstring": "Base class for JSON-RPC notifications.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel",
            "Generic[NotificationParamsT, MethodT]"
          ]
        },
        {
          "name": "Result",
          "file_path": "src/mcp/types.py",
          "line_start": 107,
          "line_end": 116,
          "docstring": "Base class for JSON-RPC results.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "PaginatedResult",
          "file_path": "src/mcp/types.py",
          "line_start": 119,
          "line_end": 124,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Result"
          ]
        },
        {
          "name": "JSONRPCRequest",
          "file_path": "src/mcp/types.py",
          "line_start": 127,
          "line_end": 133,
          "docstring": "A request that expects a response.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Request[dict[str, Any] | None, str]"
          ]
        },
        {
          "name": "JSONRPCNotification",
          "file_path": "src/mcp/types.py",
          "line_start": 136,
          "line_end": 140,
          "docstring": "A notification which does not expect a response.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Notification[dict[str, Any] | None, str]"
          ]
        },
        {
          "name": "JSONRPCResponse",
          "file_path": "src/mcp/types.py",
          "line_start": 143,
          "line_end": 149,
          "docstring": "A successful (non-error) response to a request.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "ErrorData",
          "file_path": "src/mcp/types.py",
          "line_start": 164,
          "line_end": 182,
          "docstring": "Error information for JSON-RPC error responses.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "JSONRPCError",
          "file_path": "src/mcp/types.py",
          "line_start": 185,
          "line_end": 191,
          "docstring": "A response to a request that indicates an error occurred.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "JSONRPCMessage",
          "file_path": "src/mcp/types.py",
          "line_start": 194,
          "line_end": 197,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "RootModel[JSONRPCRequest | JSONRPCNotification | JSONRPCResponse | JSONRPCError]"
          ]
        },
        {
          "name": "EmptyResult",
          "file_path": "src/mcp/types.py",
          "line_start": 200,
          "line_end": 201,
          "docstring": "A response that indicates success but carries no data.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Result"
          ]
        },
        {
          "name": "Implementation",
          "file_path": "src/mcp/types.py",
          "line_start": 204,
          "line_end": 209,
          "docstring": "Describes the name and version of an MCP implementation.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "RootsCapability",
          "file_path": "src/mcp/types.py",
          "line_start": 212,
          "line_end": 217,
          "docstring": "Capability for root operations.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "SamplingCapability",
          "file_path": "src/mcp/types.py",
          "line_start": 220,
          "line_end": 223,
          "docstring": "Capability for sampling operations.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "ClientCapabilities",
          "file_path": "src/mcp/types.py",
          "line_start": 226,
          "line_end": 235,
          "docstring": "Capabilities a client may support.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "PromptsCapability",
          "file_path": "src/mcp/types.py",
          "line_start": 238,
          "line_end": 243,
          "docstring": "Capability for prompts operations.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "ResourcesCapability",
          "file_path": "src/mcp/types.py",
          "line_start": 246,
          "line_end": 253,
          "docstring": "Capability for resources operations.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "ToolsCapability",
          "file_path": "src/mcp/types.py",
          "line_start": 256,
          "line_end": 261,
          "docstring": "Capability for tools operations.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "LoggingCapability",
          "file_path": "src/mcp/types.py",
          "line_start": 264,
          "line_end": 267,
          "docstring": "Capability for logging operations.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "ServerCapabilities",
          "file_path": "src/mcp/types.py",
          "line_start": 270,
          "line_end": 283,
          "docstring": "Capabilities that a server may support.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "InitializeRequestParams",
          "file_path": "src/mcp/types.py",
          "line_start": 286,
          "line_end": 293,
          "docstring": "Parameters for the initialize request.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "RequestParams"
          ]
        },
        {
          "name": "InitializeRequest",
          "file_path": "src/mcp/types.py",
          "line_start": 296,
          "line_end": 303,
          "docstring": "This request is sent from the client to the server when it first connects, asking it\nto begin initialization.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Request[InitializeRequestParams, Literal['initialize']]"
          ]
        },
        {
          "name": "InitializeResult",
          "file_path": "src/mcp/types.py",
          "line_start": 306,
          "line_end": 314,
          "docstring": "After receiving an initialize request from the client, the server sends this.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Result"
          ]
        },
        {
          "name": "InitializedNotification",
          "file_path": "src/mcp/types.py",
          "line_start": 317,
          "line_end": 326,
          "docstring": "This notification is sent from the client to the server after initialization has\nfinished.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Notification[NotificationParams | None, Literal['notifications/initialized']]"
          ]
        },
        {
          "name": "PingRequest",
          "file_path": "src/mcp/types.py",
          "line_start": 329,
          "line_end": 336,
          "docstring": "A ping, issued by either the server or the client, to check that the other party is\nstill alive.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Request[RequestParams | None, Literal['ping']]"
          ]
        },
        {
          "name": "ProgressNotificationParams",
          "file_path": "src/mcp/types.py",
          "line_start": 339,
          "line_end": 359,
          "docstring": "Parameters for progress notifications.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "NotificationParams"
          ]
        },
        {
          "name": "ProgressNotification",
          "file_path": "src/mcp/types.py",
          "line_start": 362,
          "line_end": 371,
          "docstring": "An out-of-band notification used to inform the receiver of a progress update for a\nlong-running request.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Notification[ProgressNotificationParams, Literal['notifications/progress']]"
          ]
        },
        {
          "name": "ListResourcesRequest",
          "file_path": "src/mcp/types.py",
          "line_start": 374,
          "line_end": 377,
          "docstring": "Sent from the client to request a list of resources the server has.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "PaginatedRequest[Literal['resources/list']]"
          ]
        },
        {
          "name": "Annotations",
          "file_path": "src/mcp/types.py",
          "line_start": 380,
          "line_end": 383,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "Resource",
          "file_path": "src/mcp/types.py",
          "line_start": 386,
          "line_end": 405,
          "docstring": "A known resource that the server is capable of reading.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "ResourceTemplate",
          "file_path": "src/mcp/types.py",
          "line_start": 408,
          "line_end": 426,
          "docstring": "A template description for resources available on the server.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "ListResourcesResult",
          "file_path": "src/mcp/types.py",
          "line_start": 429,
          "line_end": 432,
          "docstring": "The server's response to a resources/list request from the client.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "PaginatedResult"
          ]
        },
        {
          "name": "ListResourceTemplatesRequest",
          "file_path": "src/mcp/types.py",
          "line_start": 435,
          "line_end": 440,
          "docstring": "Sent from the client to request a list of resource templates the server has.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "PaginatedRequest[Literal['resources/templates/list']]"
          ]
        },
        {
          "name": "ListResourceTemplatesResult",
          "file_path": "src/mcp/types.py",
          "line_start": 443,
          "line_end": 446,
          "docstring": "The server's response to a resources/templates/list request from the client.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "PaginatedResult"
          ]
        },
        {
          "name": "ReadResourceRequestParams",
          "file_path": "src/mcp/types.py",
          "line_start": 449,
          "line_end": 457,
          "docstring": "Parameters for reading a resource.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "RequestParams"
          ]
        },
        {
          "name": "ReadResourceRequest",
          "file_path": "src/mcp/types.py",
          "line_start": 460,
          "line_end": 466,
          "docstring": "Sent from the client to the server, to read a specific resource URI.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Request[ReadResourceRequestParams, Literal['resources/read']]"
          ]
        },
        {
          "name": "ResourceContents",
          "file_path": "src/mcp/types.py",
          "line_start": 469,
          "line_end": 476,
          "docstring": "The contents of a specific resource or sub-resource.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "TextResourceContents",
          "file_path": "src/mcp/types.py",
          "line_start": 479,
          "line_end": 486,
          "docstring": "Text contents of a resource.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "ResourceContents"
          ]
        },
        {
          "name": "BlobResourceContents",
          "file_path": "src/mcp/types.py",
          "line_start": 489,
          "line_end": 493,
          "docstring": "Binary contents of a resource.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "ResourceContents"
          ]
        },
        {
          "name": "ReadResourceResult",
          "file_path": "src/mcp/types.py",
          "line_start": 496,
          "line_end": 499,
          "docstring": "The server's response to a resources/read request from the client.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Result"
          ]
        },
        {
          "name": "ResourceListChangedNotification",
          "file_path": "src/mcp/types.py",
          "line_start": 502,
          "line_end": 513,
          "docstring": "An optional notification from the server to the client, informing it that the list\nof resources it can read from has changed.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Notification[NotificationParams | None, Literal['notifications/resources/list_changed']]"
          ]
        },
        {
          "name": "SubscribeRequestParams",
          "file_path": "src/mcp/types.py",
          "line_start": 516,
          "line_end": 524,
          "docstring": "Parameters for subscribing to a resource.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "RequestParams"
          ]
        },
        {
          "name": "SubscribeRequest",
          "file_path": "src/mcp/types.py",
          "line_start": 527,
          "line_end": 534,
          "docstring": "Sent from the client to request resources/updated notifications from the server\nwhenever a particular resource changes.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Request[SubscribeRequestParams, Literal['resources/subscribe']]"
          ]
        },
        {
          "name": "UnsubscribeRequestParams",
          "file_path": "src/mcp/types.py",
          "line_start": 537,
          "line_end": 542,
          "docstring": "Parameters for unsubscribing from a resource.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "RequestParams"
          ]
        },
        {
          "name": "UnsubscribeRequest",
          "file_path": "src/mcp/types.py",
          "line_start": 545,
          "line_end": 554,
          "docstring": "Sent from the client to request cancellation of resources/updated notifications from\nthe server.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Request[UnsubscribeRequestParams, Literal['resources/unsubscribe']]"
          ]
        },
        {
          "name": "ResourceUpdatedNotificationParams",
          "file_path": "src/mcp/types.py",
          "line_start": 557,
          "line_end": 565,
          "docstring": "Parameters for resource update notifications.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "NotificationParams"
          ]
        },
        {
          "name": "ResourceUpdatedNotification",
          "file_path": "src/mcp/types.py",
          "line_start": 568,
          "line_end": 579,
          "docstring": "A notification from the server to the client, informing it that a resource has\nchanged and may need to be read again.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Notification[ResourceUpdatedNotificationParams, Literal['notifications/resources/updated']]"
          ]
        },
        {
          "name": "ListPromptsRequest",
          "file_path": "src/mcp/types.py",
          "line_start": 582,
          "line_end": 585,
          "docstring": "Sent from the client to request a list of prompts and prompt templates.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "PaginatedRequest[Literal['prompts/list']]"
          ]
        },
        {
          "name": "PromptArgument",
          "file_path": "src/mcp/types.py",
          "line_start": 588,
          "line_end": 597,
          "docstring": "An argument for a prompt template.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "Prompt",
          "file_path": "src/mcp/types.py",
          "line_start": 600,
          "line_end": 609,
          "docstring": "A prompt or prompt template that the server offers.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "ListPromptsResult",
          "file_path": "src/mcp/types.py",
          "line_start": 612,
          "line_end": 615,
          "docstring": "The server's response to a prompts/list request from the client.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "PaginatedResult"
          ]
        },
        {
          "name": "GetPromptRequestParams",
          "file_path": "src/mcp/types.py",
          "line_start": 618,
          "line_end": 625,
          "docstring": "Parameters for getting a prompt.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "RequestParams"
          ]
        },
        {
          "name": "GetPromptRequest",
          "file_path": "src/mcp/types.py",
          "line_start": 628,
          "line_end": 632,
          "docstring": "Used by the client to get a prompt provided by the server.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Request[GetPromptRequestParams, Literal['prompts/get']]"
          ]
        },
        {
          "name": "TextContent",
          "file_path": "src/mcp/types.py",
          "line_start": 635,
          "line_end": 642,
          "docstring": "Text content for a message.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "ImageContent",
          "file_path": "src/mcp/types.py",
          "line_start": 645,
          "line_end": 657,
          "docstring": "Image content for a message.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "AudioContent",
          "file_path": "src/mcp/types.py",
          "line_start": 660,
          "line_end": 672,
          "docstring": "Audio content for a message.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "SamplingMessage",
          "file_path": "src/mcp/types.py",
          "line_start": 675,
          "line_end": 680,
          "docstring": "Describes a message issued to or received from an LLM API.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "EmbeddedResource",
          "file_path": "src/mcp/types.py",
          "line_start": 683,
          "line_end": 694,
          "docstring": "The contents of a resource, embedded into a prompt or tool call result.\n\nIt is up to the client how best to render embedded resources for the benefit\nof the LLM and/or the user.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "PromptMessage",
          "file_path": "src/mcp/types.py",
          "line_start": 697,
          "line_end": 702,
          "docstring": "Describes a message returned as part of a prompt.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "GetPromptResult",
          "file_path": "src/mcp/types.py",
          "line_start": 705,
          "line_end": 710,
          "docstring": "The server's response to a prompts/get request from the client.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Result"
          ]
        },
        {
          "name": "PromptListChangedNotification",
          "file_path": "src/mcp/types.py",
          "line_start": 713,
          "line_end": 724,
          "docstring": "An optional notification from the server to the client, informing it that the list\nof prompts it offers has changed.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Notification[NotificationParams | None, Literal['notifications/prompts/list_changed']]"
          ]
        },
        {
          "name": "ListToolsRequest",
          "file_path": "src/mcp/types.py",
          "line_start": 727,
          "line_end": 730,
          "docstring": "Sent from the client to request a list of tools the server has.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "PaginatedRequest[Literal['tools/list']]"
          ]
        },
        {
          "name": "ToolAnnotations",
          "file_path": "src/mcp/types.py",
          "line_start": 733,
          "line_end": 778,
          "docstring": "Additional properties describing a Tool to clients.\n\nNOTE: all properties in ToolAnnotations are **hints**.\nThey are not guaranteed to provide a faithful description of\ntool behavior (including descriptive properties like `title`).\n\nClients should never make tool use decisions based on ToolAnnotations\nreceived from untrusted servers.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "Tool",
          "file_path": "src/mcp/types.py",
          "line_start": 781,
          "line_end": 792,
          "docstring": "Definition for a tool the client can call.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "ListToolsResult",
          "file_path": "src/mcp/types.py",
          "line_start": 795,
          "line_end": 798,
          "docstring": "The server's response to a tools/list request from the client.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "PaginatedResult"
          ]
        },
        {
          "name": "CallToolRequestParams",
          "file_path": "src/mcp/types.py",
          "line_start": 801,
          "line_end": 806,
          "docstring": "Parameters for calling a tool.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "RequestParams"
          ]
        },
        {
          "name": "CallToolRequest",
          "file_path": "src/mcp/types.py",
          "line_start": 809,
          "line_end": 813,
          "docstring": "Used by the client to invoke a tool provided by the server.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Request[CallToolRequestParams, Literal['tools/call']]"
          ]
        },
        {
          "name": "CallToolResult",
          "file_path": "src/mcp/types.py",
          "line_start": 816,
          "line_end": 820,
          "docstring": "The server's response to a tool call.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Result"
          ]
        },
        {
          "name": "ToolListChangedNotification",
          "file_path": "src/mcp/types.py",
          "line_start": 823,
          "line_end": 832,
          "docstring": "An optional notification from the server to the client, informing it that the list\nof tools it offers has changed.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Notification[NotificationParams | None, Literal['notifications/tools/list_changed']]"
          ]
        },
        {
          "name": "SetLevelRequestParams",
          "file_path": "src/mcp/types.py",
          "line_start": 840,
          "line_end": 845,
          "docstring": "Parameters for setting the logging level.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "RequestParams"
          ]
        },
        {
          "name": "SetLevelRequest",
          "file_path": "src/mcp/types.py",
          "line_start": 848,
          "line_end": 852,
          "docstring": "A request from the client to the server, to enable or adjust logging.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Request[SetLevelRequestParams, Literal['logging/setLevel']]"
          ]
        },
        {
          "name": "LoggingMessageNotificationParams",
          "file_path": "src/mcp/types.py",
          "line_start": 855,
          "line_end": 867,
          "docstring": "Parameters for logging message notifications.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "NotificationParams"
          ]
        },
        {
          "name": "LoggingMessageNotification",
          "file_path": "src/mcp/types.py",
          "line_start": 870,
          "line_end": 876,
          "docstring": "Notification of a log message passed from server to client.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Notification[LoggingMessageNotificationParams, Literal['notifications/message']]"
          ]
        },
        {
          "name": "ModelHint",
          "file_path": "src/mcp/types.py",
          "line_start": 882,
          "line_end": 888,
          "docstring": "Hints to use for model selection.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "ModelPreferences",
          "file_path": "src/mcp/types.py",
          "line_start": 891,
          "line_end": 939,
          "docstring": "The server's preferences for model selection, requested by the client during\nsampling.\n\nBecause LLMs can vary along multiple dimensions, choosing the \"best\" model is\nrarely straightforward.  Different models excel in different areas\u2014some are\nfaster but less capable, others are more capable but more expensive, and so\non. This interface allows servers to express their priorities across multiple\ndimensions to help clients make an appropriate selection for their use case.\n\nThese preferences are always advisory. The client MAY ignore them. It is also\nup to the client to decide how to interpret these preferences and how to\nbalance them against other considerations.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "CreateMessageRequestParams",
          "file_path": "src/mcp/types.py",
          "line_start": 942,
          "line_end": 964,
          "docstring": "Parameters for creating a message.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "RequestParams"
          ]
        },
        {
          "name": "CreateMessageRequest",
          "file_path": "src/mcp/types.py",
          "line_start": 967,
          "line_end": 973,
          "docstring": "A request from the server to sample an LLM via the client.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Request[CreateMessageRequestParams, Literal['sampling/createMessage']]"
          ]
        },
        {
          "name": "CreateMessageResult",
          "file_path": "src/mcp/types.py",
          "line_start": 979,
          "line_end": 987,
          "docstring": "The client's response to a sampling/create_message request from the server.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Result"
          ]
        },
        {
          "name": "ResourceReference",
          "file_path": "src/mcp/types.py",
          "line_start": 990,
          "line_end": 996,
          "docstring": "A reference to a resource or resource template definition.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "PromptReference",
          "file_path": "src/mcp/types.py",
          "line_start": 999,
          "line_end": 1005,
          "docstring": "Identifies a prompt.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "CompletionArgument",
          "file_path": "src/mcp/types.py",
          "line_start": 1008,
          "line_end": 1015,
          "docstring": "The argument's information for completion requests.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "CompleteRequestParams",
          "file_path": "src/mcp/types.py",
          "line_start": 1018,
          "line_end": 1023,
          "docstring": "Parameters for completion requests.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "RequestParams"
          ]
        },
        {
          "name": "CompleteRequest",
          "file_path": "src/mcp/types.py",
          "line_start": 1026,
          "line_end": 1030,
          "docstring": "A request from the client to the server, to ask for completion options.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Request[CompleteRequestParams, Literal['completion/complete']]"
          ]
        },
        {
          "name": "Completion",
          "file_path": "src/mcp/types.py",
          "line_start": 1033,
          "line_end": 1048,
          "docstring": "Completion information.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "CompleteResult",
          "file_path": "src/mcp/types.py",
          "line_start": 1051,
          "line_end": 1054,
          "docstring": "The server's response to a completion/complete request",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Result"
          ]
        },
        {
          "name": "ListRootsRequest",
          "file_path": "src/mcp/types.py",
          "line_start": 1057,
          "line_end": 1069,
          "docstring": "Sent from the server to request a list of root URIs from the client. Roots allow\nservers to ask for specific directories or files to operate on. A common example\nfor roots is providing a set of repositories or directories a server should operate\non.\n\nThis request is typically used when the server needs to understand the file system\nstructure or access specific locations that the client has permission to read from.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Request[RequestParams | None, Literal['roots/list']]"
          ]
        },
        {
          "name": "Root",
          "file_path": "src/mcp/types.py",
          "line_start": 1072,
          "line_end": 1087,
          "docstring": "Represents a root directory or file that the server can operate on.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "ListRootsResult",
          "file_path": "src/mcp/types.py",
          "line_start": 1090,
          "line_end": 1097,
          "docstring": "The client's response to a roots/list request from the server.\nThis result contains an array of Root objects, each representing a root directory\nor file that the server can operate on.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Result"
          ]
        },
        {
          "name": "RootsListChangedNotification",
          "file_path": "src/mcp/types.py",
          "line_start": 1100,
          "line_end": 1113,
          "docstring": "A notification from the client to the server, informing it that the list of\nroots has changed.\n\nThis notification should be sent whenever the client adds, removes, or\nmodifies any root. The server should then request an updated list of roots\nusing the ListRootsRequest.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Notification[NotificationParams | None, Literal['notifications/roots/list_changed']]"
          ]
        },
        {
          "name": "CancelledNotificationParams",
          "file_path": "src/mcp/types.py",
          "line_start": 1116,
          "line_end": 1123,
          "docstring": "Parameters for cancellation notifications.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "NotificationParams"
          ]
        },
        {
          "name": "CancelledNotification",
          "file_path": "src/mcp/types.py",
          "line_start": 1126,
          "line_end": 1135,
          "docstring": "This notification can be sent by either side to indicate that it is canceling a\npreviously-issued request.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Notification[CancelledNotificationParams, Literal['notifications/cancelled']]"
          ]
        },
        {
          "name": "ClientRequest",
          "file_path": "src/mcp/types.py",
          "line_start": 1138,
          "line_end": 1155,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "RootModel[PingRequest | InitializeRequest | CompleteRequest | SetLevelRequest | GetPromptRequest | ListPromptsRequest | ListResourcesRequest | ListResourceTemplatesRequest | ReadResourceRequest | SubscribeRequest | UnsubscribeRequest | CallToolRequest | ListToolsRequest]"
          ]
        },
        {
          "name": "ClientNotification",
          "file_path": "src/mcp/types.py",
          "line_start": 1158,
          "line_end": 1166,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "RootModel[CancelledNotification | ProgressNotification | InitializedNotification | RootsListChangedNotification]"
          ]
        },
        {
          "name": "ClientResult",
          "file_path": "src/mcp/types.py",
          "line_start": 1169,
          "line_end": 1170,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "RootModel[EmptyResult | CreateMessageResult | ListRootsResult]"
          ]
        },
        {
          "name": "ServerRequest",
          "file_path": "src/mcp/types.py",
          "line_start": 1173,
          "line_end": 1174,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "RootModel[PingRequest | CreateMessageRequest | ListRootsRequest]"
          ]
        },
        {
          "name": "ServerNotification",
          "file_path": "src/mcp/types.py",
          "line_start": 1177,
          "line_end": 1188,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "RootModel[CancelledNotification | ProgressNotification | LoggingMessageNotification | ResourceUpdatedNotification | ResourceListChangedNotification | ToolListChangedNotification | PromptListChangedNotification]"
          ]
        },
        {
          "name": "ServerResult",
          "file_path": "src/mcp/types.py",
          "line_start": 1191,
          "line_end": 1205,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "RootModel[EmptyResult | InitializeResult | CompleteResult | GetPromptResult | ListPromptsResult | ListResourcesResult | ListResourceTemplatesResult | ReadResourceResult | CallToolResult | ListToolsResult]"
          ]
        },
        {
          "name": "Meta",
          "file_path": "src/mcp/types.py",
          "line_start": 42,
          "line_end": 51,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "Meta",
          "file_path": "src/mcp/types.py",
          "line_start": 65,
          "line_end": 66,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        }
      ],
      "constants": [
        "LATEST_PROTOCOL_VERSION",
        "CONNECTION_CLOSED",
        "PARSE_ERROR",
        "INVALID_REQUEST",
        "METHOD_NOT_FOUND",
        "INVALID_PARAMS",
        "INTERNAL_ERROR"
      ],
      "language": "python",
      "lines_of_code": 1206,
      "complexity_score": 0.0
    },
    {
      "name": "__init__",
      "path": "src/mcp/__init__.py",
      "docstring": null,
      "imports": [
        "client.session.ClientSession",
        "client.session_group.ClientSessionGroup",
        "client.stdio.StdioServerParameters",
        "client.stdio.stdio_client",
        "server.session.ServerSession",
        "server.stdio.stdio_server",
        "shared.exceptions.McpError",
        "types.CallToolRequest",
        "types.ClientCapabilities",
        "types.ClientNotification",
        "types.ClientRequest",
        "types.ClientResult",
        "types.CompleteRequest",
        "types.CreateMessageRequest",
        "types.CreateMessageResult",
        "types.ErrorData",
        "types.GetPromptRequest",
        "types.GetPromptResult",
        "types.Implementation",
        "types.IncludeContext",
        "types.InitializedNotification",
        "types.InitializeRequest",
        "types.InitializeResult",
        "types.JSONRPCError",
        "types.JSONRPCRequest",
        "types.JSONRPCResponse",
        "types.ListPromptsRequest",
        "types.ListPromptsResult",
        "types.ListResourcesRequest",
        "types.ListResourcesResult",
        "types.ListToolsResult",
        "types.LoggingLevel",
        "types.LoggingMessageNotification",
        "types.Notification",
        "types.PingRequest",
        "types.ProgressNotification",
        "types.PromptsCapability",
        "types.ReadResourceRequest",
        "types.ReadResourceResult",
        "types.Resource",
        "types.ResourcesCapability",
        "types.ResourceUpdatedNotification",
        "types.RootsCapability",
        "types.SamplingMessage",
        "types.ServerCapabilities",
        "types.ServerNotification",
        "types.ServerRequest",
        "types.ServerResult",
        "types.SetLevelRequest",
        "types.StopReason",
        "types.SubscribeRequest",
        "types.Tool",
        "types.ToolsCapability",
        "types.UnsubscribeRequest",
        "types.Role"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 117,
      "complexity_score": 0.0
    },
    {
      "name": "claude",
      "path": "src/mcp/cli/claude.py",
      "docstring": "Claude app integration utilities.",
      "imports": [
        "json",
        "os",
        "shutil",
        "sys",
        "pathlib.Path",
        "typing.Any",
        "mcp.server.fastmcp.utilities.logging.get_logger"
      ],
      "functions": [
        {
          "name": "get_claude_config_path",
          "file_path": "src/mcp/cli/claude.py",
          "line_start": 17,
          "line_end": 32,
          "docstring": "Get the Claude config directory based on platform.",
          "parameters": [],
          "return_type": "Path | None",
          "complexity": 5,
          "is_async": false
        },
        {
          "name": "get_uv_path",
          "file_path": "src/mcp/cli/claude.py",
          "line_start": 35,
          "line_end": 44,
          "docstring": "Get the full path to the uv executable.",
          "parameters": [],
          "return_type": "str",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "update_claude_config",
          "file_path": "src/mcp/cli/claude.py",
          "line_start": 47,
          "line_end": 156,
          "docstring": "Add or update a FastMCP server in Claude's configuration.\n\nArgs:\n    file_spec: Path to the server file, optionally with :object suffix\n    server_name: Name for the server in Claude's config\n    with_editable: Optional directory to install in editable mode\n    with_packages: Optional list of additional packages to install\n    env_vars: Optional dictionary of environment variables. These are merged with\n        any existing variables, with new values taking precedence.\n\nRaises:\n    RuntimeError: If Claude Desktop's config directory is not found, indicating\n        Claude Desktop may not be installed or properly set up.",
          "parameters": [
            "file_spec",
            "server_name"
          ],
          "return_type": "bool",
          "complexity": 15,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [
        "MCP_PACKAGE"
      ],
      "language": "python",
      "lines_of_code": 157,
      "complexity_score": 7.333333333333333
    },
    {
      "name": "cli",
      "path": "src/mcp/cli/cli.py",
      "docstring": "MCP CLI tools.",
      "imports": [
        "importlib.metadata",
        "importlib.util",
        "os",
        "subprocess",
        "sys",
        "pathlib.Path",
        "typing.Annotated",
        "typing.Any",
        "mcp.server.FastMCP",
        "mcp.server.Server",
        "typer",
        "mcp.cli.claude",
        "mcp.server.fastmcp.utilities.logging.get_logger",
        "dotenv"
      ],
      "functions": [
        {
          "name": "_get_npx_command",
          "file_path": "src/mcp/cli/cli.py",
          "line_start": 42,
          "line_end": 55,
          "docstring": "Get the correct npx command for the current platform.",
          "parameters": [],
          "return_type": null,
          "complexity": 4,
          "is_async": false
        },
        {
          "name": "_parse_env_var",
          "file_path": "src/mcp/cli/cli.py",
          "line_start": 58,
          "line_end": 66,
          "docstring": "Parse environment variable string in format KEY=VALUE.",
          "parameters": [
            "env_var"
          ],
          "return_type": "tuple[str, str]",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "_build_uv_command",
          "file_path": "src/mcp/cli/cli.py",
          "line_start": 69,
          "line_end": 89,
          "docstring": "Build the uv run command that runs a MCP server through mcp run.",
          "parameters": [
            "file_spec",
            "with_editable",
            "with_packages"
          ],
          "return_type": "list[str]",
          "complexity": 5,
          "is_async": false
        },
        {
          "name": "_parse_file_path",
          "file_path": "src/mcp/cli/cli.py",
          "line_start": 92,
          "line_end": 120,
          "docstring": "Parse a file path that may include a server object specification.\n\nArgs:\n    file_spec: Path to file, optionally with :object suffix\n\nReturns:\n    Tuple of (file_path, server_object)",
          "parameters": [
            "file_spec"
          ],
          "return_type": "tuple[Path, str | None]",
          "complexity": 5,
          "is_async": false
        },
        {
          "name": "_import_server",
          "file_path": "src/mcp/cli/cli.py",
          "line_start": 123,
          "line_end": 219,
          "docstring": "Import a MCP server from a file.\n\nArgs:\n    file: Path to the file\n    server_object: Optional object name in format \"module:object\" or just \"object\"\n\nReturns:\n    The server object",
          "parameters": [
            "file",
            "server_object"
          ],
          "return_type": null,
          "complexity": 14,
          "is_async": false
        },
        {
          "name": "version",
          "file_path": "src/mcp/cli/cli.py",
          "line_start": 223,
          "line_end": 230,
          "docstring": "Show the MCP version.",
          "parameters": [],
          "return_type": "None",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "dev",
          "file_path": "src/mcp/cli/cli.py",
          "line_start": 234,
          "line_end": 314,
          "docstring": "Run a MCP server with the MCP Inspector.",
          "parameters": [
            "file_spec",
            "with_editable",
            "with_packages"
          ],
          "return_type": "None",
          "complexity": 4,
          "is_async": false
        },
        {
          "name": "run",
          "file_path": "src/mcp/cli/cli.py",
          "line_start": 318,
          "line_end": 372,
          "docstring": "Run a MCP server.\n\nThe server can be specified in two ways:\n\n1. Module approach: server.py - runs the module directly, expecting a server.run() call.\n\n2. Import approach: server.py:app - imports and runs the specified server object.\n\n\n\nNote: This command runs the server directly. You are responsible for ensuring\nall dependencies are available.\n\nFor dependency management, use `mcp install` or `mcp dev` instead.",
          "parameters": [
            "file_spec",
            "transport"
          ],
          "return_type": "None",
          "complexity": 3,
          "is_async": false
        },
        {
          "name": "install",
          "file_path": "src/mcp/cli/cli.py",
          "line_start": 376,
          "line_end": 507,
          "docstring": "Install a MCP server in the Claude desktop app.\n\nEnvironment variables are preserved once added and only updated if new values\nare explicitly provided.",
          "parameters": [
            "file_spec",
            "server_name",
            "with_editable",
            "with_packages",
            "env_vars",
            "env_file"
          ],
          "return_type": "None",
          "complexity": 13,
          "is_async": false
        },
        {
          "name": "_check_server_object",
          "file_path": "src/mcp/cli/cli.py",
          "line_start": 147,
          "line_end": 167,
          "docstring": "Helper function to check that the server object is supported\n\nArgs:\n    server_object: The server object to check.\n\nReturns:\n    True if it's supported.",
          "parameters": [
            "server_object",
            "object_name"
          ],
          "return_type": null,
          "complexity": 3,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 508,
      "complexity_score": 5.5
    },
    {
      "name": "__init__",
      "path": "src/mcp/cli/__init__.py",
      "docstring": "FastMCP CLI package.",
      "imports": [
        "cli.app"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 7,
      "complexity_score": 0.0
    },
    {
      "name": "auth",
      "path": "src/mcp/client/auth.py",
      "docstring": "OAuth2 Authentication implementation for HTTPX.\n\nImplements authorization code flow with PKCE and automatic token refresh.",
      "imports": [
        "base64",
        "hashlib",
        "logging",
        "secrets",
        "string",
        "time",
        "collections.abc.AsyncGenerator",
        "collections.abc.Awaitable",
        "collections.abc.Callable",
        "typing.Protocol",
        "urllib.parse.urlencode",
        "urllib.parse.urljoin",
        "anyio",
        "httpx",
        "mcp.shared.auth.OAuthClientInformationFull",
        "mcp.shared.auth.OAuthClientMetadata",
        "mcp.shared.auth.OAuthMetadata",
        "mcp.shared.auth.OAuthToken",
        "mcp.types.LATEST_PROTOCOL_VERSION",
        "urllib.parse.urlparse",
        "urllib.parse.urlunparse"
      ],
      "functions": [
        {
          "name": "__init__",
          "file_path": "src/mcp/client/auth.py",
          "line_start": 57,
          "line_end": 99,
          "docstring": "Initialize OAuth2 authentication.\n\nArgs:\n    server_url: Base URL of the OAuth server\n    client_metadata: OAuth client metadata\n    storage: Token storage implementation (defaults to in-memory)\n    redirect_handler: Function to handle authorization URL like opening browser\n    callback_handler: Function to wait for callback\n                      and return (auth_code, state)\n    timeout: Timeout for OAuth flow in seconds",
          "parameters": [
            "self",
            "server_url",
            "client_metadata",
            "storage",
            "redirect_handler",
            "callback_handler",
            "timeout"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "_generate_code_verifier",
          "file_path": "src/mcp/client/auth.py",
          "line_start": 101,
          "line_end": 106,
          "docstring": "Generate a cryptographically random code verifier for PKCE.",
          "parameters": [
            "self"
          ],
          "return_type": "str",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "_generate_code_challenge",
          "file_path": "src/mcp/client/auth.py",
          "line_start": 108,
          "line_end": 111,
          "docstring": "Generate a code challenge from a code verifier using SHA256.",
          "parameters": [
            "self",
            "code_verifier"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "_get_authorization_base_url",
          "file_path": "src/mcp/client/auth.py",
          "line_start": 113,
          "line_end": 123,
          "docstring": "Extract base URL by removing path component.\n\nPer MCP spec 2.3.2: https://api.example.com/v1/mcp -> https://api.example.com",
          "parameters": [
            "self",
            "server_url"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "_has_valid_token",
          "file_path": "src/mcp/client/auth.py",
          "line_start": 238,
          "line_end": 247,
          "docstring": "Check if current token is valid.",
          "parameters": [
            "self"
          ],
          "return_type": "bool",
          "complexity": 5,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "TokenStorage",
          "file_path": "src/mcp/client/auth.py",
          "line_start": 31,
          "line_end": 48,
          "docstring": "Protocol for token storage implementations.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Protocol"
          ]
        },
        {
          "name": "OAuthClientProvider",
          "file_path": "src/mcp/client/auth.py",
          "line_start": 51,
          "line_end": 501,
          "docstring": "Authentication for httpx using anyio.\nHandles OAuth flow with automatic client registration and token storage.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/client/auth.py",
              "line_start": 57,
              "line_end": 99,
              "docstring": "Initialize OAuth2 authentication.\n\nArgs:\n    server_url: Base URL of the OAuth server\n    client_metadata: OAuth client metadata\n    storage: Token storage implementation (defaults to in-memory)\n    redirect_handler: Function to handle authorization URL like opening browser\n    callback_handler: Function to wait for callback\n                      and return (auth_code, state)\n    timeout: Timeout for OAuth flow in seconds",
              "parameters": [
                "self",
                "server_url",
                "client_metadata",
                "storage",
                "redirect_handler",
                "callback_handler",
                "timeout"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "_generate_code_verifier",
              "file_path": "src/mcp/client/auth.py",
              "line_start": 101,
              "line_end": 106,
              "docstring": "Generate a cryptographically random code verifier for PKCE.",
              "parameters": [
                "self"
              ],
              "return_type": "str",
              "complexity": 2,
              "is_async": false
            },
            {
              "name": "_generate_code_challenge",
              "file_path": "src/mcp/client/auth.py",
              "line_start": 108,
              "line_end": 111,
              "docstring": "Generate a code challenge from a code verifier using SHA256.",
              "parameters": [
                "self",
                "code_verifier"
              ],
              "return_type": "str",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "_get_authorization_base_url",
              "file_path": "src/mcp/client/auth.py",
              "line_start": 113,
              "line_end": 123,
              "docstring": "Extract base URL by removing path component.\n\nPer MCP spec 2.3.2: https://api.example.com/v1/mcp -> https://api.example.com",
              "parameters": [
                "self",
                "server_url"
              ],
              "return_type": "str",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "_has_valid_token",
              "file_path": "src/mcp/client/auth.py",
              "line_start": 238,
              "line_end": 247,
              "docstring": "Check if current token is valid.",
              "parameters": [
                "self"
              ],
              "return_type": "bool",
              "complexity": 5,
              "is_async": false
            }
          ],
          "attributes": [
            "server_url",
            "client_metadata",
            "storage",
            "redirect_handler",
            "callback_handler",
            "timeout",
            "_token_lock"
          ],
          "inheritance": [
            "httpx.Auth"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 502,
      "complexity_score": 2.0
    },
    {
      "name": "session",
      "path": "src/mcp/client/session.py",
      "docstring": null,
      "imports": [
        "datetime.timedelta",
        "typing.Any",
        "typing.Protocol",
        "anyio.lowlevel",
        "anyio.streams.memory.MemoryObjectReceiveStream",
        "anyio.streams.memory.MemoryObjectSendStream",
        "pydantic.AnyUrl",
        "pydantic.TypeAdapter",
        "mcp.types",
        "mcp.shared.context.RequestContext",
        "mcp.shared.message.SessionMessage",
        "mcp.shared.session.BaseSession",
        "mcp.shared.session.ProgressFnT",
        "mcp.shared.session.RequestResponder",
        "mcp.shared.version.SUPPORTED_PROTOCOL_VERSIONS"
      ],
      "functions": [
        {
          "name": "__init__",
          "file_path": "src/mcp/client/session.py",
          "line_start": 94,
          "line_end": 116,
          "docstring": null,
          "parameters": [
            "self",
            "read_stream",
            "write_stream",
            "read_timeout_seconds",
            "sampling_callback",
            "list_roots_callback",
            "logging_callback",
            "message_handler",
            "client_info"
          ],
          "return_type": "None",
          "complexity": 6,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "SamplingFnT",
          "file_path": "src/mcp/client/session.py",
          "line_start": 17,
          "line_end": 22,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Protocol"
          ]
        },
        {
          "name": "ListRootsFnT",
          "file_path": "src/mcp/client/session.py",
          "line_start": 25,
          "line_end": 28,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Protocol"
          ]
        },
        {
          "name": "LoggingFnT",
          "file_path": "src/mcp/client/session.py",
          "line_start": 31,
          "line_end": 35,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Protocol"
          ]
        },
        {
          "name": "MessageHandlerFnT",
          "file_path": "src/mcp/client/session.py",
          "line_start": 38,
          "line_end": 44,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Protocol"
          ]
        },
        {
          "name": "ClientSession",
          "file_path": "src/mcp/client/session.py",
          "line_start": 85,
          "line_end": 420,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/client/session.py",
              "line_start": 94,
              "line_end": 116,
              "docstring": null,
              "parameters": [
                "self",
                "read_stream",
                "write_stream",
                "read_timeout_seconds",
                "sampling_callback",
                "list_roots_callback",
                "logging_callback",
                "message_handler",
                "client_info"
              ],
              "return_type": "None",
              "complexity": 6,
              "is_async": false
            }
          ],
          "attributes": [
            "_client_info",
            "_sampling_callback",
            "_list_roots_callback",
            "_logging_callback",
            "_message_handler"
          ],
          "inheritance": [
            "BaseSession[types.ClientRequest, types.ClientNotification, types.ClientResult, types.ServerRequest, types.ServerNotification]"
          ]
        }
      ],
      "constants": [
        "DEFAULT_CLIENT_INFO"
      ],
      "language": "python",
      "lines_of_code": 421,
      "complexity_score": 6.0
    },
    {
      "name": "session_group",
      "path": "src/mcp/client/session_group.py",
      "docstring": "SessionGroup concurrently manages multiple MCP session connections.\n\nTools, resources, and prompts are aggregated across servers. Servers may\nbe connected to or disconnected from at any point after initialization.\n\nThis abstractions can handle naming collisions using a custom user-provided\nhook.",
      "imports": [
        "contextlib",
        "logging",
        "collections.abc.Callable",
        "datetime.timedelta",
        "types.TracebackType",
        "typing.Any",
        "typing.TypeAlias",
        "anyio",
        "pydantic.BaseModel",
        "typing_extensions.Self",
        "mcp",
        "mcp.types",
        "mcp.client.sse.sse_client",
        "mcp.client.stdio.StdioServerParameters",
        "mcp.client.streamable_http.streamablehttp_client",
        "mcp.shared.exceptions.McpError"
      ],
      "functions": [
        {
          "name": "__init__",
          "file_path": "src/mcp/client/session_group.py",
          "line_start": 112,
          "line_end": 132,
          "docstring": "Initializes the MCP client.",
          "parameters": [
            "self",
            "exit_stack",
            "component_name_hook"
          ],
          "return_type": "None",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "sessions",
          "file_path": "src/mcp/client/session_group.py",
          "line_start": 158,
          "line_end": 160,
          "docstring": "Returns the list of sessions being managed.",
          "parameters": [
            "self"
          ],
          "return_type": "list[mcp.ClientSession]",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "prompts",
          "file_path": "src/mcp/client/session_group.py",
          "line_start": 163,
          "line_end": 165,
          "docstring": "Returns the prompts as a dictionary of names to prompts.",
          "parameters": [
            "self"
          ],
          "return_type": "dict[str, types.Prompt]",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "resources",
          "file_path": "src/mcp/client/session_group.py",
          "line_start": 168,
          "line_end": 170,
          "docstring": "Returns the resources as a dictionary of names to resources.",
          "parameters": [
            "self"
          ],
          "return_type": "dict[str, types.Resource]",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "tools",
          "file_path": "src/mcp/client/session_group.py",
          "line_start": 173,
          "line_end": 175,
          "docstring": "Returns the tools as a dictionary of names to tools.",
          "parameters": [
            "self"
          ],
          "return_type": "dict[str, types.Tool]",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "_component_name",
          "file_path": "src/mcp/client/session_group.py",
          "line_start": 369,
          "line_end": 372,
          "docstring": null,
          "parameters": [
            "self",
            "name",
            "server_info"
          ],
          "return_type": "str",
          "complexity": 2,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "SseServerParameters",
          "file_path": "src/mcp/client/session_group.py",
          "line_start": 30,
          "line_end": 43,
          "docstring": "Parameters for intializing a sse_client.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "StreamableHttpParameters",
          "file_path": "src/mcp/client/session_group.py",
          "line_start": 46,
          "line_end": 62,
          "docstring": "Parameters for intializing a streamablehttp_client.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "ClientSessionGroup",
          "file_path": "src/mcp/client/session_group.py",
          "line_start": 70,
          "line_end": 372,
          "docstring": "Client for managing connections to multiple MCP servers.\n\nThis class is responsible for encapsulating management of server connections.\nIt aggregates tools, resources, and prompts from all connected servers.\n\nFor auxiliary handlers, such as resource subscription, this is delegated to\nthe client and can be accessed via the session.\n\nExample Usage:\n    name_fn = lambda name, server_info: f\"{(server_info.name)}_{name}\"\n    async with ClientSessionGroup(component_name_hook=name_fn) as group:\n        for server_params in server_params:\n            await group.connect_to_server(server_param)\n        ...",
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/client/session_group.py",
              "line_start": 112,
              "line_end": 132,
              "docstring": "Initializes the MCP client.",
              "parameters": [
                "self",
                "exit_stack",
                "component_name_hook"
              ],
              "return_type": "None",
              "complexity": 2,
              "is_async": false
            },
            {
              "name": "sessions",
              "file_path": "src/mcp/client/session_group.py",
              "line_start": 158,
              "line_end": 160,
              "docstring": "Returns the list of sessions being managed.",
              "parameters": [
                "self"
              ],
              "return_type": "list[mcp.ClientSession]",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "prompts",
              "file_path": "src/mcp/client/session_group.py",
              "line_start": 163,
              "line_end": 165,
              "docstring": "Returns the prompts as a dictionary of names to prompts.",
              "parameters": [
                "self"
              ],
              "return_type": "dict[str, types.Prompt]",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "resources",
              "file_path": "src/mcp/client/session_group.py",
              "line_start": 168,
              "line_end": 170,
              "docstring": "Returns the resources as a dictionary of names to resources.",
              "parameters": [
                "self"
              ],
              "return_type": "dict[str, types.Resource]",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "tools",
              "file_path": "src/mcp/client/session_group.py",
              "line_start": 173,
              "line_end": 175,
              "docstring": "Returns the tools as a dictionary of names to tools.",
              "parameters": [
                "self"
              ],
              "return_type": "dict[str, types.Tool]",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "_component_name",
              "file_path": "src/mcp/client/session_group.py",
              "line_start": 369,
              "line_end": 372,
              "docstring": null,
              "parameters": [
                "self",
                "name",
                "server_info"
              ],
              "return_type": "str",
              "complexity": 2,
              "is_async": false
            }
          ],
          "attributes": [
            "_tools",
            "_resources",
            "_prompts",
            "_sessions",
            "_tool_to_session",
            "_session_exit_stacks",
            "_component_name_hook"
          ],
          "inheritance": []
        },
        {
          "name": "_ComponentNames",
          "file_path": "src/mcp/client/session_group.py",
          "line_start": 88,
          "line_end": 93,
          "docstring": "Used for reverse index to find components.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 373,
      "complexity_score": 1.3333333333333333
    },
    {
      "name": "sse",
      "path": "src/mcp/client/sse.py",
      "docstring": null,
      "imports": [
        "logging",
        "contextlib.asynccontextmanager",
        "typing.Any",
        "urllib.parse.urljoin",
        "urllib.parse.urlparse",
        "anyio",
        "httpx",
        "anyio.abc.TaskStatus",
        "anyio.streams.memory.MemoryObjectReceiveStream",
        "anyio.streams.memory.MemoryObjectSendStream",
        "httpx_sse.aconnect_sse",
        "mcp.types",
        "mcp.shared._httpx_utils.McpHttpClientFactory",
        "mcp.shared._httpx_utils.create_mcp_http_client",
        "mcp.shared.message.SessionMessage"
      ],
      "functions": [
        {
          "name": "remove_request_params",
          "file_path": "src/mcp/client/sse.py",
          "line_start": 19,
          "line_end": 20,
          "docstring": null,
          "parameters": [
            "url"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 161,
      "complexity_score": 1.0
    },
    {
      "name": "streamable_http",
      "path": "src/mcp/client/streamable_http.py",
      "docstring": "StreamableHTTP Client Transport Module\n\nThis module implements the StreamableHTTP transport for MCP clients,\nproviding support for HTTP POST requests with optional SSE streaming responses\nand session management.",
      "imports": [
        "logging",
        "collections.abc.AsyncGenerator",
        "collections.abc.Awaitable",
        "collections.abc.Callable",
        "contextlib.asynccontextmanager",
        "dataclasses.dataclass",
        "datetime.timedelta",
        "typing.Any",
        "anyio",
        "httpx",
        "anyio.abc.TaskGroup",
        "anyio.streams.memory.MemoryObjectReceiveStream",
        "anyio.streams.memory.MemoryObjectSendStream",
        "httpx_sse.EventSource",
        "httpx_sse.ServerSentEvent",
        "httpx_sse.aconnect_sse",
        "mcp.shared._httpx_utils.McpHttpClientFactory",
        "mcp.shared._httpx_utils.create_mcp_http_client",
        "mcp.shared.message.ClientMessageMetadata",
        "mcp.shared.message.SessionMessage",
        "mcp.types.ErrorData",
        "mcp.types.JSONRPCError",
        "mcp.types.JSONRPCMessage",
        "mcp.types.JSONRPCNotification",
        "mcp.types.JSONRPCRequest",
        "mcp.types.JSONRPCResponse",
        "mcp.types.RequestId"
      ],
      "functions": [
        {
          "name": "__init__",
          "file_path": "src/mcp/client/streamable_http.py",
          "line_start": 80,
          "line_end": 107,
          "docstring": "Initialize the StreamableHTTP transport.\n\nArgs:\n    url: The endpoint URL.\n    headers: Optional headers to include in requests.\n    timeout: HTTP timeout for regular operations.\n    sse_read_timeout: Timeout for SSE read operations.\n    auth: Optional HTTPX authentication handler.",
          "parameters": [
            "self",
            "url",
            "headers",
            "timeout",
            "sse_read_timeout",
            "auth"
          ],
          "return_type": "None",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "_update_headers_with_session",
          "file_path": "src/mcp/client/streamable_http.py",
          "line_start": 109,
          "line_end": 116,
          "docstring": "Update headers with session ID if available.",
          "parameters": [
            "self",
            "base_headers"
          ],
          "return_type": "dict[str, str]",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "_is_initialization_request",
          "file_path": "src/mcp/client/streamable_http.py",
          "line_start": 118,
          "line_end": 123,
          "docstring": "Check if the message is an initialization request.",
          "parameters": [
            "self",
            "message"
          ],
          "return_type": "bool",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "_is_initialized_notification",
          "file_path": "src/mcp/client/streamable_http.py",
          "line_start": 125,
          "line_end": 130,
          "docstring": "Check if the message is an initialized notification.",
          "parameters": [
            "self",
            "message"
          ],
          "return_type": "bool",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "_maybe_extract_session_id_from_response",
          "file_path": "src/mcp/client/streamable_http.py",
          "line_start": 132,
          "line_end": 140,
          "docstring": "Extract and store session ID from response headers.",
          "parameters": [
            "self",
            "response"
          ],
          "return_type": "None",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "get_session_id",
          "file_path": "src/mcp/client/streamable_http.py",
          "line_start": 422,
          "line_end": 424,
          "docstring": "Get the current session ID.",
          "parameters": [
            "self"
          ],
          "return_type": "str | None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "start_get_stream",
          "file_path": "src/mcp/client/streamable_http.py",
          "line_start": 478,
          "line_end": 481,
          "docstring": null,
          "parameters": [],
          "return_type": "None",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "StreamableHTTPError",
          "file_path": "src/mcp/client/streamable_http.py",
          "line_start": 52,
          "line_end": 55,
          "docstring": "Base exception for StreamableHTTP transport errors.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Exception"
          ]
        },
        {
          "name": "ResumptionError",
          "file_path": "src/mcp/client/streamable_http.py",
          "line_start": 58,
          "line_end": 61,
          "docstring": "Raised when resumption request is invalid.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "StreamableHTTPError"
          ]
        },
        {
          "name": "RequestContext",
          "file_path": "src/mcp/client/streamable_http.py",
          "line_start": 65,
          "line_end": 74,
          "docstring": "Context for a request operation.",
          "methods": [],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "StreamableHTTPTransport",
          "file_path": "src/mcp/client/streamable_http.py",
          "line_start": 77,
          "line_end": 424,
          "docstring": "StreamableHTTP client transport implementation.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/client/streamable_http.py",
              "line_start": 80,
              "line_end": 107,
              "docstring": "Initialize the StreamableHTTP transport.\n\nArgs:\n    url: The endpoint URL.\n    headers: Optional headers to include in requests.\n    timeout: HTTP timeout for regular operations.\n    sse_read_timeout: Timeout for SSE read operations.\n    auth: Optional HTTPX authentication handler.",
              "parameters": [
                "self",
                "url",
                "headers",
                "timeout",
                "sse_read_timeout",
                "auth"
              ],
              "return_type": "None",
              "complexity": 2,
              "is_async": false
            },
            {
              "name": "_update_headers_with_session",
              "file_path": "src/mcp/client/streamable_http.py",
              "line_start": 109,
              "line_end": 116,
              "docstring": "Update headers with session ID if available.",
              "parameters": [
                "self",
                "base_headers"
              ],
              "return_type": "dict[str, str]",
              "complexity": 2,
              "is_async": false
            },
            {
              "name": "_is_initialization_request",
              "file_path": "src/mcp/client/streamable_http.py",
              "line_start": 118,
              "line_end": 123,
              "docstring": "Check if the message is an initialization request.",
              "parameters": [
                "self",
                "message"
              ],
              "return_type": "bool",
              "complexity": 2,
              "is_async": false
            },
            {
              "name": "_is_initialized_notification",
              "file_path": "src/mcp/client/streamable_http.py",
              "line_start": 125,
              "line_end": 130,
              "docstring": "Check if the message is an initialized notification.",
              "parameters": [
                "self",
                "message"
              ],
              "return_type": "bool",
              "complexity": 2,
              "is_async": false
            },
            {
              "name": "_maybe_extract_session_id_from_response",
              "file_path": "src/mcp/client/streamable_http.py",
              "line_start": 132,
              "line_end": 140,
              "docstring": "Extract and store session ID from response headers.",
              "parameters": [
                "self",
                "response"
              ],
              "return_type": "None",
              "complexity": 2,
              "is_async": false
            },
            {
              "name": "get_session_id",
              "file_path": "src/mcp/client/streamable_http.py",
              "line_start": 422,
              "line_end": 424,
              "docstring": "Get the current session ID.",
              "parameters": [
                "self"
              ],
              "return_type": "str | None",
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "url",
            "headers",
            "timeout",
            "sse_read_timeout",
            "auth",
            "request_headers"
          ],
          "inheritance": []
        }
      ],
      "constants": [
        "MCP_SESSION_ID",
        "LAST_EVENT_ID",
        "CONTENT_TYPE",
        "ACCEPT",
        "JSON",
        "SSE"
      ],
      "language": "python",
      "lines_of_code": 506,
      "complexity_score": 1.7142857142857142
    },
    {
      "name": "websocket",
      "path": "src/mcp/client/websocket.py",
      "docstring": null,
      "imports": [
        "json",
        "logging",
        "collections.abc.AsyncGenerator",
        "contextlib.asynccontextmanager",
        "anyio",
        "anyio.streams.memory.MemoryObjectReceiveStream",
        "anyio.streams.memory.MemoryObjectSendStream",
        "pydantic.ValidationError",
        "websockets.asyncio.client.connect",
        "websockets.typing.Subprotocol",
        "mcp.types",
        "mcp.shared.message.SessionMessage"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 92,
      "complexity_score": 0.0
    },
    {
      "name": "__main__",
      "path": "src/mcp/client/__main__.py",
      "docstring": null,
      "imports": [
        "argparse",
        "logging",
        "sys",
        "functools.partial",
        "urllib.parse.urlparse",
        "anyio",
        "anyio.streams.memory.MemoryObjectReceiveStream",
        "anyio.streams.memory.MemoryObjectSendStream",
        "mcp.types",
        "mcp.client.session.ClientSession",
        "mcp.client.sse.sse_client",
        "mcp.client.stdio.StdioServerParameters",
        "mcp.client.stdio.stdio_client",
        "mcp.shared.message.SessionMessage",
        "mcp.shared.session.RequestResponder",
        "warnings"
      ],
      "functions": [
        {
          "name": "cli",
          "file_path": "src/mcp/client/__main__.py",
          "line_start": 70,
          "line_end": 85,
          "docstring": null,
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 90,
      "complexity_score": 1.0
    },
    {
      "name": "win32",
      "path": "src/mcp/client/stdio/win32.py",
      "docstring": "Windows-specific functionality for stdio client operations.",
      "imports": [
        "shutil",
        "subprocess",
        "sys",
        "pathlib.Path",
        "typing.TextIO",
        "anyio",
        "anyio.abc.Process"
      ],
      "functions": [
        {
          "name": "get_windows_executable_command",
          "file_path": "src/mcp/client/stdio/win32.py",
          "line_start": 15,
          "line_end": 44,
          "docstring": "Get the correct executable command normalized for Windows.\n\nOn Windows, commands might exist with specific extensions (.exe, .cmd, etc.)\nthat need to be located for proper execution.\n\nArgs:\n    command: Base command (e.g., 'uvx', 'npx')\n\nReturns:\n    str: Windows-appropriate command path",
          "parameters": [
            "command"
          ],
          "return_type": "str",
          "complexity": 5,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 110,
      "complexity_score": 5.0
    },
    {
      "name": "__init__",
      "path": "src/mcp/client/stdio/__init__.py",
      "docstring": null,
      "imports": [
        "os",
        "sys",
        "contextlib.asynccontextmanager",
        "pathlib.Path",
        "typing.Literal",
        "typing.TextIO",
        "anyio",
        "anyio.lowlevel",
        "anyio.streams.memory.MemoryObjectReceiveStream",
        "anyio.streams.memory.MemoryObjectSendStream",
        "anyio.streams.text.TextReceiveStream",
        "pydantic.BaseModel",
        "pydantic.Field",
        "mcp.types",
        "mcp.shared.message.SessionMessage",
        "win32.create_windows_process",
        "win32.get_windows_executable_command",
        "win32.terminate_windows_process"
      ],
      "functions": [
        {
          "name": "get_default_environment",
          "file_path": "src/mcp/client/stdio/__init__.py",
          "line_start": 42,
          "line_end": 60,
          "docstring": "Returns a default environment object including only environment variables deemed\nsafe to inherit.",
          "parameters": [],
          "return_type": "dict[str, str]",
          "complexity": 4,
          "is_async": false
        },
        {
          "name": "_get_executable_command",
          "file_path": "src/mcp/client/stdio/__init__.py",
          "line_start": 202,
          "line_end": 215,
          "docstring": "Get the correct executable command normalized for the current platform.\n\nArgs:\n    command: Base command (e.g., 'uvx', 'npx')\n\nReturns:\n    str: Platform-appropriate command",
          "parameters": [
            "command"
          ],
          "return_type": "str",
          "complexity": 2,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "StdioServerParameters",
          "file_path": "src/mcp/client/stdio/__init__.py",
          "line_start": 63,
          "line_end": 93,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        }
      ],
      "constants": [
        "DEFAULT_INHERITED_ENV_VARS"
      ],
      "language": "python",
      "lines_of_code": 237,
      "complexity_score": 3.0
    },
    {
      "name": "models",
      "path": "src/mcp/server/models.py",
      "docstring": "This module provides simpler types to use with the server for managing prompts\nand tools.",
      "imports": [
        "pydantic.BaseModel",
        "mcp.types.ServerCapabilities"
      ],
      "functions": [],
      "classes": [
        {
          "name": "InitializationOptions",
          "file_path": "src/mcp/server/models.py",
          "line_start": 13,
          "line_end": 17,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 18,
      "complexity_score": 0.0
    },
    {
      "name": "session",
      "path": "src/mcp/server/session.py",
      "docstring": "ServerSession Module\n\nThis module provides the ServerSession class, which manages communication between the\nserver and client in the MCP (Model Context Protocol) framework. It is most commonly\nused in MCP servers to interact with the client.\n\nCommon usage pattern:\n```\n    server = Server(name)\n\n    @server.call_tool()\n    async def handle_tool_call(ctx: RequestContext, arguments: dict[str, Any]) -> Any:\n        # Check client capabilities before proceeding\n        if ctx.session.check_client_capability(\n            types.ClientCapabilities(experimental={\"advanced_tools\": dict()})\n        ):\n            # Perform advanced tool operations\n            result = await perform_advanced_tool_operation(arguments)\n        else:\n            # Fall back to basic tool operations\n            result = await perform_basic_tool_operation(arguments)\n\n        return result\n\n    @server.list_prompts()\n    async def handle_list_prompts(ctx: RequestContext) -> list[types.Prompt]:\n        # Access session for any necessary checks or operations\n        if ctx.session.client_params:\n            # Customize prompts based on client initialization parameters\n            return generate_custom_prompts(ctx.session.client_params)\n        else:\n            return default_prompts\n```\n\nThe ServerSession class is typically used internally by the Server class and should not\nbe instantiated directly by users of the MCP framework.",
      "imports": [
        "enum.Enum",
        "typing.Any",
        "typing.TypeVar",
        "anyio",
        "anyio.lowlevel",
        "anyio.streams.memory.MemoryObjectReceiveStream",
        "anyio.streams.memory.MemoryObjectSendStream",
        "pydantic.AnyUrl",
        "mcp.types",
        "mcp.server.models.InitializationOptions",
        "mcp.shared.message.ServerMessageMetadata",
        "mcp.shared.message.SessionMessage",
        "mcp.shared.session.BaseSession",
        "mcp.shared.session.RequestResponder",
        "mcp.shared.version.SUPPORTED_PROTOCOL_VERSIONS"
      ],
      "functions": [
        {
          "name": "__init__",
          "file_path": "src/mcp/server/session.py",
          "line_start": 85,
          "line_end": 107,
          "docstring": null,
          "parameters": [
            "self",
            "read_stream",
            "write_stream",
            "init_options",
            "stateless"
          ],
          "return_type": "None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "client_params",
          "file_path": "src/mcp/server/session.py",
          "line_start": 110,
          "line_end": 111,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": "types.InitializeRequestParams | None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "check_client_capability",
          "file_path": "src/mcp/server/session.py",
          "line_start": 113,
          "line_end": 143,
          "docstring": "Check if the client supports a specific capability.",
          "parameters": [
            "self",
            "capability"
          ],
          "return_type": "bool",
          "complexity": 13,
          "is_async": false
        },
        {
          "name": "incoming_messages",
          "file_path": "src/mcp/server/session.py",
          "line_start": 342,
          "line_end": 345,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": "MemoryObjectReceiveStream[ServerRequestResponder]",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "InitializationState",
          "file_path": "src/mcp/server/session.py",
          "line_start": 58,
          "line_end": 61,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Enum"
          ]
        },
        {
          "name": "ServerSession",
          "file_path": "src/mcp/server/session.py",
          "line_start": 73,
          "line_end": 345,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/server/session.py",
              "line_start": 85,
              "line_end": 107,
              "docstring": null,
              "parameters": [
                "self",
                "read_stream",
                "write_stream",
                "init_options",
                "stateless"
              ],
              "return_type": "None",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "client_params",
              "file_path": "src/mcp/server/session.py",
              "line_start": 110,
              "line_end": 111,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": "types.InitializeRequestParams | None",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "check_client_capability",
              "file_path": "src/mcp/server/session.py",
              "line_start": 113,
              "line_end": 143,
              "docstring": "Check if the client supports a specific capability.",
              "parameters": [
                "self",
                "capability"
              ],
              "return_type": "bool",
              "complexity": 13,
              "is_async": false
            },
            {
              "name": "incoming_messages",
              "file_path": "src/mcp/server/session.py",
              "line_start": 342,
              "line_end": 345,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": "MemoryObjectReceiveStream[ServerRequestResponder]",
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "_initialization_state",
            "_init_options"
          ],
          "inheritance": [
            "BaseSession[types.ServerRequest, types.ServerNotification, types.ServerResult, types.ClientRequest, types.ClientNotification]"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 346,
      "complexity_score": 4.0
    },
    {
      "name": "sse",
      "path": "src/mcp/server/sse.py",
      "docstring": "SSE Server Transport Module\n\nThis module implements a Server-Sent Events (SSE) transport layer for MCP servers.\n\nExample usage:\n```\n    # Create an SSE transport at an endpoint\n    sse = SseServerTransport(\"/messages/\")\n\n    # Create Starlette routes for SSE and message handling\n    routes = [\n        Route(\"/sse\", endpoint=handle_sse, methods=[\"GET\"]),\n        Mount(\"/messages/\", app=sse.handle_post_message),\n    ]\n\n    # Define handler functions\n    async def handle_sse(request):\n        async with sse.connect_sse(\n            request.scope, request.receive, request._send\n        ) as streams:\n            await app.run(\n                streams[0], streams[1], app.create_initialization_options()\n            )\n        # Return empty response to avoid NoneType error\n        return Response()\n\n    # Create and run Starlette app\n    starlette_app = Starlette(routes=routes)\n    uvicorn.run(starlette_app, host=\"127.0.0.1\", port=port)\n```\n\nNote: The handle_sse function must return a Response to avoid a \"TypeError: 'NoneType'\nobject is not callable\" error when client disconnects. The example above returns\nan empty Response() after the SSE connection ends to fix this.\n\nSee SseServerTransport class documentation for more details.",
      "imports": [
        "logging",
        "contextlib.asynccontextmanager",
        "typing.Any",
        "urllib.parse.quote",
        "uuid.UUID",
        "uuid.uuid4",
        "anyio",
        "anyio.streams.memory.MemoryObjectReceiveStream",
        "anyio.streams.memory.MemoryObjectSendStream",
        "pydantic.ValidationError",
        "sse_starlette.EventSourceResponse",
        "starlette.requests.Request",
        "starlette.responses.Response",
        "starlette.types.Receive",
        "starlette.types.Scope",
        "starlette.types.Send",
        "mcp.types",
        "mcp.shared.message.ServerMessageMetadata",
        "mcp.shared.message.SessionMessage"
      ],
      "functions": [
        {
          "name": "__init__",
          "file_path": "src/mcp/server/sse.py",
          "line_start": 75,
          "line_end": 84,
          "docstring": "Creates a new SSE server transport, which will direct the client to POST\nmessages to the relative or absolute URL given.",
          "parameters": [
            "self",
            "endpoint"
          ],
          "return_type": "None",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "SseServerTransport",
          "file_path": "src/mcp/server/sse.py",
          "line_start": 60,
          "line_end": 212,
          "docstring": "SSE server transport for MCP. This class provides _two_ ASGI applications,\nsuitable to be used with a framework like Starlette and a server like Hypercorn:\n\n    1. connect_sse() is an ASGI application which receives incoming GET requests,\n       and sets up a new SSE stream to send server messages to the client.\n    2. handle_post_message() is an ASGI application which receives incoming POST\n       requests, which should contain client messages that link to a\n       previously-established SSE session.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/server/sse.py",
              "line_start": 75,
              "line_end": 84,
              "docstring": "Creates a new SSE server transport, which will direct the client to POST\nmessages to the relative or absolute URL given.",
              "parameters": [
                "self",
                "endpoint"
              ],
              "return_type": "None",
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "_endpoint",
            "_read_stream_writers"
          ],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 213,
      "complexity_score": 1.0
    },
    {
      "name": "stdio",
      "path": "src/mcp/server/stdio.py",
      "docstring": "Stdio Server Transport Module\n\nThis module provides functionality for creating an stdio-based transport layer\nthat can be used to communicate with an MCP client through standard input/output\nstreams.\n\nExample usage:\n```\n    async def run_server():\n        async with stdio_server() as (read_stream, write_stream):\n            # read_stream contains incoming JSONRPCMessages from stdin\n            # write_stream allows sending JSONRPCMessages to stdout\n            server = await create_my_server()\n            await server.run(read_stream, write_stream, init_options)\n\n    anyio.run(run_server)\n```",
      "imports": [
        "sys",
        "contextlib.asynccontextmanager",
        "io.TextIOWrapper",
        "anyio",
        "anyio.lowlevel",
        "anyio.streams.memory.MemoryObjectReceiveStream",
        "anyio.streams.memory.MemoryObjectSendStream",
        "mcp.types",
        "mcp.shared.message.SessionMessage"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 91,
      "complexity_score": 0.0
    },
    {
      "name": "streamable_http",
      "path": "src/mcp/server/streamable_http.py",
      "docstring": "StreamableHTTP Server Transport Module\n\nThis module implements an HTTP transport layer with Streamable HTTP.\n\nThe transport handles bidirectional communication using HTTP requests and\nresponses, with streaming support for long-running operations.",
      "imports": [
        "json",
        "logging",
        "re",
        "abc.ABC",
        "abc.abstractmethod",
        "collections.abc.AsyncGenerator",
        "collections.abc.Awaitable",
        "collections.abc.Callable",
        "contextlib.asynccontextmanager",
        "dataclasses.dataclass",
        "http.HTTPStatus",
        "anyio",
        "anyio.streams.memory.MemoryObjectReceiveStream",
        "anyio.streams.memory.MemoryObjectSendStream",
        "pydantic.ValidationError",
        "sse_starlette.EventSourceResponse",
        "starlette.requests.Request",
        "starlette.responses.Response",
        "starlette.types.Receive",
        "starlette.types.Scope",
        "starlette.types.Send",
        "mcp.shared.message.ServerMessageMetadata",
        "mcp.shared.message.SessionMessage",
        "mcp.types.INTERNAL_ERROR",
        "mcp.types.INVALID_PARAMS",
        "mcp.types.INVALID_REQUEST",
        "mcp.types.PARSE_ERROR",
        "mcp.types.ErrorData",
        "mcp.types.JSONRPCError",
        "mcp.types.JSONRPCMessage",
        "mcp.types.JSONRPCRequest",
        "mcp.types.JSONRPCResponse",
        "mcp.types.RequestId"
      ],
      "functions": [
        {
          "name": "__init__",
          "file_path": "src/mcp/server/streamable_http.py",
          "line_start": 135,
          "line_end": 173,
          "docstring": "Initialize a new StreamableHTTP server transport.\n\nArgs:\n    mcp_session_id: Optional session identifier for this connection.\n                    Must contain only visible ASCII characters (0x21-0x7E).\n    is_json_response_enabled: If True, return JSON responses for requests\n                            instead of SSE streams. Default is False.\n    event_store: Event store for resumability support. If provided,\n                resumability will be enabled, allowing clients to\n                reconnect and resume messages.\n\nRaises:\n    ValueError: If the session ID contains invalid characters.",
          "parameters": [
            "self",
            "mcp_session_id",
            "is_json_response_enabled",
            "event_store"
          ],
          "return_type": "None",
          "complexity": 3,
          "is_async": false
        },
        {
          "name": "_create_error_response",
          "file_path": "src/mcp/server/streamable_http.py",
          "line_start": 175,
          "line_end": 204,
          "docstring": "Create an error response with a simple string message.",
          "parameters": [
            "self",
            "error_message",
            "status_code",
            "error_code",
            "headers"
          ],
          "return_type": "Response",
          "complexity": 3,
          "is_async": false
        },
        {
          "name": "_create_json_response",
          "file_path": "src/mcp/server/streamable_http.py",
          "line_start": 206,
          "line_end": 226,
          "docstring": "Create a JSON response from a JSONRPCMessage",
          "parameters": [
            "self",
            "response_message",
            "status_code",
            "headers"
          ],
          "return_type": "Response",
          "complexity": 3,
          "is_async": false
        },
        {
          "name": "_get_session_id",
          "file_path": "src/mcp/server/streamable_http.py",
          "line_start": 228,
          "line_end": 230,
          "docstring": "Extract the session ID from request headers.",
          "parameters": [
            "self",
            "request"
          ],
          "return_type": "str | None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "_create_event_data",
          "file_path": "src/mcp/server/streamable_http.py",
          "line_start": 232,
          "line_end": 245,
          "docstring": "Create event data dictionary from an EventMessage.",
          "parameters": [
            "self",
            "event_message"
          ],
          "return_type": "dict[str, str]",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "_check_accept_headers",
          "file_path": "src/mcp/server/streamable_http.py",
          "line_start": 281,
          "line_end": 293,
          "docstring": "Check if the request accepts the required media types.",
          "parameters": [
            "self",
            "request"
          ],
          "return_type": "tuple[bool, bool]",
          "complexity": 4,
          "is_async": false
        },
        {
          "name": "_check_content_type",
          "file_path": "src/mcp/server/streamable_http.py",
          "line_start": 295,
          "line_end": 302,
          "docstring": "Check if the request has the correct Content-Type.",
          "parameters": [
            "self",
            "request"
          ],
          "return_type": "bool",
          "complexity": 3,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "EventMessage",
          "file_path": "src/mcp/server/streamable_http.py",
          "line_start": 67,
          "line_end": 73,
          "docstring": "A JSONRPCMessage with an optional event ID for stream resumability.",
          "methods": [],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "EventStore",
          "file_path": "src/mcp/server/streamable_http.py",
          "line_start": 79,
          "line_end": 116,
          "docstring": "Interface for resumability support via event storage.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "ABC"
          ]
        },
        {
          "name": "StreamableHTTPServerTransport",
          "file_path": "src/mcp/server/streamable_http.py",
          "line_start": 119,
          "line_end": 936,
          "docstring": "HTTP server transport with event streaming support for MCP.\n\nHandles JSON-RPC messages in HTTP POST requests with SSE streaming.\nSupports optional JSON responses and session management.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/server/streamable_http.py",
              "line_start": 135,
              "line_end": 173,
              "docstring": "Initialize a new StreamableHTTP server transport.\n\nArgs:\n    mcp_session_id: Optional session identifier for this connection.\n                    Must contain only visible ASCII characters (0x21-0x7E).\n    is_json_response_enabled: If True, return JSON responses for requests\n                            instead of SSE streams. Default is False.\n    event_store: Event store for resumability support. If provided,\n                resumability will be enabled, allowing clients to\n                reconnect and resume messages.\n\nRaises:\n    ValueError: If the session ID contains invalid characters.",
              "parameters": [
                "self",
                "mcp_session_id",
                "is_json_response_enabled",
                "event_store"
              ],
              "return_type": "None",
              "complexity": 3,
              "is_async": false
            },
            {
              "name": "_create_error_response",
              "file_path": "src/mcp/server/streamable_http.py",
              "line_start": 175,
              "line_end": 204,
              "docstring": "Create an error response with a simple string message.",
              "parameters": [
                "self",
                "error_message",
                "status_code",
                "error_code",
                "headers"
              ],
              "return_type": "Response",
              "complexity": 3,
              "is_async": false
            },
            {
              "name": "_create_json_response",
              "file_path": "src/mcp/server/streamable_http.py",
              "line_start": 206,
              "line_end": 226,
              "docstring": "Create a JSON response from a JSONRPCMessage",
              "parameters": [
                "self",
                "response_message",
                "status_code",
                "headers"
              ],
              "return_type": "Response",
              "complexity": 3,
              "is_async": false
            },
            {
              "name": "_get_session_id",
              "file_path": "src/mcp/server/streamable_http.py",
              "line_start": 228,
              "line_end": 230,
              "docstring": "Extract the session ID from request headers.",
              "parameters": [
                "self",
                "request"
              ],
              "return_type": "str | None",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "_create_event_data",
              "file_path": "src/mcp/server/streamable_http.py",
              "line_start": 232,
              "line_end": 245,
              "docstring": "Create event data dictionary from an EventMessage.",
              "parameters": [
                "self",
                "event_message"
              ],
              "return_type": "dict[str, str]",
              "complexity": 2,
              "is_async": false
            },
            {
              "name": "_check_accept_headers",
              "file_path": "src/mcp/server/streamable_http.py",
              "line_start": 281,
              "line_end": 293,
              "docstring": "Check if the request accepts the required media types.",
              "parameters": [
                "self",
                "request"
              ],
              "return_type": "tuple[bool, bool]",
              "complexity": 4,
              "is_async": false
            },
            {
              "name": "_check_content_type",
              "file_path": "src/mcp/server/streamable_http.py",
              "line_start": 295,
              "line_end": 302,
              "docstring": "Check if the request has the correct Content-Type.",
              "parameters": [
                "self",
                "request"
              ],
              "return_type": "bool",
              "complexity": 3,
              "is_async": false
            }
          ],
          "attributes": [
            "mcp_session_id",
            "is_json_response_enabled",
            "_event_store",
            "_terminated"
          ],
          "inheritance": []
        }
      ],
      "constants": [
        "MAXIMUM_MESSAGE_SIZE",
        "MCP_SESSION_ID_HEADER",
        "LAST_EVENT_ID_HEADER",
        "CONTENT_TYPE_JSON",
        "CONTENT_TYPE_SSE",
        "GET_STREAM_KEY",
        "SESSION_ID_PATTERN"
      ],
      "language": "python",
      "lines_of_code": 937,
      "complexity_score": 2.7142857142857144
    },
    {
      "name": "streamable_http_manager",
      "path": "src/mcp/server/streamable_http_manager.py",
      "docstring": "StreamableHTTP Session Manager for MCP servers.",
      "imports": [
        "__future__.annotations",
        "contextlib",
        "logging",
        "threading",
        "collections.abc.AsyncIterator",
        "http.HTTPStatus",
        "typing.Any",
        "uuid.uuid4",
        "anyio",
        "anyio.abc.TaskStatus",
        "starlette.requests.Request",
        "starlette.responses.Response",
        "starlette.types.Receive",
        "starlette.types.Scope",
        "starlette.types.Send",
        "mcp.server.lowlevel.server.Server",
        "mcp.server.streamable_http.MCP_SESSION_ID_HEADER",
        "mcp.server.streamable_http.EventStore",
        "mcp.server.streamable_http.StreamableHTTPServerTransport"
      ],
      "functions": [
        {
          "name": "__init__",
          "file_path": "src/mcp/server/streamable_http_manager.py",
          "line_start": 57,
          "line_end": 77,
          "docstring": null,
          "parameters": [
            "self",
            "app",
            "event_store",
            "json_response",
            "stateless"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "StreamableHTTPSessionManager",
          "file_path": "src/mcp/server/streamable_http_manager.py",
          "line_start": 29,
          "line_end": 258,
          "docstring": "Manages StreamableHTTP sessions with optional resumability via event store.\n\nThis class abstracts away the complexity of session management, event storage,\nand request handling for StreamableHTTP transports. It handles:\n\n1. Session tracking for clients\n2. Resumability via an optional event store\n3. Connection management and lifecycle\n4. Request handling and transport setup\n\nImportant: Only one StreamableHTTPSessionManager instance should be created\nper application. The instance cannot be reused after its run() context has\ncompleted. If you need to restart the manager, create a new instance.\n\nArgs:\n    app: The MCP server instance\n    event_store: Optional event store for resumability support.\n                 If provided, enables resumable connections where clients\n                 can reconnect and receive missed events.\n                 If None, sessions are still tracked but not resumable.\n    json_response: Whether to use JSON responses instead of SSE streams\n    stateless: If True, creates a completely fresh transport for each request\n               with no session tracking or state persistence between requests.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/server/streamable_http_manager.py",
              "line_start": 57,
              "line_end": 77,
              "docstring": null,
              "parameters": [
                "self",
                "app",
                "event_store",
                "json_response",
                "stateless"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "app",
            "event_store",
            "json_response",
            "stateless",
            "_session_creation_lock",
            "_task_group",
            "_run_lock",
            "_has_started"
          ],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 259,
      "complexity_score": 1.0
    },
    {
      "name": "streaming_asgi_transport",
      "path": "src/mcp/server/streaming_asgi_transport.py",
      "docstring": "A modified version of httpx.ASGITransport that supports streaming responses.\n\nThis transport runs the ASGI app as a separate anyio task, allowing it to\nhandle streaming responses like SSE where the app doesn't terminate until\nthe connection is closed.\n\nThis is only intended for writing tests for the SSE transport.",
      "imports": [
        "typing",
        "typing.Any",
        "typing.cast",
        "anyio",
        "anyio.abc",
        "anyio.streams.memory",
        "httpx._models.Request",
        "httpx._models.Response",
        "httpx._transports.base.AsyncBaseTransport",
        "httpx._types.AsyncByteStream",
        "starlette.types.ASGIApp",
        "starlette.types.Receive",
        "starlette.types.Scope",
        "starlette.types.Send"
      ],
      "functions": [
        {
          "name": "__init__",
          "file_path": "src/mcp/server/streaming_asgi_transport.py",
          "line_start": 48,
          "line_end": 60,
          "docstring": null,
          "parameters": [
            "self",
            "app",
            "task_group",
            "raise_app_exceptions",
            "root_path",
            "client"
          ],
          "return_type": "None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "src/mcp/server/streaming_asgi_transport.py",
          "line_start": 202,
          "line_end": 206,
          "docstring": null,
          "parameters": [
            "self",
            "receive_channel"
          ],
          "return_type": "None",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "StreamingASGITransport",
          "file_path": "src/mcp/server/streaming_asgi_transport.py",
          "line_start": 23,
          "line_end": 190,
          "docstring": "A custom AsyncTransport that handles sending requests directly to an ASGI app\nand supports streaming responses like SSE.\n\nUnlike the standard ASGITransport, this transport runs the ASGI app in a\nseparate anyio task, allowing it to handle responses from apps that don't\nterminate immediately (like SSE endpoints).\n\nArguments:\n\n* `app` - The ASGI application.\n* `raise_app_exceptions` - Boolean indicating if exceptions in the application\n   should be raised. Default to `True`. Can be set to `False` for use cases\n   such as testing the content of a client 500 response.\n* `root_path` - The root path on which the ASGI application should be mounted.\n* `client` - A two-tuple indicating the client IP and port of incoming requests.\n* `response_timeout` - Timeout in seconds to wait for the initial response.\n   Default is 10 seconds.\n\nTODO: https://github.com/encode/httpx/pull/3059 is adding something similar to\nupstream httpx. When that merges, we should delete this & switch back to the\nupstream implementation.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/server/streaming_asgi_transport.py",
              "line_start": 48,
              "line_end": 60,
              "docstring": null,
              "parameters": [
                "self",
                "app",
                "task_group",
                "raise_app_exceptions",
                "root_path",
                "client"
              ],
              "return_type": "None",
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "app",
            "raise_app_exceptions",
            "root_path",
            "client",
            "task_group"
          ],
          "inheritance": [
            "AsyncBaseTransport"
          ]
        },
        {
          "name": "StreamingASGIResponseStream",
          "file_path": "src/mcp/server/streaming_asgi_transport.py",
          "line_start": 193,
          "line_end": 213,
          "docstring": "A modified ASGIResponseStream that supports streaming responses.\n\nThis class extends the standard ASGIResponseStream to handle cases where\nthe response body continues to be generated after the initial response\nis returned.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/server/streaming_asgi_transport.py",
              "line_start": 202,
              "line_end": 206,
              "docstring": null,
              "parameters": [
                "self",
                "receive_channel"
              ],
              "return_type": "None",
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "receive_channel"
          ],
          "inheritance": [
            "AsyncByteStream"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 214,
      "complexity_score": 1.0
    },
    {
      "name": "websocket",
      "path": "src/mcp/server/websocket.py",
      "docstring": null,
      "imports": [
        "logging",
        "contextlib.asynccontextmanager",
        "anyio",
        "anyio.streams.memory.MemoryObjectReceiveStream",
        "anyio.streams.memory.MemoryObjectSendStream",
        "pydantic_core.ValidationError",
        "starlette.types.Receive",
        "starlette.types.Scope",
        "starlette.types.Send",
        "starlette.websockets.WebSocket",
        "mcp.types",
        "mcp.shared.message.SessionMessage"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 65,
      "complexity_score": 0.0
    },
    {
      "name": "__init__",
      "path": "src/mcp/server/__init__.py",
      "docstring": null,
      "imports": [
        "fastmcp.FastMCP",
        "lowlevel.NotificationOptions",
        "lowlevel.Server",
        "models.InitializationOptions"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 6,
      "complexity_score": 0.0
    },
    {
      "name": "__main__",
      "path": "src/mcp/server/__main__.py",
      "docstring": null,
      "imports": [
        "importlib.metadata",
        "logging",
        "sys",
        "anyio",
        "mcp.server.models.InitializationOptions",
        "mcp.server.session.ServerSession",
        "mcp.server.stdio.stdio_server",
        "mcp.types.ServerCapabilities",
        "warnings"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 51,
      "complexity_score": 0.0
    },
    {
      "name": "errors",
      "path": "src/mcp/server/auth/errors.py",
      "docstring": null,
      "imports": [
        "pydantic.ValidationError"
      ],
      "functions": [
        {
          "name": "stringify_pydantic_error",
          "file_path": "src/mcp/server/auth/errors.py",
          "line_start": 4,
          "line_end": 8,
          "docstring": null,
          "parameters": [
            "validation_error"
          ],
          "return_type": "str",
          "complexity": 3,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 9,
      "complexity_score": 3.0
    },
    {
      "name": "json_response",
      "path": "src/mcp/server/auth/json_response.py",
      "docstring": null,
      "imports": [
        "typing.Any",
        "starlette.responses.JSONResponse"
      ],
      "functions": [
        {
          "name": "render",
          "file_path": "src/mcp/server/auth/json_response.py",
          "line_start": 9,
          "line_end": 10,
          "docstring": null,
          "parameters": [
            "self",
            "content"
          ],
          "return_type": "bytes",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "PydanticJSONResponse",
          "file_path": "src/mcp/server/auth/json_response.py",
          "line_start": 6,
          "line_end": 10,
          "docstring": null,
          "methods": [
            {
              "name": "render",
              "file_path": "src/mcp/server/auth/json_response.py",
              "line_start": 9,
              "line_end": 10,
              "docstring": null,
              "parameters": [
                "self",
                "content"
              ],
              "return_type": "bytes",
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": [
            "JSONResponse"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 11,
      "complexity_score": 1.0
    },
    {
      "name": "provider",
      "path": "src/mcp/server/auth/provider.py",
      "docstring": null,
      "imports": [
        "dataclasses.dataclass",
        "typing.Generic",
        "typing.Literal",
        "typing.Protocol",
        "typing.TypeVar",
        "urllib.parse.parse_qs",
        "urllib.parse.urlencode",
        "urllib.parse.urlparse",
        "urllib.parse.urlunparse",
        "pydantic.AnyUrl",
        "pydantic.BaseModel",
        "mcp.shared.auth.OAuthClientInformationFull",
        "mcp.shared.auth.OAuthToken"
      ],
      "functions": [
        {
          "name": "construct_redirect_uri",
          "file_path": "src/mcp/server/auth/provider.py",
          "line_start": 281,
          "line_end": 289,
          "docstring": null,
          "parameters": [
            "redirect_uri_base"
          ],
          "return_type": "str",
          "complexity": 4,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "AuthorizationParams",
          "file_path": "src/mcp/server/auth/provider.py",
          "line_start": 13,
          "line_end": 18,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "AuthorizationCode",
          "file_path": "src/mcp/server/auth/provider.py",
          "line_start": 21,
          "line_end": 28,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "RefreshToken",
          "file_path": "src/mcp/server/auth/provider.py",
          "line_start": 31,
          "line_end": 35,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "AccessToken",
          "file_path": "src/mcp/server/auth/provider.py",
          "line_start": 38,
          "line_end": 42,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "RegistrationError",
          "file_path": "src/mcp/server/auth/provider.py",
          "line_start": 54,
          "line_end": 56,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Exception"
          ]
        },
        {
          "name": "AuthorizeError",
          "file_path": "src/mcp/server/auth/provider.py",
          "line_start": 71,
          "line_end": 73,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Exception"
          ]
        },
        {
          "name": "TokenError",
          "file_path": "src/mcp/server/auth/provider.py",
          "line_start": 87,
          "line_end": 89,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Exception"
          ]
        },
        {
          "name": "OAuthAuthorizationServerProvider",
          "file_path": "src/mcp/server/auth/provider.py",
          "line_start": 99,
          "line_end": 278,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Protocol",
            "Generic[AuthorizationCodeT, RefreshTokenT, AccessTokenT]"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 290,
      "complexity_score": 4.0
    },
    {
      "name": "routes",
      "path": "src/mcp/server/auth/routes.py",
      "docstring": null,
      "imports": [
        "collections.abc.Awaitable",
        "collections.abc.Callable",
        "typing.Any",
        "pydantic.AnyHttpUrl",
        "starlette.middleware.cors.CORSMiddleware",
        "starlette.requests.Request",
        "starlette.responses.Response",
        "starlette.routing.Route",
        "starlette.routing.request_response",
        "starlette.types.ASGIApp",
        "mcp.server.auth.handlers.authorize.AuthorizationHandler",
        "mcp.server.auth.handlers.metadata.MetadataHandler",
        "mcp.server.auth.handlers.register.RegistrationHandler",
        "mcp.server.auth.handlers.revoke.RevocationHandler",
        "mcp.server.auth.handlers.token.TokenHandler",
        "mcp.server.auth.middleware.client_auth.ClientAuthenticator",
        "mcp.server.auth.provider.OAuthAuthorizationServerProvider",
        "mcp.server.auth.settings.ClientRegistrationOptions",
        "mcp.server.auth.settings.RevocationOptions",
        "mcp.shared.auth.OAuthMetadata"
      ],
      "functions": [
        {
          "name": "validate_issuer_url",
          "file_path": "src/mcp/server/auth/routes.py",
          "line_start": 22,
          "line_end": 45,
          "docstring": "Validate that the issuer URL meets OAuth 2.0 requirements.\n\nArgs:\n    url: The issuer URL to validate\n\nRaises:\n    ValueError: If the issuer URL is invalid",
          "parameters": [
            "url"
          ],
          "return_type": null,
          "complexity": 6,
          "is_async": false
        },
        {
          "name": "cors_middleware",
          "file_path": "src/mcp/server/auth/routes.py",
          "line_start": 54,
          "line_end": 64,
          "docstring": null,
          "parameters": [
            "handler",
            "allow_methods"
          ],
          "return_type": "ASGIApp",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "create_auth_routes",
          "file_path": "src/mcp/server/auth/routes.py",
          "line_start": 67,
          "line_end": 147,
          "docstring": null,
          "parameters": [
            "provider",
            "issuer_url",
            "service_documentation_url",
            "client_registration_options",
            "revocation_options"
          ],
          "return_type": "list[Route]",
          "complexity": 5,
          "is_async": false
        },
        {
          "name": "build_metadata",
          "file_path": "src/mcp/server/auth/routes.py",
          "line_start": 150,
          "line_end": 191,
          "docstring": null,
          "parameters": [
            "issuer_url",
            "service_documentation_url",
            "client_registration_options",
            "revocation_options"
          ],
          "return_type": "OAuthMetadata",
          "complexity": 3,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [
        "AUTHORIZATION_PATH",
        "TOKEN_PATH",
        "REGISTRATION_PATH",
        "REVOCATION_PATH"
      ],
      "language": "python",
      "lines_of_code": 192,
      "complexity_score": 3.75
    },
    {
      "name": "settings",
      "path": "src/mcp/server/auth/settings.py",
      "docstring": null,
      "imports": [
        "pydantic.AnyHttpUrl",
        "pydantic.BaseModel",
        "pydantic.Field"
      ],
      "functions": [],
      "classes": [
        {
          "name": "ClientRegistrationOptions",
          "file_path": "src/mcp/server/auth/settings.py",
          "line_start": 4,
          "line_end": 8,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "RevocationOptions",
          "file_path": "src/mcp/server/auth/settings.py",
          "line_start": 11,
          "line_end": 12,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "AuthSettings",
          "file_path": "src/mcp/server/auth/settings.py",
          "line_start": 15,
          "line_end": 24,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 25,
      "complexity_score": 0.0
    },
    {
      "name": "__init__",
      "path": "src/mcp/server/auth/__init__.py",
      "docstring": "MCP OAuth server authorization components.",
      "imports": [],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 4,
      "complexity_score": 0.0
    },
    {
      "name": "authorize",
      "path": "src/mcp/server/auth/handlers/authorize.py",
      "docstring": null,
      "imports": [
        "logging",
        "dataclasses.dataclass",
        "typing.Any",
        "typing.Literal",
        "pydantic.AnyUrl",
        "pydantic.BaseModel",
        "pydantic.Field",
        "pydantic.RootModel",
        "pydantic.ValidationError",
        "starlette.datastructures.FormData",
        "starlette.datastructures.QueryParams",
        "starlette.requests.Request",
        "starlette.responses.RedirectResponse",
        "starlette.responses.Response",
        "mcp.server.auth.errors.stringify_pydantic_error",
        "mcp.server.auth.json_response.PydanticJSONResponse",
        "mcp.server.auth.provider.AuthorizationErrorCode",
        "mcp.server.auth.provider.AuthorizationParams",
        "mcp.server.auth.provider.AuthorizeError",
        "mcp.server.auth.provider.OAuthAuthorizationServerProvider",
        "mcp.server.auth.provider.construct_redirect_uri",
        "mcp.shared.auth.InvalidRedirectUriError",
        "mcp.shared.auth.InvalidScopeError"
      ],
      "functions": [
        {
          "name": "best_effort_extract_string",
          "file_path": "src/mcp/server/auth/handlers/authorize.py",
          "line_start": 60,
          "line_end": 68,
          "docstring": null,
          "parameters": [
            "key",
            "params"
          ],
          "return_type": "str | None",
          "complexity": 3,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "AuthorizationRequest",
          "file_path": "src/mcp/server/auth/handlers/authorize.py",
          "line_start": 29,
          "line_end": 49,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "AuthorizationErrorResponse",
          "file_path": "src/mcp/server/auth/handlers/authorize.py",
          "line_start": 52,
          "line_end": 57,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "AnyUrlModel",
          "file_path": "src/mcp/server/auth/handlers/authorize.py",
          "line_start": 71,
          "line_end": 72,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "RootModel[AnyUrl]"
          ]
        },
        {
          "name": "AuthorizationHandler",
          "file_path": "src/mcp/server/auth/handlers/authorize.py",
          "line_start": 76,
          "line_end": 244,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 245,
      "complexity_score": 3.0
    },
    {
      "name": "metadata",
      "path": "src/mcp/server/auth/handlers/metadata.py",
      "docstring": null,
      "imports": [
        "dataclasses.dataclass",
        "starlette.requests.Request",
        "starlette.responses.Response",
        "mcp.server.auth.json_response.PydanticJSONResponse",
        "mcp.shared.auth.OAuthMetadata"
      ],
      "functions": [],
      "classes": [
        {
          "name": "MetadataHandler",
          "file_path": "src/mcp/server/auth/handlers/metadata.py",
          "line_start": 11,
          "line_end": 18,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 19,
      "complexity_score": 0.0
    },
    {
      "name": "register",
      "path": "src/mcp/server/auth/handlers/register.py",
      "docstring": null,
      "imports": [
        "secrets",
        "time",
        "dataclasses.dataclass",
        "typing.Any",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.RootModel",
        "pydantic.ValidationError",
        "starlette.requests.Request",
        "starlette.responses.Response",
        "mcp.server.auth.errors.stringify_pydantic_error",
        "mcp.server.auth.json_response.PydanticJSONResponse",
        "mcp.server.auth.provider.OAuthAuthorizationServerProvider",
        "mcp.server.auth.provider.RegistrationError",
        "mcp.server.auth.provider.RegistrationErrorCode",
        "mcp.server.auth.settings.ClientRegistrationOptions",
        "mcp.shared.auth.OAuthClientInformationFull",
        "mcp.shared.auth.OAuthClientMetadata"
      ],
      "functions": [],
      "classes": [
        {
          "name": "RegistrationRequest",
          "file_path": "src/mcp/server/auth/handlers/register.py",
          "line_start": 22,
          "line_end": 25,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "RootModel[OAuthClientMetadata]"
          ]
        },
        {
          "name": "RegistrationErrorResponse",
          "file_path": "src/mcp/server/auth/handlers/register.py",
          "line_start": 28,
          "line_end": 30,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "RegistrationHandler",
          "file_path": "src/mcp/server/auth/handlers/register.py",
          "line_start": 34,
          "line_end": 129,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 130,
      "complexity_score": 0.0
    },
    {
      "name": "revoke",
      "path": "src/mcp/server/auth/handlers/revoke.py",
      "docstring": null,
      "imports": [
        "dataclasses.dataclass",
        "functools.partial",
        "typing.Any",
        "typing.Literal",
        "pydantic.BaseModel",
        "pydantic.ValidationError",
        "starlette.requests.Request",
        "starlette.responses.Response",
        "mcp.server.auth.errors.stringify_pydantic_error",
        "mcp.server.auth.json_response.PydanticJSONResponse",
        "mcp.server.auth.middleware.client_auth.AuthenticationError",
        "mcp.server.auth.middleware.client_auth.ClientAuthenticator",
        "mcp.server.auth.provider.AccessToken",
        "mcp.server.auth.provider.OAuthAuthorizationServerProvider",
        "mcp.server.auth.provider.RefreshToken"
      ],
      "functions": [],
      "classes": [
        {
          "name": "RevocationRequest",
          "file_path": "src/mcp/server/auth/handlers/revoke.py",
          "line_start": 24,
          "line_end": 32,
          "docstring": "# See https://datatracker.ietf.org/doc/html/rfc7009#section-2.1",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "RevocationErrorResponse",
          "file_path": "src/mcp/server/auth/handlers/revoke.py",
          "line_start": 35,
          "line_end": 37,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "RevocationHandler",
          "file_path": "src/mcp/server/auth/handlers/revoke.py",
          "line_start": 41,
          "line_end": 101,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 102,
      "complexity_score": 0.0
    },
    {
      "name": "token",
      "path": "src/mcp/server/auth/handlers/token.py",
      "docstring": null,
      "imports": [
        "base64",
        "hashlib",
        "time",
        "dataclasses.dataclass",
        "typing.Annotated",
        "typing.Any",
        "typing.Literal",
        "pydantic.AnyHttpUrl",
        "pydantic.AnyUrl",
        "pydantic.BaseModel",
        "pydantic.Field",
        "pydantic.RootModel",
        "pydantic.ValidationError",
        "starlette.requests.Request",
        "mcp.server.auth.errors.stringify_pydantic_error",
        "mcp.server.auth.json_response.PydanticJSONResponse",
        "mcp.server.auth.middleware.client_auth.AuthenticationError",
        "mcp.server.auth.middleware.client_auth.ClientAuthenticator",
        "mcp.server.auth.provider.OAuthAuthorizationServerProvider",
        "mcp.server.auth.provider.TokenError",
        "mcp.server.auth.provider.TokenErrorCode",
        "mcp.shared.auth.OAuthToken"
      ],
      "functions": [
        {
          "name": "response",
          "file_path": "src/mcp/server/auth/handlers/token.py",
          "line_start": 86,
          "line_end": 98,
          "docstring": null,
          "parameters": [
            "self",
            "obj"
          ],
          "return_type": null,
          "complexity": 2,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "AuthorizationCodeRequest",
          "file_path": "src/mcp/server/auth/handlers/token.py",
          "line_start": 26,
          "line_end": 37,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "RefreshTokenRequest",
          "file_path": "src/mcp/server/auth/handlers/token.py",
          "line_start": 40,
          "line_end": 47,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "TokenRequest",
          "file_path": "src/mcp/server/auth/handlers/token.py",
          "line_start": 50,
          "line_end": 61,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "RootModel[Annotated[AuthorizationCodeRequest | RefreshTokenRequest, Field(discriminator='grant_type')]]"
          ]
        },
        {
          "name": "TokenErrorResponse",
          "file_path": "src/mcp/server/auth/handlers/token.py",
          "line_start": 64,
          "line_end": 71,
          "docstring": "See https://datatracker.ietf.org/doc/html/rfc6749#section-5.2",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "TokenSuccessResponse",
          "file_path": "src/mcp/server/auth/handlers/token.py",
          "line_start": 74,
          "line_end": 78,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "RootModel[OAuthToken]"
          ]
        },
        {
          "name": "TokenHandler",
          "file_path": "src/mcp/server/auth/handlers/token.py",
          "line_start": 82,
          "line_end": 264,
          "docstring": null,
          "methods": [
            {
              "name": "response",
              "file_path": "src/mcp/server/auth/handlers/token.py",
              "line_start": 86,
              "line_end": 98,
              "docstring": null,
              "parameters": [
                "self",
                "obj"
              ],
              "return_type": null,
              "complexity": 2,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 265,
      "complexity_score": 2.0
    },
    {
      "name": "__init__",
      "path": "src/mcp/server/auth/handlers/__init__.py",
      "docstring": "Request handlers for MCP authorization endpoints.",
      "imports": [],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 4,
      "complexity_score": 0.0
    },
    {
      "name": "auth_context",
      "path": "src/mcp/server/auth/middleware/auth_context.py",
      "docstring": null,
      "imports": [
        "contextvars",
        "starlette.types.ASGIApp",
        "starlette.types.Receive",
        "starlette.types.Scope",
        "starlette.types.Send",
        "mcp.server.auth.middleware.bearer_auth.AuthenticatedUser",
        "mcp.server.auth.provider.AccessToken"
      ],
      "functions": [
        {
          "name": "get_access_token",
          "file_path": "src/mcp/server/auth/middleware/auth_context.py",
          "line_start": 15,
          "line_end": 23,
          "docstring": "Get the access token from the current context.\n\nReturns:\n    The access token if an authenticated user is available, None otherwise.",
          "parameters": [],
          "return_type": "AccessToken | None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "src/mcp/server/auth/middleware/auth_context.py",
          "line_start": 36,
          "line_end": 37,
          "docstring": null,
          "parameters": [
            "self",
            "app"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "AuthContextMiddleware",
          "file_path": "src/mcp/server/auth/middleware/auth_context.py",
          "line_start": 26,
          "line_end": 50,
          "docstring": "Middleware that extracts the authenticated user from the request\nand sets it in a contextvar for easy access throughout the request lifecycle.\n\nThis middleware should be added after the AuthenticationMiddleware in the\nmiddleware stack to ensure that the user is properly authenticated before\nbeing stored in the context.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/server/auth/middleware/auth_context.py",
              "line_start": 36,
              "line_end": 37,
              "docstring": null,
              "parameters": [
                "self",
                "app"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "app"
          ],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 51,
      "complexity_score": 1.0
    },
    {
      "name": "bearer_auth",
      "path": "src/mcp/server/auth/middleware/bearer_auth.py",
      "docstring": null,
      "imports": [
        "time",
        "typing.Any",
        "starlette.authentication.AuthCredentials",
        "starlette.authentication.AuthenticationBackend",
        "starlette.authentication.SimpleUser",
        "starlette.exceptions.HTTPException",
        "starlette.requests.HTTPConnection",
        "starlette.types.Receive",
        "starlette.types.Scope",
        "starlette.types.Send",
        "mcp.server.auth.provider.AccessToken",
        "mcp.server.auth.provider.OAuthAuthorizationServerProvider"
      ],
      "functions": [
        {
          "name": "__init__",
          "file_path": "src/mcp/server/auth/middleware/bearer_auth.py",
          "line_start": 19,
          "line_end": 22,
          "docstring": null,
          "parameters": [
            "self",
            "auth_info"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "src/mcp/server/auth/middleware/bearer_auth.py",
          "line_start": 30,
          "line_end": 34,
          "docstring": null,
          "parameters": [
            "self",
            "provider"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "src/mcp/server/auth/middleware/bearer_auth.py",
          "line_start": 70,
          "line_end": 80,
          "docstring": "Initialize the middleware.\n\nArgs:\n    app: ASGI application\n    provider: Authentication provider to validate tokens\n    required_scopes: Optional list of scopes that the token must have",
          "parameters": [
            "self",
            "app",
            "required_scopes"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "AuthenticatedUser",
          "file_path": "src/mcp/server/auth/middleware/bearer_auth.py",
          "line_start": 16,
          "line_end": 22,
          "docstring": "User with authentication info.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/server/auth/middleware/bearer_auth.py",
              "line_start": 19,
              "line_end": 22,
              "docstring": null,
              "parameters": [
                "self",
                "auth_info"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "access_token",
            "scopes"
          ],
          "inheritance": [
            "SimpleUser"
          ]
        },
        {
          "name": "BearerAuthBackend",
          "file_path": "src/mcp/server/auth/middleware/bearer_auth.py",
          "line_start": 25,
          "line_end": 59,
          "docstring": "Authentication backend that validates Bearer tokens.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/server/auth/middleware/bearer_auth.py",
              "line_start": 30,
              "line_end": 34,
              "docstring": null,
              "parameters": [
                "self",
                "provider"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "provider"
          ],
          "inheritance": [
            "AuthenticationBackend"
          ]
        },
        {
          "name": "RequireAuthMiddleware",
          "file_path": "src/mcp/server/auth/middleware/bearer_auth.py",
          "line_start": 62,
          "line_end": 96,
          "docstring": "Middleware that requires a valid Bearer token in the Authorization header.\n\nThis will validate the token with the auth provider and store the resulting\nauth info in the request state.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/server/auth/middleware/bearer_auth.py",
              "line_start": 70,
              "line_end": 80,
              "docstring": "Initialize the middleware.\n\nArgs:\n    app: ASGI application\n    provider: Authentication provider to validate tokens\n    required_scopes: Optional list of scopes that the token must have",
              "parameters": [
                "self",
                "app",
                "required_scopes"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "app",
            "required_scopes"
          ],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 97,
      "complexity_score": 1.0
    },
    {
      "name": "client_auth",
      "path": "src/mcp/server/auth/middleware/client_auth.py",
      "docstring": null,
      "imports": [
        "time",
        "typing.Any",
        "mcp.server.auth.provider.OAuthAuthorizationServerProvider",
        "mcp.shared.auth.OAuthClientInformationFull"
      ],
      "functions": [
        {
          "name": "__init__",
          "file_path": "src/mcp/server/auth/middleware/client_auth.py",
          "line_start": 9,
          "line_end": 10,
          "docstring": null,
          "parameters": [
            "self",
            "message"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "src/mcp/server/auth/middleware/client_auth.py",
          "line_start": 24,
          "line_end": 31,
          "docstring": "Initialize the dependency.\n\nArgs:\n    provider: Provider to look up client information",
          "parameters": [
            "self",
            "provider"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "AuthenticationError",
          "file_path": "src/mcp/server/auth/middleware/client_auth.py",
          "line_start": 8,
          "line_end": 10,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/server/auth/middleware/client_auth.py",
              "line_start": 9,
              "line_end": 10,
              "docstring": null,
              "parameters": [
                "self",
                "message"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "message"
          ],
          "inheritance": [
            "Exception"
          ]
        },
        {
          "name": "ClientAuthenticator",
          "file_path": "src/mcp/server/auth/middleware/client_auth.py",
          "line_start": 13,
          "line_end": 56,
          "docstring": "ClientAuthenticator is a callable which validates requests from a client\napplication, used to verify /token calls.\nIf, during registration, the client requested to be issued a secret, the\nauthenticator asserts that /token calls must be authenticated with\nthat same token.\nNOTE: clients can opt for no authentication during registration, in which case this\nlogic is skipped.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/server/auth/middleware/client_auth.py",
              "line_start": 24,
              "line_end": 31,
              "docstring": "Initialize the dependency.\n\nArgs:\n    provider: Provider to look up client information",
              "parameters": [
                "self",
                "provider"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "provider"
          ],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 57,
      "complexity_score": 1.0
    },
    {
      "name": "__init__",
      "path": "src/mcp/server/auth/middleware/__init__.py",
      "docstring": "Middleware for MCP authorization.",
      "imports": [],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 4,
      "complexity_score": 0.0
    },
    {
      "name": "exceptions",
      "path": "src/mcp/server/fastmcp/exceptions.py",
      "docstring": "Custom exceptions for FastMCP.",
      "imports": [],
      "functions": [],
      "classes": [
        {
          "name": "FastMCPError",
          "file_path": "src/mcp/server/fastmcp/exceptions.py",
          "line_start": 4,
          "line_end": 5,
          "docstring": "Base error for FastMCP.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Exception"
          ]
        },
        {
          "name": "ValidationError",
          "file_path": "src/mcp/server/fastmcp/exceptions.py",
          "line_start": 8,
          "line_end": 9,
          "docstring": "Error in validating parameters or return values.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "FastMCPError"
          ]
        },
        {
          "name": "ResourceError",
          "file_path": "src/mcp/server/fastmcp/exceptions.py",
          "line_start": 12,
          "line_end": 13,
          "docstring": "Error in resource operations.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "FastMCPError"
          ]
        },
        {
          "name": "ToolError",
          "file_path": "src/mcp/server/fastmcp/exceptions.py",
          "line_start": 16,
          "line_end": 17,
          "docstring": "Error in tool operations.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "FastMCPError"
          ]
        },
        {
          "name": "InvalidSignature",
          "file_path": "src/mcp/server/fastmcp/exceptions.py",
          "line_start": 20,
          "line_end": 21,
          "docstring": "Invalid signature for use with FastMCP.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Exception"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 22,
      "complexity_score": 0.0
    },
    {
      "name": "server",
      "path": "src/mcp/server/fastmcp/server.py",
      "docstring": "FastMCP - A more ergonomic interface for MCP servers.",
      "imports": [
        "__future__.annotations",
        "inspect",
        "re",
        "collections.abc.AsyncIterator",
        "collections.abc.Awaitable",
        "collections.abc.Callable",
        "collections.abc.Iterable",
        "collections.abc.Sequence",
        "contextlib.AbstractAsyncContextManager",
        "contextlib.asynccontextmanager",
        "itertools.chain",
        "typing.Any",
        "typing.Generic",
        "typing.Literal",
        "anyio",
        "pydantic_core",
        "pydantic.BaseModel",
        "pydantic.Field",
        "pydantic.networks.AnyUrl",
        "pydantic_settings.BaseSettings",
        "pydantic_settings.SettingsConfigDict",
        "starlette.applications.Starlette",
        "starlette.middleware.Middleware",
        "starlette.middleware.authentication.AuthenticationMiddleware",
        "starlette.requests.Request",
        "starlette.responses.Response",
        "starlette.routing.Mount",
        "starlette.routing.Route",
        "starlette.types.Receive",
        "starlette.types.Scope",
        "starlette.types.Send",
        "mcp.server.auth.middleware.auth_context.AuthContextMiddleware",
        "mcp.server.auth.middleware.bearer_auth.BearerAuthBackend",
        "mcp.server.auth.middleware.bearer_auth.RequireAuthMiddleware",
        "mcp.server.auth.provider.OAuthAuthorizationServerProvider",
        "mcp.server.auth.settings.AuthSettings",
        "mcp.server.fastmcp.exceptions.ResourceError",
        "mcp.server.fastmcp.prompts.Prompt",
        "mcp.server.fastmcp.prompts.PromptManager",
        "mcp.server.fastmcp.resources.FunctionResource",
        "mcp.server.fastmcp.resources.Resource",
        "mcp.server.fastmcp.resources.ResourceManager",
        "mcp.server.fastmcp.tools.Tool",
        "mcp.server.fastmcp.tools.ToolManager",
        "mcp.server.fastmcp.utilities.logging.configure_logging",
        "mcp.server.fastmcp.utilities.logging.get_logger",
        "mcp.server.fastmcp.utilities.types.Image",
        "mcp.server.lowlevel.helper_types.ReadResourceContents",
        "mcp.server.lowlevel.server.LifespanResultT",
        "mcp.server.lowlevel.server.Server",
        "mcp.server.lowlevel.server.lifespan",
        "mcp.server.session.ServerSession",
        "mcp.server.session.ServerSessionT",
        "mcp.server.sse.SseServerTransport",
        "mcp.server.stdio.stdio_server",
        "mcp.server.streamable_http.EventStore",
        "mcp.server.streamable_http_manager.StreamableHTTPSessionManager",
        "mcp.shared.context.LifespanContextT",
        "mcp.shared.context.RequestContext",
        "mcp.shared.context.RequestT",
        "mcp.types.AnyFunction",
        "mcp.types.AudioContent",
        "mcp.types.EmbeddedResource",
        "mcp.types.GetPromptResult",
        "mcp.types.ImageContent",
        "mcp.types.TextContent",
        "mcp.types.ToolAnnotations",
        "mcp.types.Prompt",
        "mcp.types.PromptArgument",
        "mcp.types.Resource",
        "mcp.types.ResourceTemplate",
        "mcp.types.Tool",
        "uvicorn",
        "uvicorn",
        "starlette.middleware.Middleware",
        "starlette.routing.Mount",
        "starlette.routing.Route",
        "starlette.middleware.Middleware",
        "starlette.routing.Mount",
        "mcp.server.auth.routes.create_auth_routes",
        "mcp.server.auth.routes.create_auth_routes"
      ],
      "functions": [
        {
          "name": "lifespan_wrapper",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 125,
          "line_end": 136,
          "docstring": null,
          "parameters": [
            "app",
            "lifespan"
          ],
          "return_type": "Callable[[MCPServer[LifespanResultT, Request]], AbstractAsyncContextManager[object]]",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "_convert_to_content",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 877,
          "line_end": 896,
          "docstring": "Convert a result to a sequence of content objects.",
          "parameters": [
            "result"
          ],
          "return_type": "Sequence[TextContent | ImageContent | AudioContent | EmbeddedResource]",
          "complexity": 7,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 140,
          "line_end": 191,
          "docstring": null,
          "parameters": [
            "self",
            "name",
            "instructions",
            "auth_server_provider",
            "event_store"
          ],
          "return_type": null,
          "complexity": 3,
          "is_async": false
        },
        {
          "name": "name",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 194,
          "line_end": 195,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "instructions",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 198,
          "line_end": 199,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": "str | None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "session_manager",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 202,
          "line_end": 218,
          "docstring": "Get the StreamableHTTP session manager.\n\nThis is exposed to enable advanced use cases like mounting multiple\nFastMCP servers in a single FastAPI application.\n\nRaises:\n    RuntimeError: If called before streamable_http_app() has been called.",
          "parameters": [
            "self"
          ],
          "return_type": "StreamableHTTPSessionManager",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "run",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 220,
          "line_end": 241,
          "docstring": "Run the FastMCP server. Note this is a synchronous function.\n\nArgs:\n    transport: Transport protocol to use (\"stdio\", \"sse\", or \"streamable-http\")\n    mount_path: Optional mount path for SSE transport",
          "parameters": [
            "self",
            "transport",
            "mount_path"
          ],
          "return_type": "None",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "_setup_handlers",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 243,
          "line_end": 251,
          "docstring": "Set up core MCP protocol handlers.",
          "parameters": [
            "self"
          ],
          "return_type": "None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_context",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 266,
          "line_end": 275,
          "docstring": "Returns a Context object. Note that the context will only be valid\nduring a request; outside a request, most methods will error.",
          "parameters": [
            "self"
          ],
          "return_type": "Context[ServerSession, object, Request]",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "add_tool",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 325,
          "line_end": 345,
          "docstring": "Add a tool to the server.\n\nThe tool function can optionally request a Context object by adding a parameter\nwith the Context type annotation. See the @tool decorator for examples.\n\nArgs:\n    fn: The function to register as a tool\n    name: Optional name for the tool (defaults to function name)\n    description: Optional description of what the tool does\n    annotations: Optional ToolAnnotations providing additional tool information",
          "parameters": [
            "self",
            "fn",
            "name",
            "description",
            "annotations"
          ],
          "return_type": "None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "tool",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 347,
          "line_end": 392,
          "docstring": "Decorator to register a tool.\n\nTools can optionally request a Context object by adding a parameter with the\nContext type annotation. The context provides access to MCP capabilities like\nlogging, progress reporting, and resource access.\n\nArgs:\n    name: Optional name for the tool (defaults to function name)\n    description: Optional description of what the tool does\n    annotations: Optional ToolAnnotations providing additional tool information\n\nExample:\n    @server.tool()\n    def my_tool(x: int) -> str:\n        return str(x)\n\n    @server.tool()\n    def tool_with_context(x: int, ctx: Context) -> str:\n        ctx.info(f\"Processing {x}\")\n        return str(x)\n\n    @server.tool()\n    async def async_tool(x: int, context: Context) -> str:\n        await context.report_progress(50, 100)\n        return str(x)",
          "parameters": [
            "self",
            "name",
            "description",
            "annotations"
          ],
          "return_type": "Callable[[AnyFunction], AnyFunction]",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "add_resource",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 394,
          "line_end": 400,
          "docstring": "Add a resource to the server.\n\nArgs:\n    resource: A Resource instance to add",
          "parameters": [
            "self",
            "resource"
          ],
          "return_type": "None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "resource",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 402,
          "line_end": 489,
          "docstring": "Decorator to register a function as a resource.\n\nThe function will be called when the resource is read to generate its content.\nThe function can return:\n- str for text content\n- bytes for binary content\n- other types will be converted to JSON\n\nIf the URI contains parameters (e.g. \"resource://{param}\") or the function\nhas parameters, it will be registered as a template resource.\n\nArgs:\n    uri: URI for the resource (e.g. \"resource://my-resource\" or \"resource://{param}\")\n    name: Optional name for the resource\n    description: Optional description of the resource\n    mime_type: Optional MIME type for the resource\n\nExample:\n    @server.resource(\"resource://my-resource\")\n    def get_data() -> str:\n        return \"Hello, world!\"\n\n    @server.resource(\"resource://my-resource\")\n    async get_data() -> str:\n        data = await fetch_data()\n        return f\"Hello, world! {data}\"\n\n    @server.resource(\"resource://{city}/weather\")\n    def get_weather(city: str) -> str:\n        return f\"Weather for {city}\"\n\n    @server.resource(\"resource://{city}/weather\")\n    async def get_weather(city: str) -> str:\n        data = await fetch_weather(city)\n        return f\"Weather for {city}: {data}\"",
          "parameters": [
            "self",
            "uri"
          ],
          "return_type": "Callable[[AnyFunction], AnyFunction]",
          "complexity": 6,
          "is_async": false
        },
        {
          "name": "add_prompt",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 491,
          "line_end": 497,
          "docstring": "Add a prompt to the server.\n\nArgs:\n    prompt: A Prompt instance to add",
          "parameters": [
            "self",
            "prompt"
          ],
          "return_type": "None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "prompt",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 499,
          "line_end": 547,
          "docstring": "Decorator to register a prompt.\n\n        Args:\n            name: Optional name for the prompt (defaults to function name)\n            description: Optional description of what the prompt does\n\n        Example:\n            @server.prompt()\n            def analyze_table(table_name: str) -> list[Message]:\n                schema = read_table_schema(table_name)\n                return [\n                    {\n                        \"role\": \"user\",\n                        \"content\": f\"Analyze this schema:\n{schema}\"\n                    }\n                ]\n\n            @server.prompt()\n            async def analyze_file(path: str) -> list[Message]:\n                content = await read_file(path)\n                return [\n                    {\n                        \"role\": \"user\",\n                        \"content\": {\n                            \"type\": \"resource\",\n                            \"resource\": {\n                                \"uri\": f\"file://{path}\",\n                                \"text\": content\n                            }\n                        }\n                    }\n                ]\n        ",
          "parameters": [
            "self",
            "name",
            "description"
          ],
          "return_type": "Callable[[AnyFunction], AnyFunction]",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "custom_route",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 549,
          "line_end": 591,
          "docstring": "Decorator to register a custom HTTP route on the FastMCP server.\n\nAllows adding arbitrary HTTP endpoints outside the standard MCP protocol,\nwhich can be useful for OAuth callbacks, health checks, or admin APIs.\nThe handler function must be an async function that accepts a Starlette\nRequest and returns a Response.\n\nArgs:\n    path: URL path for the route (e.g., \"/oauth/callback\")\n    methods: List of HTTP methods to support (e.g., [\"GET\", \"POST\"])\n    name: Optional name for the route (to reference this route with\n          Starlette's reverse URL lookup feature)\n    include_in_schema: Whether to include in OpenAPI schema, defaults to True\n\nExample:\n    @server.custom_route(\"/health\", methods=[\"GET\"])\n    async def health_check(request: Request) -> Response:\n        return JSONResponse({\"status\": \"ok\"})",
          "parameters": [
            "self",
            "path",
            "methods",
            "name",
            "include_in_schema"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "_normalize_path",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 632,
          "line_end": 656,
          "docstring": "Combine mount path and endpoint to return a normalized path.\n\nArgs:\n    mount_path: The mount path (e.g. \"/github\" or \"/\")\n    endpoint: The endpoint path (e.g. \"/messages/\")\n\nReturns:\n    Normalized path (e.g. \"/github/messages/\")",
          "parameters": [
            "self",
            "mount_path",
            "endpoint"
          ],
          "return_type": "str",
          "complexity": 4,
          "is_async": false
        },
        {
          "name": "sse_app",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 658,
          "line_end": 769,
          "docstring": "Return an instance of the SSE server app.",
          "parameters": [
            "self",
            "mount_path"
          ],
          "return_type": "Starlette",
          "complexity": 6,
          "is_async": false
        },
        {
          "name": "streamable_http_app",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 771,
          "line_end": 843,
          "docstring": "Return an instance of the StreamableHTTP server app.",
          "parameters": [
            "self"
          ],
          "return_type": "Starlette",
          "complexity": 4,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 936,
          "line_end": 947,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "fastmcp",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 950,
          "line_end": 954,
          "docstring": "Access to the FastMCP server.",
          "parameters": [
            "self"
          ],
          "return_type": "FastMCP",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "request_context",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 957,
          "line_end": 963,
          "docstring": "Access to the underlying request context.",
          "parameters": [
            "self"
          ],
          "return_type": "RequestContext[ServerSessionT, LifespanContextT, RequestT]",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "client_id",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 1028,
          "line_end": 1034,
          "docstring": "Get the client ID if available.",
          "parameters": [
            "self"
          ],
          "return_type": "str | None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "request_id",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 1037,
          "line_end": 1039,
          "docstring": "Get the unique ID for this request.",
          "parameters": [
            "self"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "session",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 1042,
          "line_end": 1044,
          "docstring": "Access to the underlying session for advanced usage.",
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "decorator",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 386,
          "line_end": 390,
          "docstring": null,
          "parameters": [
            "fn"
          ],
          "return_type": "AnyFunction",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "decorator",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 453,
          "line_end": 487,
          "docstring": null,
          "parameters": [
            "fn"
          ],
          "return_type": "AnyFunction",
          "complexity": 5,
          "is_async": false
        },
        {
          "name": "decorator",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 542,
          "line_end": 545,
          "docstring": null,
          "parameters": [
            "func"
          ],
          "return_type": "AnyFunction",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "decorator",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 577,
          "line_end": 589,
          "docstring": null,
          "parameters": [
            "func"
          ],
          "return_type": "Callable[[Request], Awaitable[Response]]",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "Settings",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 71,
          "line_end": 122,
          "docstring": "FastMCP server settings.\n\nAll settings can be configured via environment variables with the prefix FASTMCP_.\nFor example, FASTMCP_DEBUG=true will set debug=True.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseSettings",
            "Generic[LifespanResultT]"
          ]
        },
        {
          "name": "FastMCP",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 139,
          "line_end": 874,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/server/fastmcp/server.py",
              "line_start": 140,
              "line_end": 191,
              "docstring": null,
              "parameters": [
                "self",
                "name",
                "instructions",
                "auth_server_provider",
                "event_store"
              ],
              "return_type": null,
              "complexity": 3,
              "is_async": false
            },
            {
              "name": "name",
              "file_path": "src/mcp/server/fastmcp/server.py",
              "line_start": 194,
              "line_end": 195,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": "str",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "instructions",
              "file_path": "src/mcp/server/fastmcp/server.py",
              "line_start": 198,
              "line_end": 199,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": "str | None",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "session_manager",
              "file_path": "src/mcp/server/fastmcp/server.py",
              "line_start": 202,
              "line_end": 218,
              "docstring": "Get the StreamableHTTP session manager.\n\nThis is exposed to enable advanced use cases like mounting multiple\nFastMCP servers in a single FastAPI application.\n\nRaises:\n    RuntimeError: If called before streamable_http_app() has been called.",
              "parameters": [
                "self"
              ],
              "return_type": "StreamableHTTPSessionManager",
              "complexity": 2,
              "is_async": false
            },
            {
              "name": "run",
              "file_path": "src/mcp/server/fastmcp/server.py",
              "line_start": 220,
              "line_end": 241,
              "docstring": "Run the FastMCP server. Note this is a synchronous function.\n\nArgs:\n    transport: Transport protocol to use (\"stdio\", \"sse\", or \"streamable-http\")\n    mount_path: Optional mount path for SSE transport",
              "parameters": [
                "self",
                "transport",
                "mount_path"
              ],
              "return_type": "None",
              "complexity": 2,
              "is_async": false
            },
            {
              "name": "_setup_handlers",
              "file_path": "src/mcp/server/fastmcp/server.py",
              "line_start": 243,
              "line_end": 251,
              "docstring": "Set up core MCP protocol handlers.",
              "parameters": [
                "self"
              ],
              "return_type": "None",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "get_context",
              "file_path": "src/mcp/server/fastmcp/server.py",
              "line_start": 266,
              "line_end": 275,
              "docstring": "Returns a Context object. Note that the context will only be valid\nduring a request; outside a request, most methods will error.",
              "parameters": [
                "self"
              ],
              "return_type": "Context[ServerSession, object, Request]",
              "complexity": 2,
              "is_async": false
            },
            {
              "name": "add_tool",
              "file_path": "src/mcp/server/fastmcp/server.py",
              "line_start": 325,
              "line_end": 345,
              "docstring": "Add a tool to the server.\n\nThe tool function can optionally request a Context object by adding a parameter\nwith the Context type annotation. See the @tool decorator for examples.\n\nArgs:\n    fn: The function to register as a tool\n    name: Optional name for the tool (defaults to function name)\n    description: Optional description of what the tool does\n    annotations: Optional ToolAnnotations providing additional tool information",
              "parameters": [
                "self",
                "fn",
                "name",
                "description",
                "annotations"
              ],
              "return_type": "None",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "tool",
              "file_path": "src/mcp/server/fastmcp/server.py",
              "line_start": 347,
              "line_end": 392,
              "docstring": "Decorator to register a tool.\n\nTools can optionally request a Context object by adding a parameter with the\nContext type annotation. The context provides access to MCP capabilities like\nlogging, progress reporting, and resource access.\n\nArgs:\n    name: Optional name for the tool (defaults to function name)\n    description: Optional description of what the tool does\n    annotations: Optional ToolAnnotations providing additional tool information\n\nExample:\n    @server.tool()\n    def my_tool(x: int) -> str:\n        return str(x)\n\n    @server.tool()\n    def tool_with_context(x: int, ctx: Context) -> str:\n        ctx.info(f\"Processing {x}\")\n        return str(x)\n\n    @server.tool()\n    async def async_tool(x: int, context: Context) -> str:\n        await context.report_progress(50, 100)\n        return str(x)",
              "parameters": [
                "self",
                "name",
                "description",
                "annotations"
              ],
              "return_type": "Callable[[AnyFunction], AnyFunction]",
              "complexity": 2,
              "is_async": false
            },
            {
              "name": "add_resource",
              "file_path": "src/mcp/server/fastmcp/server.py",
              "line_start": 394,
              "line_end": 400,
              "docstring": "Add a resource to the server.\n\nArgs:\n    resource: A Resource instance to add",
              "parameters": [
                "self",
                "resource"
              ],
              "return_type": "None",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "resource",
              "file_path": "src/mcp/server/fastmcp/server.py",
              "line_start": 402,
              "line_end": 489,
              "docstring": "Decorator to register a function as a resource.\n\nThe function will be called when the resource is read to generate its content.\nThe function can return:\n- str for text content\n- bytes for binary content\n- other types will be converted to JSON\n\nIf the URI contains parameters (e.g. \"resource://{param}\") or the function\nhas parameters, it will be registered as a template resource.\n\nArgs:\n    uri: URI for the resource (e.g. \"resource://my-resource\" or \"resource://{param}\")\n    name: Optional name for the resource\n    description: Optional description of the resource\n    mime_type: Optional MIME type for the resource\n\nExample:\n    @server.resource(\"resource://my-resource\")\n    def get_data() -> str:\n        return \"Hello, world!\"\n\n    @server.resource(\"resource://my-resource\")\n    async get_data() -> str:\n        data = await fetch_data()\n        return f\"Hello, world! {data}\"\n\n    @server.resource(\"resource://{city}/weather\")\n    def get_weather(city: str) -> str:\n        return f\"Weather for {city}\"\n\n    @server.resource(\"resource://{city}/weather\")\n    async def get_weather(city: str) -> str:\n        data = await fetch_weather(city)\n        return f\"Weather for {city}: {data}\"",
              "parameters": [
                "self",
                "uri"
              ],
              "return_type": "Callable[[AnyFunction], AnyFunction]",
              "complexity": 6,
              "is_async": false
            },
            {
              "name": "add_prompt",
              "file_path": "src/mcp/server/fastmcp/server.py",
              "line_start": 491,
              "line_end": 497,
              "docstring": "Add a prompt to the server.\n\nArgs:\n    prompt: A Prompt instance to add",
              "parameters": [
                "self",
                "prompt"
              ],
              "return_type": "None",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "prompt",
              "file_path": "src/mcp/server/fastmcp/server.py",
              "line_start": 499,
              "line_end": 547,
              "docstring": "Decorator to register a prompt.\n\n        Args:\n            name: Optional name for the prompt (defaults to function name)\n            description: Optional description of what the prompt does\n\n        Example:\n            @server.prompt()\n            def analyze_table(table_name: str) -> list[Message]:\n                schema = read_table_schema(table_name)\n                return [\n                    {\n                        \"role\": \"user\",\n                        \"content\": f\"Analyze this schema:\n{schema}\"\n                    }\n                ]\n\n            @server.prompt()\n            async def analyze_file(path: str) -> list[Message]:\n                content = await read_file(path)\n                return [\n                    {\n                        \"role\": \"user\",\n                        \"content\": {\n                            \"type\": \"resource\",\n                            \"resource\": {\n                                \"uri\": f\"file://{path}\",\n                                \"text\": content\n                            }\n                        }\n                    }\n                ]\n        ",
              "parameters": [
                "self",
                "name",
                "description"
              ],
              "return_type": "Callable[[AnyFunction], AnyFunction]",
              "complexity": 2,
              "is_async": false
            },
            {
              "name": "custom_route",
              "file_path": "src/mcp/server/fastmcp/server.py",
              "line_start": 549,
              "line_end": 591,
              "docstring": "Decorator to register a custom HTTP route on the FastMCP server.\n\nAllows adding arbitrary HTTP endpoints outside the standard MCP protocol,\nwhich can be useful for OAuth callbacks, health checks, or admin APIs.\nThe handler function must be an async function that accepts a Starlette\nRequest and returns a Response.\n\nArgs:\n    path: URL path for the route (e.g., \"/oauth/callback\")\n    methods: List of HTTP methods to support (e.g., [\"GET\", \"POST\"])\n    name: Optional name for the route (to reference this route with\n          Starlette's reverse URL lookup feature)\n    include_in_schema: Whether to include in OpenAPI schema, defaults to True\n\nExample:\n    @server.custom_route(\"/health\", methods=[\"GET\"])\n    async def health_check(request: Request) -> Response:\n        return JSONResponse({\"status\": \"ok\"})",
              "parameters": [
                "self",
                "path",
                "methods",
                "name",
                "include_in_schema"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "_normalize_path",
              "file_path": "src/mcp/server/fastmcp/server.py",
              "line_start": 632,
              "line_end": 656,
              "docstring": "Combine mount path and endpoint to return a normalized path.\n\nArgs:\n    mount_path: The mount path (e.g. \"/github\" or \"/\")\n    endpoint: The endpoint path (e.g. \"/messages/\")\n\nReturns:\n    Normalized path (e.g. \"/github/messages/\")",
              "parameters": [
                "self",
                "mount_path",
                "endpoint"
              ],
              "return_type": "str",
              "complexity": 4,
              "is_async": false
            },
            {
              "name": "sse_app",
              "file_path": "src/mcp/server/fastmcp/server.py",
              "line_start": 658,
              "line_end": 769,
              "docstring": "Return an instance of the SSE server app.",
              "parameters": [
                "self",
                "mount_path"
              ],
              "return_type": "Starlette",
              "complexity": 6,
              "is_async": false
            },
            {
              "name": "streamable_http_app",
              "file_path": "src/mcp/server/fastmcp/server.py",
              "line_start": 771,
              "line_end": 843,
              "docstring": "Return an instance of the StreamableHTTP server app.",
              "parameters": [
                "self"
              ],
              "return_type": "Starlette",
              "complexity": 4,
              "is_async": false
            }
          ],
          "attributes": [
            "settings",
            "_mcp_server",
            "_tool_manager",
            "_resource_manager",
            "_prompt_manager",
            "_auth_server_provider",
            "_event_store",
            "dependencies"
          ],
          "inheritance": []
        },
        {
          "name": "Context",
          "file_path": "src/mcp/server/fastmcp/server.py",
          "line_start": 899,
          "line_end": 1061,
          "docstring": "Context object providing access to MCP capabilities.\n\nThis provides a cleaner interface to MCP's RequestContext functionality.\nIt gets injected into tool and resource functions that request it via type hints.\n\nTo use context in a tool function, add a parameter with the Context type annotation:\n\n```python\n@server.tool()\ndef my_tool(x: int, ctx: Context) -> str:\n    # Log messages to the client\n    ctx.info(f\"Processing {x}\")\n    ctx.debug(\"Debug info\")\n    ctx.warning(\"Warning message\")\n    ctx.error(\"Error message\")\n\n    # Report progress\n    ctx.report_progress(50, 100)\n\n    # Access resources\n    data = ctx.read_resource(\"resource://data\")\n\n    # Get request info\n    request_id = ctx.request_id\n    client_id = ctx.client_id\n\n    return str(x)\n```\n\nThe context parameter name can be anything as long as it's annotated with Context.\nThe context is optional - tools that don't need it can omit the parameter.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/server/fastmcp/server.py",
              "line_start": 936,
              "line_end": 947,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "fastmcp",
              "file_path": "src/mcp/server/fastmcp/server.py",
              "line_start": 950,
              "line_end": 954,
              "docstring": "Access to the FastMCP server.",
              "parameters": [
                "self"
              ],
              "return_type": "FastMCP",
              "complexity": 2,
              "is_async": false
            },
            {
              "name": "request_context",
              "file_path": "src/mcp/server/fastmcp/server.py",
              "line_start": 957,
              "line_end": 963,
              "docstring": "Access to the underlying request context.",
              "parameters": [
                "self"
              ],
              "return_type": "RequestContext[ServerSessionT, LifespanContextT, RequestT]",
              "complexity": 2,
              "is_async": false
            },
            {
              "name": "client_id",
              "file_path": "src/mcp/server/fastmcp/server.py",
              "line_start": 1028,
              "line_end": 1034,
              "docstring": "Get the client ID if available.",
              "parameters": [
                "self"
              ],
              "return_type": "str | None",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "request_id",
              "file_path": "src/mcp/server/fastmcp/server.py",
              "line_start": 1037,
              "line_end": 1039,
              "docstring": "Get the unique ID for this request.",
              "parameters": [
                "self"
              ],
              "return_type": "str",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "session",
              "file_path": "src/mcp/server/fastmcp/server.py",
              "line_start": 1042,
              "line_end": 1044,
              "docstring": "Access to the underlying session for advanced usage.",
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "_request_context",
            "_fastmcp"
          ],
          "inheritance": [
            "BaseModel",
            "Generic[ServerSessionT, LifespanContextT, RequestT]"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 1062,
      "complexity_score": 2.2413793103448274
    },
    {
      "name": "__init__",
      "path": "src/mcp/server/fastmcp/__init__.py",
      "docstring": "FastMCP - A more ergonomic interface for MCP servers.",
      "imports": [
        "importlib.metadata.version",
        "server.Context",
        "server.FastMCP",
        "utilities.types.Image"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 10,
      "complexity_score": 0.0
    },
    {
      "name": "base",
      "path": "src/mcp/server/fastmcp/prompts/base.py",
      "docstring": "Base classes for FastMCP prompts.",
      "imports": [
        "inspect",
        "collections.abc.Awaitable",
        "collections.abc.Callable",
        "collections.abc.Sequence",
        "typing.Any",
        "typing.Literal",
        "pydantic_core",
        "pydantic.BaseModel",
        "pydantic.Field",
        "pydantic.TypeAdapter",
        "pydantic.validate_call",
        "mcp.types.AudioContent",
        "mcp.types.EmbeddedResource",
        "mcp.types.ImageContent",
        "mcp.types.TextContent"
      ],
      "functions": [
        {
          "name": "__init__",
          "file_path": "src/mcp/server/fastmcp/prompts/base.py",
          "line_start": 21,
          "line_end": 24,
          "docstring": null,
          "parameters": [
            "self",
            "content"
          ],
          "return_type": null,
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "src/mcp/server/fastmcp/prompts/base.py",
          "line_start": 32,
          "line_end": 33,
          "docstring": null,
          "parameters": [
            "self",
            "content"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "src/mcp/server/fastmcp/prompts/base.py",
          "line_start": 41,
          "line_end": 42,
          "docstring": null,
          "parameters": [
            "self",
            "content"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "from_function",
          "file_path": "src/mcp/server/fastmcp/prompts/base.py",
          "line_start": 80,
          "line_end": 123,
          "docstring": "Create a Prompt from a function.\n\nThe function can return:\n- A string (converted to a message)\n- A Message object\n- A dict (converted to a message)\n- A sequence of any of the above",
          "parameters": [
            "cls",
            "fn",
            "name",
            "description"
          ],
          "return_type": "'Prompt'",
          "complexity": 7,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "Message",
          "file_path": "src/mcp/server/fastmcp/prompts/base.py",
          "line_start": 15,
          "line_end": 24,
          "docstring": "Base class for all prompt messages.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/server/fastmcp/prompts/base.py",
              "line_start": 21,
              "line_end": 24,
              "docstring": null,
              "parameters": [
                "self",
                "content"
              ],
              "return_type": null,
              "complexity": 2,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "UserMessage",
          "file_path": "src/mcp/server/fastmcp/prompts/base.py",
          "line_start": 27,
          "line_end": 33,
          "docstring": "A message from the user.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/server/fastmcp/prompts/base.py",
              "line_start": 32,
              "line_end": 33,
              "docstring": null,
              "parameters": [
                "self",
                "content"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": [
            "Message"
          ]
        },
        {
          "name": "AssistantMessage",
          "file_path": "src/mcp/server/fastmcp/prompts/base.py",
          "line_start": 36,
          "line_end": 42,
          "docstring": "A message from the assistant.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/server/fastmcp/prompts/base.py",
              "line_start": 41,
              "line_end": 42,
              "docstring": null,
              "parameters": [
                "self",
                "content"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": [
            "Message"
          ]
        },
        {
          "name": "PromptArgument",
          "file_path": "src/mcp/server/fastmcp/prompts/base.py",
          "line_start": 55,
          "line_end": 64,
          "docstring": "An argument that can be passed to a prompt.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "Prompt",
          "file_path": "src/mcp/server/fastmcp/prompts/base.py",
          "line_start": 67,
          "line_end": 168,
          "docstring": "A prompt template that can be rendered with parameters.",
          "methods": [
            {
              "name": "from_function",
              "file_path": "src/mcp/server/fastmcp/prompts/base.py",
              "line_start": 80,
              "line_end": 123,
              "docstring": "Create a Prompt from a function.\n\nThe function can return:\n- A string (converted to a message)\n- A Message object\n- A dict (converted to a message)\n- A sequence of any of the above",
              "parameters": [
                "cls",
                "fn",
                "name",
                "description"
              ],
              "return_type": "'Prompt'",
              "complexity": 7,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        }
      ],
      "constants": [
        "CONTENT_TYPES"
      ],
      "language": "python",
      "lines_of_code": 169,
      "complexity_score": 2.75
    },
    {
      "name": "manager",
      "path": "src/mcp/server/fastmcp/prompts/manager.py",
      "docstring": "Prompt management functionality.",
      "imports": [
        "typing.Any",
        "mcp.server.fastmcp.prompts.base.Message",
        "mcp.server.fastmcp.prompts.base.Prompt",
        "mcp.server.fastmcp.utilities.logging.get_logger"
      ],
      "functions": [
        {
          "name": "__init__",
          "file_path": "src/mcp/server/fastmcp/prompts/manager.py",
          "line_start": 14,
          "line_end": 16,
          "docstring": null,
          "parameters": [
            "self",
            "warn_on_duplicate_prompts"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_prompt",
          "file_path": "src/mcp/server/fastmcp/prompts/manager.py",
          "line_start": 18,
          "line_end": 20,
          "docstring": "Get prompt by name.",
          "parameters": [
            "self",
            "name"
          ],
          "return_type": "Prompt | None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "list_prompts",
          "file_path": "src/mcp/server/fastmcp/prompts/manager.py",
          "line_start": 22,
          "line_end": 24,
          "docstring": "List all registered prompts.",
          "parameters": [
            "self"
          ],
          "return_type": "list[Prompt]",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "add_prompt",
          "file_path": "src/mcp/server/fastmcp/prompts/manager.py",
          "line_start": 26,
          "line_end": 40,
          "docstring": "Add a prompt to the manager.",
          "parameters": [
            "self",
            "prompt"
          ],
          "return_type": "Prompt",
          "complexity": 3,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "PromptManager",
          "file_path": "src/mcp/server/fastmcp/prompts/manager.py",
          "line_start": 11,
          "line_end": 50,
          "docstring": "Manages FastMCP prompts.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/server/fastmcp/prompts/manager.py",
              "line_start": 14,
              "line_end": 16,
              "docstring": null,
              "parameters": [
                "self",
                "warn_on_duplicate_prompts"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "get_prompt",
              "file_path": "src/mcp/server/fastmcp/prompts/manager.py",
              "line_start": 18,
              "line_end": 20,
              "docstring": "Get prompt by name.",
              "parameters": [
                "self",
                "name"
              ],
              "return_type": "Prompt | None",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "list_prompts",
              "file_path": "src/mcp/server/fastmcp/prompts/manager.py",
              "line_start": 22,
              "line_end": 24,
              "docstring": "List all registered prompts.",
              "parameters": [
                "self"
              ],
              "return_type": "list[Prompt]",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "add_prompt",
              "file_path": "src/mcp/server/fastmcp/prompts/manager.py",
              "line_start": 26,
              "line_end": 40,
              "docstring": "Add a prompt to the manager.",
              "parameters": [
                "self",
                "prompt"
              ],
              "return_type": "Prompt",
              "complexity": 3,
              "is_async": false
            }
          ],
          "attributes": [
            "warn_on_duplicate_prompts"
          ],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 51,
      "complexity_score": 1.5
    },
    {
      "name": "prompt_manager",
      "path": "src/mcp/server/fastmcp/prompts/prompt_manager.py",
      "docstring": "Prompt management functionality.",
      "imports": [
        "mcp.server.fastmcp.prompts.base.Prompt",
        "mcp.server.fastmcp.utilities.logging.get_logger"
      ],
      "functions": [
        {
          "name": "__init__",
          "file_path": "src/mcp/server/fastmcp/prompts/prompt_manager.py",
          "line_start": 12,
          "line_end": 14,
          "docstring": null,
          "parameters": [
            "self",
            "warn_on_duplicate_prompts"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "add_prompt",
          "file_path": "src/mcp/server/fastmcp/prompts/prompt_manager.py",
          "line_start": 16,
          "line_end": 25,
          "docstring": "Add a prompt to the manager.",
          "parameters": [
            "self",
            "prompt"
          ],
          "return_type": "Prompt",
          "complexity": 3,
          "is_async": false
        },
        {
          "name": "get_prompt",
          "file_path": "src/mcp/server/fastmcp/prompts/prompt_manager.py",
          "line_start": 27,
          "line_end": 29,
          "docstring": "Get prompt by name.",
          "parameters": [
            "self",
            "name"
          ],
          "return_type": "Prompt | None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "list_prompts",
          "file_path": "src/mcp/server/fastmcp/prompts/prompt_manager.py",
          "line_start": 31,
          "line_end": 33,
          "docstring": "List all registered prompts.",
          "parameters": [
            "self"
          ],
          "return_type": "list[Prompt]",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "PromptManager",
          "file_path": "src/mcp/server/fastmcp/prompts/prompt_manager.py",
          "line_start": 9,
          "line_end": 33,
          "docstring": "Manages FastMCP prompts.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/server/fastmcp/prompts/prompt_manager.py",
              "line_start": 12,
              "line_end": 14,
              "docstring": null,
              "parameters": [
                "self",
                "warn_on_duplicate_prompts"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "add_prompt",
              "file_path": "src/mcp/server/fastmcp/prompts/prompt_manager.py",
              "line_start": 16,
              "line_end": 25,
              "docstring": "Add a prompt to the manager.",
              "parameters": [
                "self",
                "prompt"
              ],
              "return_type": "Prompt",
              "complexity": 3,
              "is_async": false
            },
            {
              "name": "get_prompt",
              "file_path": "src/mcp/server/fastmcp/prompts/prompt_manager.py",
              "line_start": 27,
              "line_end": 29,
              "docstring": "Get prompt by name.",
              "parameters": [
                "self",
                "name"
              ],
              "return_type": "Prompt | None",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "list_prompts",
              "file_path": "src/mcp/server/fastmcp/prompts/prompt_manager.py",
              "line_start": 31,
              "line_end": 33,
              "docstring": "List all registered prompts.",
              "parameters": [
                "self"
              ],
              "return_type": "list[Prompt]",
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "warn_on_duplicate_prompts"
          ],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 34,
      "complexity_score": 1.5
    },
    {
      "name": "__init__",
      "path": "src/mcp/server/fastmcp/prompts/__init__.py",
      "docstring": null,
      "imports": [
        "base.Prompt",
        "manager.PromptManager"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 5,
      "complexity_score": 0.0
    },
    {
      "name": "base",
      "path": "src/mcp/server/fastmcp/resources/base.py",
      "docstring": "Base classes and interfaces for FastMCP resources.",
      "imports": [
        "abc",
        "typing.Annotated",
        "pydantic.AnyUrl",
        "pydantic.BaseModel",
        "pydantic.ConfigDict",
        "pydantic.Field",
        "pydantic.UrlConstraints",
        "pydantic.ValidationInfo",
        "pydantic.field_validator"
      ],
      "functions": [
        {
          "name": "set_default_name",
          "file_path": "src/mcp/server/fastmcp/resources/base.py",
          "line_start": 37,
          "line_end": 43,
          "docstring": "Set default name from URI if not provided.",
          "parameters": [
            "cls",
            "name",
            "info"
          ],
          "return_type": "str",
          "complexity": 3,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "Resource",
          "file_path": "src/mcp/server/fastmcp/resources/base.py",
          "line_start": 17,
          "line_end": 48,
          "docstring": "Base class for all resources.",
          "methods": [
            {
              "name": "set_default_name",
              "file_path": "src/mcp/server/fastmcp/resources/base.py",
              "line_start": 37,
              "line_end": 43,
              "docstring": "Set default name from URI if not provided.",
              "parameters": [
                "cls",
                "name",
                "info"
              ],
              "return_type": "str",
              "complexity": 3,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": [
            "BaseModel",
            "abc.ABC"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 49,
      "complexity_score": 3.0
    },
    {
      "name": "resource_manager",
      "path": "src/mcp/server/fastmcp/resources/resource_manager.py",
      "docstring": "Resource manager functionality.",
      "imports": [
        "collections.abc.Callable",
        "typing.Any",
        "pydantic.AnyUrl",
        "mcp.server.fastmcp.resources.base.Resource",
        "mcp.server.fastmcp.resources.templates.ResourceTemplate",
        "mcp.server.fastmcp.utilities.logging.get_logger"
      ],
      "functions": [
        {
          "name": "__init__",
          "file_path": "src/mcp/server/fastmcp/resources/resource_manager.py",
          "line_start": 18,
          "line_end": 21,
          "docstring": null,
          "parameters": [
            "self",
            "warn_on_duplicate_resources"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "add_resource",
          "file_path": "src/mcp/server/fastmcp/resources/resource_manager.py",
          "line_start": 23,
          "line_end": 47,
          "docstring": "Add a resource to the manager.\n\nArgs:\n    resource: A Resource instance to add\n\nReturns:\n    The added resource. If a resource with the same URI already exists,\n    returns the existing resource.",
          "parameters": [
            "self",
            "resource"
          ],
          "return_type": "Resource",
          "complexity": 3,
          "is_async": false
        },
        {
          "name": "add_template",
          "file_path": "src/mcp/server/fastmcp/resources/resource_manager.py",
          "line_start": 49,
          "line_end": 66,
          "docstring": "Add a template from a function.",
          "parameters": [
            "self",
            "fn",
            "uri_template",
            "name",
            "description",
            "mime_type"
          ],
          "return_type": "ResourceTemplate",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "list_resources",
          "file_path": "src/mcp/server/fastmcp/resources/resource_manager.py",
          "line_start": 87,
          "line_end": 90,
          "docstring": "List all registered resources.",
          "parameters": [
            "self"
          ],
          "return_type": "list[Resource]",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "list_templates",
          "file_path": "src/mcp/server/fastmcp/resources/resource_manager.py",
          "line_start": 92,
          "line_end": 95,
          "docstring": "List all registered templates.",
          "parameters": [
            "self"
          ],
          "return_type": "list[ResourceTemplate]",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "ResourceManager",
          "file_path": "src/mcp/server/fastmcp/resources/resource_manager.py",
          "line_start": 15,
          "line_end": 95,
          "docstring": "Manages FastMCP resources.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/server/fastmcp/resources/resource_manager.py",
              "line_start": 18,
              "line_end": 21,
              "docstring": null,
              "parameters": [
                "self",
                "warn_on_duplicate_resources"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "add_resource",
              "file_path": "src/mcp/server/fastmcp/resources/resource_manager.py",
              "line_start": 23,
              "line_end": 47,
              "docstring": "Add a resource to the manager.\n\nArgs:\n    resource: A Resource instance to add\n\nReturns:\n    The added resource. If a resource with the same URI already exists,\n    returns the existing resource.",
              "parameters": [
                "self",
                "resource"
              ],
              "return_type": "Resource",
              "complexity": 3,
              "is_async": false
            },
            {
              "name": "add_template",
              "file_path": "src/mcp/server/fastmcp/resources/resource_manager.py",
              "line_start": 49,
              "line_end": 66,
              "docstring": "Add a template from a function.",
              "parameters": [
                "self",
                "fn",
                "uri_template",
                "name",
                "description",
                "mime_type"
              ],
              "return_type": "ResourceTemplate",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "list_resources",
              "file_path": "src/mcp/server/fastmcp/resources/resource_manager.py",
              "line_start": 87,
              "line_end": 90,
              "docstring": "List all registered resources.",
              "parameters": [
                "self"
              ],
              "return_type": "list[Resource]",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "list_templates",
              "file_path": "src/mcp/server/fastmcp/resources/resource_manager.py",
              "line_start": 92,
              "line_end": 95,
              "docstring": "List all registered templates.",
              "parameters": [
                "self"
              ],
              "return_type": "list[ResourceTemplate]",
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "warn_on_duplicate_resources"
          ],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 96,
      "complexity_score": 1.4
    },
    {
      "name": "templates",
      "path": "src/mcp/server/fastmcp/resources/templates.py",
      "docstring": "Resource template functionality.",
      "imports": [
        "__future__.annotations",
        "inspect",
        "re",
        "collections.abc.Callable",
        "typing.Any",
        "pydantic.BaseModel",
        "pydantic.Field",
        "pydantic.TypeAdapter",
        "pydantic.validate_call",
        "mcp.server.fastmcp.resources.types.FunctionResource",
        "mcp.server.fastmcp.resources.types.Resource"
      ],
      "functions": [
        {
          "name": "from_function",
          "file_path": "src/mcp/server/fastmcp/resources/templates.py",
          "line_start": 32,
          "line_end": 58,
          "docstring": "Create a template from a function.",
          "parameters": [
            "cls",
            "fn",
            "uri_template",
            "name",
            "description",
            "mime_type"
          ],
          "return_type": "ResourceTemplate",
          "complexity": 6,
          "is_async": false
        },
        {
          "name": "matches",
          "file_path": "src/mcp/server/fastmcp/resources/templates.py",
          "line_start": 60,
          "line_end": 67,
          "docstring": "Check if URI matches template and extract parameters.",
          "parameters": [
            "self",
            "uri"
          ],
          "return_type": "dict[str, Any] | None",
          "complexity": 2,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "ResourceTemplate",
          "file_path": "src/mcp/server/fastmcp/resources/templates.py",
          "line_start": 15,
          "line_end": 85,
          "docstring": "A template for dynamically creating resources.",
          "methods": [
            {
              "name": "from_function",
              "file_path": "src/mcp/server/fastmcp/resources/templates.py",
              "line_start": 32,
              "line_end": 58,
              "docstring": "Create a template from a function.",
              "parameters": [
                "cls",
                "fn",
                "uri_template",
                "name",
                "description",
                "mime_type"
              ],
              "return_type": "ResourceTemplate",
              "complexity": 6,
              "is_async": false
            },
            {
              "name": "matches",
              "file_path": "src/mcp/server/fastmcp/resources/templates.py",
              "line_start": 60,
              "line_end": 67,
              "docstring": "Check if URI matches template and extract parameters.",
              "parameters": [
                "self",
                "uri"
              ],
              "return_type": "dict[str, Any] | None",
              "complexity": 2,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 86,
      "complexity_score": 4.0
    },
    {
      "name": "types",
      "path": "src/mcp/server/fastmcp/resources/types.py",
      "docstring": "Concrete resource implementations.",
      "imports": [
        "inspect",
        "json",
        "collections.abc.Callable",
        "pathlib.Path",
        "typing.Any",
        "anyio",
        "anyio.to_thread",
        "httpx",
        "pydantic",
        "pydantic_core",
        "pydantic.AnyUrl",
        "pydantic.Field",
        "pydantic.ValidationInfo",
        "pydantic.validate_call",
        "mcp.server.fastmcp.resources.base.Resource"
      ],
      "functions": [
        {
          "name": "from_function",
          "file_path": "src/mcp/server/fastmcp/resources/types.py",
          "line_start": 72,
          "line_end": 94,
          "docstring": "Create a FunctionResource from a function.",
          "parameters": [
            "cls",
            "fn",
            "uri",
            "name",
            "description",
            "mime_type"
          ],
          "return_type": "'FunctionResource'",
          "complexity": 6,
          "is_async": false
        },
        {
          "name": "validate_absolute_path",
          "file_path": "src/mcp/server/fastmcp/resources/types.py",
          "line_start": 115,
          "line_end": 119,
          "docstring": "Ensure path is absolute.",
          "parameters": [
            "cls",
            "path"
          ],
          "return_type": "Path",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "set_binary_from_mime_type",
          "file_path": "src/mcp/server/fastmcp/resources/types.py",
          "line_start": 123,
          "line_end": 128,
          "docstring": "Set is_binary based on mime_type if not explicitly set.",
          "parameters": [
            "cls",
            "is_binary",
            "info"
          ],
          "return_type": "bool",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "validate_absolute_path",
          "file_path": "src/mcp/server/fastmcp/resources/types.py",
          "line_start": 172,
          "line_end": 176,
          "docstring": "Ensure path is absolute.",
          "parameters": [
            "cls",
            "path"
          ],
          "return_type": "Path",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "list_files",
          "file_path": "src/mcp/server/fastmcp/resources/types.py",
          "line_start": 178,
          "line_end": 198,
          "docstring": "List files in the directory.",
          "parameters": [
            "self"
          ],
          "return_type": "list[Path]",
          "complexity": 5,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "TextResource",
          "file_path": "src/mcp/server/fastmcp/resources/types.py",
          "line_start": 19,
          "line_end": 26,
          "docstring": "A resource that reads from a string.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Resource"
          ]
        },
        {
          "name": "BinaryResource",
          "file_path": "src/mcp/server/fastmcp/resources/types.py",
          "line_start": 29,
          "line_end": 36,
          "docstring": "A resource that reads from bytes.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Resource"
          ]
        },
        {
          "name": "FunctionResource",
          "file_path": "src/mcp/server/fastmcp/resources/types.py",
          "line_start": 39,
          "line_end": 94,
          "docstring": "A resource that defers data loading by wrapping a function.\n\nThe function is only called when the resource is read, allowing for lazy loading\nof potentially expensive data. This is particularly useful when listing resources,\nas the function won't be called until the resource is actually accessed.\n\nThe function can return:\n- str for text content (default)\n- bytes for binary content\n- other types will be converted to JSON",
          "methods": [
            {
              "name": "from_function",
              "file_path": "src/mcp/server/fastmcp/resources/types.py",
              "line_start": 72,
              "line_end": 94,
              "docstring": "Create a FunctionResource from a function.",
              "parameters": [
                "cls",
                "fn",
                "uri",
                "name",
                "description",
                "mime_type"
              ],
              "return_type": "'FunctionResource'",
              "complexity": 6,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": [
            "Resource"
          ]
        },
        {
          "name": "FileResource",
          "file_path": "src/mcp/server/fastmcp/resources/types.py",
          "line_start": 97,
          "line_end": 137,
          "docstring": "A resource that reads from a file.\n\nSet is_binary=True to read file as binary data instead of text.",
          "methods": [
            {
              "name": "validate_absolute_path",
              "file_path": "src/mcp/server/fastmcp/resources/types.py",
              "line_start": 115,
              "line_end": 119,
              "docstring": "Ensure path is absolute.",
              "parameters": [
                "cls",
                "path"
              ],
              "return_type": "Path",
              "complexity": 2,
              "is_async": false
            },
            {
              "name": "set_binary_from_mime_type",
              "file_path": "src/mcp/server/fastmcp/resources/types.py",
              "line_start": 123,
              "line_end": 128,
              "docstring": "Set is_binary based on mime_type if not explicitly set.",
              "parameters": [
                "cls",
                "is_binary",
                "info"
              ],
              "return_type": "bool",
              "complexity": 2,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": [
            "Resource"
          ]
        },
        {
          "name": "HttpResource",
          "file_path": "src/mcp/server/fastmcp/resources/types.py",
          "line_start": 140,
          "line_end": 153,
          "docstring": "A resource that reads from an HTTP endpoint.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Resource"
          ]
        },
        {
          "name": "DirectoryResource",
          "file_path": "src/mcp/server/fastmcp/resources/types.py",
          "line_start": 156,
          "line_end": 207,
          "docstring": "A resource that lists files in a directory.",
          "methods": [
            {
              "name": "validate_absolute_path",
              "file_path": "src/mcp/server/fastmcp/resources/types.py",
              "line_start": 172,
              "line_end": 176,
              "docstring": "Ensure path is absolute.",
              "parameters": [
                "cls",
                "path"
              ],
              "return_type": "Path",
              "complexity": 2,
              "is_async": false
            },
            {
              "name": "list_files",
              "file_path": "src/mcp/server/fastmcp/resources/types.py",
              "line_start": 178,
              "line_end": 198,
              "docstring": "List files in the directory.",
              "parameters": [
                "self"
              ],
              "return_type": "list[Path]",
              "complexity": 5,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": [
            "Resource"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 208,
      "complexity_score": 3.4
    },
    {
      "name": "__init__",
      "path": "src/mcp/server/fastmcp/resources/__init__.py",
      "docstring": null,
      "imports": [
        "base.Resource",
        "resource_manager.ResourceManager",
        "templates.ResourceTemplate",
        "types.BinaryResource",
        "types.DirectoryResource",
        "types.FileResource",
        "types.FunctionResource",
        "types.HttpResource",
        "types.TextResource"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 24,
      "complexity_score": 0.0
    },
    {
      "name": "base",
      "path": "src/mcp/server/fastmcp/tools/base.py",
      "docstring": null,
      "imports": [
        "__future__.annotations",
        "functools",
        "inspect",
        "collections.abc.Callable",
        "typing.TYPE_CHECKING",
        "typing.Any",
        "typing.get_origin",
        "pydantic.BaseModel",
        "pydantic.Field",
        "mcp.server.fastmcp.exceptions.ToolError",
        "mcp.server.fastmcp.utilities.func_metadata.FuncMetadata",
        "mcp.server.fastmcp.utilities.func_metadata.func_metadata",
        "mcp.types.ToolAnnotations",
        "mcp.server.fastmcp.server.Context",
        "mcp.server.session.ServerSessionT",
        "mcp.shared.context.LifespanContextT",
        "mcp.shared.context.RequestT",
        "mcp.server.fastmcp.server.Context"
      ],
      "functions": [
        {
          "name": "_is_async_callable",
          "file_path": "src/mcp/server/fastmcp/tools/base.py",
          "line_start": 104,
          "line_end": 110,
          "docstring": null,
          "parameters": [
            "obj"
          ],
          "return_type": "bool",
          "complexity": 4,
          "is_async": false
        },
        {
          "name": "from_function",
          "file_path": "src/mcp/server/fastmcp/tools/base.py",
          "line_start": 40,
          "line_end": 83,
          "docstring": "Create a Tool from a function.",
          "parameters": [
            "cls",
            "fn",
            "name",
            "description",
            "context_kwarg",
            "annotations"
          ],
          "return_type": "Tool",
          "complexity": 9,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "Tool",
          "file_path": "src/mcp/server/fastmcp/tools/base.py",
          "line_start": 20,
          "line_end": 101,
          "docstring": "Internal tool registration info.",
          "methods": [
            {
              "name": "from_function",
              "file_path": "src/mcp/server/fastmcp/tools/base.py",
              "line_start": 40,
              "line_end": 83,
              "docstring": "Create a Tool from a function.",
              "parameters": [
                "cls",
                "fn",
                "name",
                "description",
                "context_kwarg",
                "annotations"
              ],
              "return_type": "Tool",
              "complexity": 9,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 111,
      "complexity_score": 6.5
    },
    {
      "name": "tool_manager",
      "path": "src/mcp/server/fastmcp/tools/tool_manager.py",
      "docstring": null,
      "imports": [
        "__future__.annotations",
        "collections.abc.Callable",
        "typing.TYPE_CHECKING",
        "typing.Any",
        "mcp.server.fastmcp.exceptions.ToolError",
        "mcp.server.fastmcp.tools.base.Tool",
        "mcp.server.fastmcp.utilities.logging.get_logger",
        "mcp.shared.context.LifespanContextT",
        "mcp.shared.context.RequestT",
        "mcp.types.ToolAnnotations",
        "mcp.server.fastmcp.server.Context",
        "mcp.server.session.ServerSessionT"
      ],
      "functions": [
        {
          "name": "__init__",
          "file_path": "src/mcp/server/fastmcp/tools/tool_manager.py",
          "line_start": 22,
          "line_end": 35,
          "docstring": null,
          "parameters": [
            "self",
            "warn_on_duplicate_tools"
          ],
          "return_type": null,
          "complexity": 5,
          "is_async": false
        },
        {
          "name": "get_tool",
          "file_path": "src/mcp/server/fastmcp/tools/tool_manager.py",
          "line_start": 37,
          "line_end": 39,
          "docstring": "Get tool by name.",
          "parameters": [
            "self",
            "name"
          ],
          "return_type": "Tool | None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "list_tools",
          "file_path": "src/mcp/server/fastmcp/tools/tool_manager.py",
          "line_start": 41,
          "line_end": 43,
          "docstring": "List all registered tools.",
          "parameters": [
            "self"
          ],
          "return_type": "list[Tool]",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "add_tool",
          "file_path": "src/mcp/server/fastmcp/tools/tool_manager.py",
          "line_start": 45,
          "line_end": 62,
          "docstring": "Add a tool to the server.",
          "parameters": [
            "self",
            "fn",
            "name",
            "description",
            "annotations"
          ],
          "return_type": "Tool",
          "complexity": 3,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "ToolManager",
          "file_path": "src/mcp/server/fastmcp/tools/tool_manager.py",
          "line_start": 19,
          "line_end": 75,
          "docstring": "Manages FastMCP tools.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/server/fastmcp/tools/tool_manager.py",
              "line_start": 22,
              "line_end": 35,
              "docstring": null,
              "parameters": [
                "self",
                "warn_on_duplicate_tools"
              ],
              "return_type": null,
              "complexity": 5,
              "is_async": false
            },
            {
              "name": "get_tool",
              "file_path": "src/mcp/server/fastmcp/tools/tool_manager.py",
              "line_start": 37,
              "line_end": 39,
              "docstring": "Get tool by name.",
              "parameters": [
                "self",
                "name"
              ],
              "return_type": "Tool | None",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "list_tools",
              "file_path": "src/mcp/server/fastmcp/tools/tool_manager.py",
              "line_start": 41,
              "line_end": 43,
              "docstring": "List all registered tools.",
              "parameters": [
                "self"
              ],
              "return_type": "list[Tool]",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "add_tool",
              "file_path": "src/mcp/server/fastmcp/tools/tool_manager.py",
              "line_start": 45,
              "line_end": 62,
              "docstring": "Add a tool to the server.",
              "parameters": [
                "self",
                "fn",
                "name",
                "description",
                "annotations"
              ],
              "return_type": "Tool",
              "complexity": 3,
              "is_async": false
            }
          ],
          "attributes": [
            "warn_on_duplicate_tools"
          ],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 76,
      "complexity_score": 2.5
    },
    {
      "name": "__init__",
      "path": "src/mcp/server/fastmcp/tools/__init__.py",
      "docstring": null,
      "imports": [
        "base.Tool",
        "tool_manager.ToolManager"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 5,
      "complexity_score": 0.0
    },
    {
      "name": "func_metadata",
      "path": "src/mcp/server/fastmcp/utilities/func_metadata.py",
      "docstring": null,
      "imports": [
        "inspect",
        "json",
        "collections.abc.Awaitable",
        "collections.abc.Callable",
        "collections.abc.Sequence",
        "typing.Annotated",
        "typing.Any",
        "typing.ForwardRef",
        "pydantic.BaseModel",
        "pydantic.ConfigDict",
        "pydantic.Field",
        "pydantic.WithJsonSchema",
        "pydantic.create_model",
        "pydantic._internal._typing_extra.eval_type_backport",
        "pydantic.fields.FieldInfo",
        "pydantic_core.PydanticUndefined",
        "mcp.server.fastmcp.exceptions.InvalidSignature",
        "mcp.server.fastmcp.utilities.logging.get_logger"
      ],
      "functions": [
        {
          "name": "func_metadata",
          "file_path": "src/mcp/server/fastmcp/utilities/func_metadata.py",
          "line_start": 105,
          "line_end": 176,
          "docstring": "Given a function, return metadata including a pydantic model representing its\nsignature.\n\nThe use case for this is\n```\nmeta = func_to_pyd(func)\nvalidated_args = meta.arg_model.model_validate(some_raw_data_dict)\nreturn func(**validated_args.model_dump_one_level())\n```\n\n**critically** it also provides pre-parse helper to attempt to parse things from\nJSON.\n\nArgs:\n    func: The function to convert to a pydantic model\n    skip_names: A list of parameter names to skip. These will not be included in\n        the model.\nReturns:\n    A pydantic model representing the function's signature.",
          "parameters": [
            "func",
            "skip_names"
          ],
          "return_type": "FuncMetadata",
          "complexity": 6,
          "is_async": false
        },
        {
          "name": "_get_typed_annotation",
          "file_path": "src/mcp/server/fastmcp/utilities/func_metadata.py",
          "line_start": 179,
          "line_end": 197,
          "docstring": null,
          "parameters": [
            "annotation",
            "globalns"
          ],
          "return_type": "Any",
          "complexity": 4,
          "is_async": false
        },
        {
          "name": "_get_typed_signature",
          "file_path": "src/mcp/server/fastmcp/utilities/func_metadata.py",
          "line_start": 200,
          "line_end": 214,
          "docstring": "Get function signature while evaluating forward references",
          "parameters": [
            "call"
          ],
          "return_type": "inspect.Signature",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "model_dump_one_level",
          "file_path": "src/mcp/server/fastmcp/utilities/func_metadata.py",
          "line_start": 24,
          "line_end": 32,
          "docstring": "Return a dict of the model's fields, one level deep.\n\nThat is, sub-models etc are not dumped - they are kept as pydantic models.",
          "parameters": [
            "self"
          ],
          "return_type": "dict[str, Any]",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "pre_parse_json",
          "file_path": "src/mcp/server/fastmcp/utilities/func_metadata.py",
          "line_start": 71,
          "line_end": 98,
          "docstring": "Pre-parse data from JSON.\n\nReturn a dict with same keys as input but with values parsed from JSON\nif appropriate.\n\nThis is to handle cases like `[\"a\", \"b\", \"c\"]` being passed in as JSON inside\na string rather than an actual list. Claude desktop is prone to this - in fact\nit seems incapable of NOT doing this. For sub-models, it tends to pass\ndicts (JSON objects) as JSON strings, which can be pre-parsed here.",
          "parameters": [
            "self",
            "data"
          ],
          "return_type": "dict[str, Any]",
          "complexity": 6,
          "is_async": false
        },
        {
          "name": "try_eval_type",
          "file_path": "src/mcp/server/fastmcp/utilities/func_metadata.py",
          "line_start": 180,
          "line_end": 186,
          "docstring": null,
          "parameters": [
            "value",
            "globalns",
            "localns"
          ],
          "return_type": "tuple[Any, bool]",
          "complexity": 2,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "ArgModelBase",
          "file_path": "src/mcp/server/fastmcp/utilities/func_metadata.py",
          "line_start": 21,
          "line_end": 36,
          "docstring": "A model representing the arguments to a function.",
          "methods": [
            {
              "name": "model_dump_one_level",
              "file_path": "src/mcp/server/fastmcp/utilities/func_metadata.py",
              "line_start": 24,
              "line_end": 32,
              "docstring": "Return a dict of the model's fields, one level deep.\n\nThat is, sub-models etc are not dumped - they are kept as pydantic models.",
              "parameters": [
                "self"
              ],
              "return_type": "dict[str, Any]",
              "complexity": 2,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "FuncMetadata",
          "file_path": "src/mcp/server/fastmcp/utilities/func_metadata.py",
          "line_start": 39,
          "line_end": 102,
          "docstring": null,
          "methods": [
            {
              "name": "pre_parse_json",
              "file_path": "src/mcp/server/fastmcp/utilities/func_metadata.py",
              "line_start": 71,
              "line_end": 98,
              "docstring": "Pre-parse data from JSON.\n\nReturn a dict with same keys as input but with values parsed from JSON\nif appropriate.\n\nThis is to handle cases like `[\"a\", \"b\", \"c\"]` being passed in as JSON inside\na string rather than an actual list. Claude desktop is prone to this - in fact\nit seems incapable of NOT doing this. For sub-models, it tends to pass\ndicts (JSON objects) as JSON strings, which can be pre-parsed here.",
              "parameters": [
                "self",
                "data"
              ],
              "return_type": "dict[str, Any]",
              "complexity": 6,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 215,
      "complexity_score": 3.6666666666666665
    },
    {
      "name": "logging",
      "path": "src/mcp/server/fastmcp/utilities/logging.py",
      "docstring": "Logging utilities for FastMCP.",
      "imports": [
        "logging",
        "typing.Literal",
        "rich.console.Console",
        "rich.logging.RichHandler"
      ],
      "functions": [
        {
          "name": "get_logger",
          "file_path": "src/mcp/server/fastmcp/utilities/logging.py",
          "line_start": 7,
          "line_end": 16,
          "docstring": "Get a logger nested under MCPnamespace.\n\nArgs:\n    name: the name of the logger, which will be prefixed with 'FastMCP.'\n\nReturns:\n    a configured logger instance",
          "parameters": [
            "name"
          ],
          "return_type": "logging.Logger",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "configure_logging",
          "file_path": "src/mcp/server/fastmcp/utilities/logging.py",
          "line_start": 19,
          "line_end": 43,
          "docstring": "Configure logging for MCP.\n\nArgs:\n    level: the log level to use",
          "parameters": [
            "level"
          ],
          "return_type": "None",
          "complexity": 3,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 44,
      "complexity_score": 2.0
    },
    {
      "name": "types",
      "path": "src/mcp/server/fastmcp/utilities/types.py",
      "docstring": "Common types used across FastMCP.",
      "imports": [
        "base64",
        "pathlib.Path",
        "mcp.types.ImageContent"
      ],
      "functions": [
        {
          "name": "__init__",
          "file_path": "src/mcp/server/fastmcp/utilities/types.py",
          "line_start": 12,
          "line_end": 26,
          "docstring": null,
          "parameters": [
            "self",
            "path",
            "data",
            "format"
          ],
          "return_type": null,
          "complexity": 5,
          "is_async": false
        },
        {
          "name": "_get_mime_type",
          "file_path": "src/mcp/server/fastmcp/utilities/types.py",
          "line_start": 28,
          "line_end": 42,
          "docstring": "Get MIME type from format or guess from file extension.",
          "parameters": [
            "self"
          ],
          "return_type": "str",
          "complexity": 3,
          "is_async": false
        },
        {
          "name": "to_image_content",
          "file_path": "src/mcp/server/fastmcp/utilities/types.py",
          "line_start": 44,
          "line_end": 54,
          "docstring": "Convert to MCP ImageContent.",
          "parameters": [
            "self"
          ],
          "return_type": "ImageContent",
          "complexity": 4,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "Image",
          "file_path": "src/mcp/server/fastmcp/utilities/types.py",
          "line_start": 9,
          "line_end": 54,
          "docstring": "Helper class for returning images from tools.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/server/fastmcp/utilities/types.py",
              "line_start": 12,
              "line_end": 26,
              "docstring": null,
              "parameters": [
                "self",
                "path",
                "data",
                "format"
              ],
              "return_type": null,
              "complexity": 5,
              "is_async": false
            },
            {
              "name": "_get_mime_type",
              "file_path": "src/mcp/server/fastmcp/utilities/types.py",
              "line_start": 28,
              "line_end": 42,
              "docstring": "Get MIME type from format or guess from file extension.",
              "parameters": [
                "self"
              ],
              "return_type": "str",
              "complexity": 3,
              "is_async": false
            },
            {
              "name": "to_image_content",
              "file_path": "src/mcp/server/fastmcp/utilities/types.py",
              "line_start": 44,
              "line_end": 54,
              "docstring": "Convert to MCP ImageContent.",
              "parameters": [
                "self"
              ],
              "return_type": "ImageContent",
              "complexity": 4,
              "is_async": false
            }
          ],
          "attributes": [
            "path",
            "data",
            "_format",
            "_mime_type"
          ],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 55,
      "complexity_score": 4.0
    },
    {
      "name": "__init__",
      "path": "src/mcp/server/fastmcp/utilities/__init__.py",
      "docstring": "FastMCP utility modules.",
      "imports": [],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 2,
      "complexity_score": 0.0
    },
    {
      "name": "helper_types",
      "path": "src/mcp/server/lowlevel/helper_types.py",
      "docstring": null,
      "imports": [
        "dataclasses.dataclass"
      ],
      "functions": [],
      "classes": [
        {
          "name": "ReadResourceContents",
          "file_path": "src/mcp/server/lowlevel/helper_types.py",
          "line_start": 5,
          "line_end": 9,
          "docstring": "Contents returned from a read_resource call.",
          "methods": [],
          "attributes": [],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 10,
      "complexity_score": 0.0
    },
    {
      "name": "server",
      "path": "src/mcp/server/lowlevel/server.py",
      "docstring": "MCP Server Module\n\nThis module provides a framework for creating an MCP (Model Context Protocol) server.\nIt allows you to easily define and handle various types of requests and notifications\nin an asynchronous manner.\n\nUsage:\n1. Create a Server instance:\n   server = Server(\"your_server_name\")\n\n2. Define request handlers using decorators:\n   @server.list_prompts()\n   async def handle_list_prompts() -> list[types.Prompt]:\n       # Implementation\n\n   @server.get_prompt()\n   async def handle_get_prompt(\n       name: str, arguments: dict[str, str] | None\n   ) -> types.GetPromptResult:\n       # Implementation\n\n   @server.list_tools()\n   async def handle_list_tools() -> list[types.Tool]:\n       # Implementation\n\n   @server.call_tool()\n   async def handle_call_tool(\n       name: str, arguments: dict | None\n   ) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:\n       # Implementation\n\n   @server.list_resource_templates()\n   async def handle_list_resource_templates() -> list[types.ResourceTemplate]:\n       # Implementation\n\n3. Define notification handlers if needed:\n   @server.progress_notification()\n   async def handle_progress(\n       progress_token: str | int, progress: float, total: float | None,\n       message: str | None\n   ) -> None:\n       # Implementation\n\n4. Run the server:\n   async def main():\n       async with mcp.server.stdio.stdio_server() as (read_stream, write_stream):\n           await server.run(\n               read_stream,\n               write_stream,\n               InitializationOptions(\n                   server_name=\"your_server_name\",\n                   server_version=\"your_version\",\n                   capabilities=server.get_capabilities(\n                       notification_options=NotificationOptions(),\n                       experimental_capabilities={},\n                   ),\n               ),\n           )\n\n   asyncio.run(main())\n\nThe Server class provides methods to register handlers for various MCP requests and\nnotifications. It automatically manages the request context and handles incoming\nmessages from the client.",
      "imports": [
        "__future__.annotations",
        "contextvars",
        "logging",
        "warnings",
        "collections.abc.AsyncIterator",
        "collections.abc.Awaitable",
        "collections.abc.Callable",
        "collections.abc.Iterable",
        "contextlib.AbstractAsyncContextManager",
        "contextlib.AsyncExitStack",
        "contextlib.asynccontextmanager",
        "typing.Any",
        "typing.Generic",
        "anyio",
        "anyio.streams.memory.MemoryObjectReceiveStream",
        "anyio.streams.memory.MemoryObjectSendStream",
        "pydantic.AnyUrl",
        "typing_extensions.TypeVar",
        "mcp.types",
        "mcp.server.lowlevel.helper_types.ReadResourceContents",
        "mcp.server.models.InitializationOptions",
        "mcp.server.session.ServerSession",
        "mcp.server.stdio.stdio_server",
        "mcp.shared.context.RequestContext",
        "mcp.shared.exceptions.McpError",
        "mcp.shared.message.ServerMessageMetadata",
        "mcp.shared.message.SessionMessage",
        "mcp.shared.session.RequestResponder",
        "importlib.metadata.version",
        "base64"
      ],
      "functions": [
        {
          "name": "__init__",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 104,
          "line_end": 112,
          "docstring": null,
          "parameters": [
            "self",
            "prompts_changed",
            "resources_changed",
            "tools_changed"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 129,
          "line_end": 150,
          "docstring": null,
          "parameters": [
            "self",
            "name",
            "version",
            "instructions",
            "lifespan"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "create_initialization_options",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 152,
          "line_end": 177,
          "docstring": "Create initialization options from this server instance.",
          "parameters": [
            "self",
            "notification_options",
            "experimental_capabilities"
          ],
          "return_type": "InitializationOptions",
          "complexity": 4,
          "is_async": false
        },
        {
          "name": "get_capabilities",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 179,
          "line_end": 218,
          "docstring": "Convert existing handlers to a ServerCapabilities object.",
          "parameters": [
            "self",
            "notification_options",
            "experimental_capabilities"
          ],
          "return_type": "types.ServerCapabilities",
          "complexity": 5,
          "is_async": false
        },
        {
          "name": "request_context",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 221,
          "line_end": 225,
          "docstring": "If called outside of a request context, this will raise a LookupError.",
          "parameters": [
            "self"
          ],
          "return_type": "RequestContext[ServerSession, LifespanResultT, RequestT]",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "list_prompts",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 227,
          "line_end": 238,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_prompt",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 240,
          "line_end": 255,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "list_resources",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 257,
          "line_end": 270,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "list_resource_templates",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 272,
          "line_end": 285,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "read_resource",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 287,
          "line_end": 348,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 4,
          "is_async": false
        },
        {
          "name": "set_logging_level",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 350,
          "line_end": 361,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "subscribe_resource",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 363,
          "line_end": 374,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "unsubscribe_resource",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 376,
          "line_end": 387,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "list_tools",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 389,
          "line_end": 400,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "call_tool",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 402,
          "line_end": 435,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 3,
          "is_async": false
        },
        {
          "name": "progress_notification",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 437,
          "line_end": 456,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "completion",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 458,
          "line_end": 485,
          "docstring": "Provides completions for prompts and resource templates",
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "pkg_version",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 159,
          "line_end": 167,
          "docstring": null,
          "parameters": [
            "package"
          ],
          "return_type": "str",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "decorator",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 228,
          "line_end": 236,
          "docstring": null,
          "parameters": [
            "func"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "decorator",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 241,
          "line_end": 253,
          "docstring": null,
          "parameters": [
            "func"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "decorator",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 258,
          "line_end": 268,
          "docstring": null,
          "parameters": [
            "func"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "decorator",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 273,
          "line_end": 283,
          "docstring": null,
          "parameters": [
            "func"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "decorator",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 288,
          "line_end": 346,
          "docstring": null,
          "parameters": [
            "func"
          ],
          "return_type": null,
          "complexity": 4,
          "is_async": false
        },
        {
          "name": "decorator",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 351,
          "line_end": 359,
          "docstring": null,
          "parameters": [
            "func"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "decorator",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 364,
          "line_end": 372,
          "docstring": null,
          "parameters": [
            "func"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "decorator",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 377,
          "line_end": 385,
          "docstring": null,
          "parameters": [
            "func"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "decorator",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 390,
          "line_end": 398,
          "docstring": null,
          "parameters": [
            "func"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "decorator",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 403,
          "line_end": 433,
          "docstring": null,
          "parameters": [
            "func"
          ],
          "return_type": null,
          "complexity": 3,
          "is_async": false
        },
        {
          "name": "decorator",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 438,
          "line_end": 454,
          "docstring": null,
          "parameters": [
            "func"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "decorator",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 461,
          "line_end": 483,
          "docstring": null,
          "parameters": [
            "func"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "create_content",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 298,
          "line_end": 313,
          "docstring": null,
          "parameters": [
            "data",
            "mime_type"
          ],
          "return_type": null,
          "complexity": 3,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "NotificationOptions",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 103,
          "line_end": 112,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/server/lowlevel/server.py",
              "line_start": 104,
              "line_end": 112,
              "docstring": null,
              "parameters": [
                "self",
                "prompts_changed",
                "resources_changed",
                "tools_changed"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "prompts_changed",
            "resources_changed",
            "tools_changed"
          ],
          "inheritance": []
        },
        {
          "name": "Server",
          "file_path": "src/mcp/server/lowlevel/server.py",
          "line_start": 128,
          "line_end": 615,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/server/lowlevel/server.py",
              "line_start": 129,
              "line_end": 150,
              "docstring": null,
              "parameters": [
                "self",
                "name",
                "version",
                "instructions",
                "lifespan"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "create_initialization_options",
              "file_path": "src/mcp/server/lowlevel/server.py",
              "line_start": 152,
              "line_end": 177,
              "docstring": "Create initialization options from this server instance.",
              "parameters": [
                "self",
                "notification_options",
                "experimental_capabilities"
              ],
              "return_type": "InitializationOptions",
              "complexity": 4,
              "is_async": false
            },
            {
              "name": "get_capabilities",
              "file_path": "src/mcp/server/lowlevel/server.py",
              "line_start": 179,
              "line_end": 218,
              "docstring": "Convert existing handlers to a ServerCapabilities object.",
              "parameters": [
                "self",
                "notification_options",
                "experimental_capabilities"
              ],
              "return_type": "types.ServerCapabilities",
              "complexity": 5,
              "is_async": false
            },
            {
              "name": "request_context",
              "file_path": "src/mcp/server/lowlevel/server.py",
              "line_start": 221,
              "line_end": 225,
              "docstring": "If called outside of a request context, this will raise a LookupError.",
              "parameters": [
                "self"
              ],
              "return_type": "RequestContext[ServerSession, LifespanResultT, RequestT]",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "list_prompts",
              "file_path": "src/mcp/server/lowlevel/server.py",
              "line_start": 227,
              "line_end": 238,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "get_prompt",
              "file_path": "src/mcp/server/lowlevel/server.py",
              "line_start": 240,
              "line_end": 255,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "list_resources",
              "file_path": "src/mcp/server/lowlevel/server.py",
              "line_start": 257,
              "line_end": 270,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "list_resource_templates",
              "file_path": "src/mcp/server/lowlevel/server.py",
              "line_start": 272,
              "line_end": 285,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "read_resource",
              "file_path": "src/mcp/server/lowlevel/server.py",
              "line_start": 287,
              "line_end": 348,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 4,
              "is_async": false
            },
            {
              "name": "set_logging_level",
              "file_path": "src/mcp/server/lowlevel/server.py",
              "line_start": 350,
              "line_end": 361,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "subscribe_resource",
              "file_path": "src/mcp/server/lowlevel/server.py",
              "line_start": 363,
              "line_end": 374,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "unsubscribe_resource",
              "file_path": "src/mcp/server/lowlevel/server.py",
              "line_start": 376,
              "line_end": 387,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "list_tools",
              "file_path": "src/mcp/server/lowlevel/server.py",
              "line_start": 389,
              "line_end": 400,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "call_tool",
              "file_path": "src/mcp/server/lowlevel/server.py",
              "line_start": 402,
              "line_end": 435,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 3,
              "is_async": false
            },
            {
              "name": "progress_notification",
              "file_path": "src/mcp/server/lowlevel/server.py",
              "line_start": 437,
              "line_end": 456,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "completion",
              "file_path": "src/mcp/server/lowlevel/server.py",
              "line_start": 458,
              "line_end": 485,
              "docstring": "Provides completions for prompts and resource templates",
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "name",
            "version",
            "instructions",
            "lifespan",
            "notification_options"
          ],
          "inheritance": [
            "Generic[LifespanResultT, RequestT]"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 620,
      "complexity_score": 1.6451612903225807
    },
    {
      "name": "__init__",
      "path": "src/mcp/server/lowlevel/__init__.py",
      "docstring": null,
      "imports": [
        "server.NotificationOptions",
        "server.Server"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 4,
      "complexity_score": 0.0
    },
    {
      "name": "auth",
      "path": "src/mcp/shared/auth.py",
      "docstring": null,
      "imports": [
        "typing.Any",
        "typing.Literal",
        "pydantic.AnyHttpUrl",
        "pydantic.AnyUrl",
        "pydantic.BaseModel",
        "pydantic.Field",
        "pydantic.field_validator"
      ],
      "functions": [
        {
          "name": "normalize_token_type",
          "file_path": "src/mcp/shared/auth.py",
          "line_start": 19,
          "line_end": 24,
          "docstring": null,
          "parameters": [
            "cls",
            "v"
          ],
          "return_type": "str | None",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "src/mcp/shared/auth.py",
          "line_start": 28,
          "line_end": 29,
          "docstring": null,
          "parameters": [
            "self",
            "message"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "src/mcp/shared/auth.py",
          "line_start": 33,
          "line_end": 34,
          "docstring": null,
          "parameters": [
            "self",
            "message"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "validate_scope",
          "file_path": "src/mcp/shared/auth.py",
          "line_start": 73,
          "line_end": 81,
          "docstring": null,
          "parameters": [
            "self",
            "requested_scope"
          ],
          "return_type": "list[str] | None",
          "complexity": 4,
          "is_async": false
        },
        {
          "name": "validate_redirect_uri",
          "file_path": "src/mcp/shared/auth.py",
          "line_start": 83,
          "line_end": 97,
          "docstring": null,
          "parameters": [
            "self",
            "redirect_uri"
          ],
          "return_type": "AnyUrl",
          "complexity": 4,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "OAuthToken",
          "file_path": "src/mcp/shared/auth.py",
          "line_start": 6,
          "line_end": 24,
          "docstring": "See https://datatracker.ietf.org/doc/html/rfc6749#section-5.1",
          "methods": [
            {
              "name": "normalize_token_type",
              "file_path": "src/mcp/shared/auth.py",
              "line_start": 19,
              "line_end": 24,
              "docstring": null,
              "parameters": [
                "cls",
                "v"
              ],
              "return_type": "str | None",
              "complexity": 2,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "InvalidScopeError",
          "file_path": "src/mcp/shared/auth.py",
          "line_start": 27,
          "line_end": 29,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/shared/auth.py",
              "line_start": 28,
              "line_end": 29,
              "docstring": null,
              "parameters": [
                "self",
                "message"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "message"
          ],
          "inheritance": [
            "Exception"
          ]
        },
        {
          "name": "InvalidRedirectUriError",
          "file_path": "src/mcp/shared/auth.py",
          "line_start": 32,
          "line_end": 34,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/shared/auth.py",
              "line_start": 33,
              "line_end": 34,
              "docstring": null,
              "parameters": [
                "self",
                "message"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "message"
          ],
          "inheritance": [
            "Exception"
          ]
        },
        {
          "name": "OAuthClientMetadata",
          "file_path": "src/mcp/shared/auth.py",
          "line_start": 37,
          "line_end": 97,
          "docstring": "RFC 7591 OAuth 2.0 Dynamic Client Registration metadata.\nSee https://datatracker.ietf.org/doc/html/rfc7591#section-2\nfor the full specification.",
          "methods": [
            {
              "name": "validate_scope",
              "file_path": "src/mcp/shared/auth.py",
              "line_start": 73,
              "line_end": 81,
              "docstring": null,
              "parameters": [
                "self",
                "requested_scope"
              ],
              "return_type": "list[str] | None",
              "complexity": 4,
              "is_async": false
            },
            {
              "name": "validate_redirect_uri",
              "file_path": "src/mcp/shared/auth.py",
              "line_start": 83,
              "line_end": 97,
              "docstring": null,
              "parameters": [
                "self",
                "redirect_uri"
              ],
              "return_type": "AnyUrl",
              "complexity": 4,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "OAuthClientInformationFull",
          "file_path": "src/mcp/shared/auth.py",
          "line_start": 100,
          "line_end": 109,
          "docstring": "RFC 7591 OAuth 2.0 Dynamic Client Registration full response\n(client information plus metadata).",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "OAuthClientMetadata"
          ]
        },
        {
          "name": "OAuthMetadata",
          "file_path": "src/mcp/shared/auth.py",
          "line_start": 112,
          "line_end": 138,
          "docstring": "RFC 8414 OAuth 2.0 Authorization Server Metadata.\nSee https://datatracker.ietf.org/doc/html/rfc8414#section-2",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 139,
      "complexity_score": 2.4
    },
    {
      "name": "context",
      "path": "src/mcp/shared/context.py",
      "docstring": null,
      "imports": [
        "dataclasses.dataclass",
        "typing.Any",
        "typing.Generic",
        "typing_extensions.TypeVar",
        "mcp.shared.session.BaseSession",
        "mcp.types.RequestId",
        "mcp.types.RequestParams"
      ],
      "functions": [],
      "classes": [
        {
          "name": "RequestContext",
          "file_path": "src/mcp/shared/context.py",
          "line_start": 15,
          "line_end": 20,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Generic[SessionT, LifespanContextT, RequestT]"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 21,
      "complexity_score": 0.0
    },
    {
      "name": "exceptions",
      "path": "src/mcp/shared/exceptions.py",
      "docstring": null,
      "imports": [
        "mcp.types.ErrorData"
      ],
      "functions": [
        {
          "name": "__init__",
          "file_path": "src/mcp/shared/exceptions.py",
          "line_start": 11,
          "line_end": 14,
          "docstring": "Initialize McpError.",
          "parameters": [
            "self",
            "error"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "McpError",
          "file_path": "src/mcp/shared/exceptions.py",
          "line_start": 4,
          "line_end": 14,
          "docstring": "Exception type raised when an error arrives over an MCP connection.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/shared/exceptions.py",
              "line_start": 11,
              "line_end": 14,
              "docstring": "Initialize McpError.",
              "parameters": [
                "self",
                "error"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "error"
          ],
          "inheritance": [
            "Exception"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 15,
      "complexity_score": 1.0
    },
    {
      "name": "memory",
      "path": "src/mcp/shared/memory.py",
      "docstring": "In-memory transports",
      "imports": [
        "collections.abc.AsyncGenerator",
        "contextlib.asynccontextmanager",
        "datetime.timedelta",
        "typing.Any",
        "anyio",
        "anyio.streams.memory.MemoryObjectReceiveStream",
        "anyio.streams.memory.MemoryObjectSendStream",
        "mcp.types",
        "mcp.client.session.ClientSession",
        "mcp.client.session.ListRootsFnT",
        "mcp.client.session.LoggingFnT",
        "mcp.client.session.MessageHandlerFnT",
        "mcp.client.session.SamplingFnT",
        "mcp.server.Server",
        "mcp.shared.message.SessionMessage"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 106,
      "complexity_score": 0.0
    },
    {
      "name": "message",
      "path": "src/mcp/shared/message.py",
      "docstring": "Message wrapper with metadata support.\n\nThis module defines a wrapper type that combines JSONRPCMessage with metadata\nto support transport-specific features like resumability.",
      "imports": [
        "collections.abc.Awaitable",
        "collections.abc.Callable",
        "dataclasses.dataclass",
        "mcp.types.JSONRPCMessage",
        "mcp.types.RequestId"
      ],
      "functions": [],
      "classes": [
        {
          "name": "ClientMessageMetadata",
          "file_path": "src/mcp/shared/message.py",
          "line_start": 19,
          "line_end": 25,
          "docstring": "Metadata specific to client messages.",
          "methods": [],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "ServerMessageMetadata",
          "file_path": "src/mcp/shared/message.py",
          "line_start": 29,
          "line_end": 34,
          "docstring": "Metadata specific to server messages.",
          "methods": [],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "SessionMessage",
          "file_path": "src/mcp/shared/message.py",
          "line_start": 41,
          "line_end": 45,
          "docstring": "A message with specific metadata for transport-specific features.",
          "methods": [],
          "attributes": [],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 46,
      "complexity_score": 0.0
    },
    {
      "name": "progress",
      "path": "src/mcp/shared/progress.py",
      "docstring": null,
      "imports": [
        "collections.abc.Generator",
        "contextlib.contextmanager",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Generic",
        "pydantic.BaseModel",
        "mcp.shared.context.LifespanContextT",
        "mcp.shared.context.RequestContext",
        "mcp.shared.session.BaseSession",
        "mcp.shared.session.ReceiveNotificationT",
        "mcp.shared.session.ReceiveRequestT",
        "mcp.shared.session.SendNotificationT",
        "mcp.shared.session.SendRequestT",
        "mcp.shared.session.SendResultT",
        "mcp.types.ProgressToken"
      ],
      "functions": [
        {
          "name": "progress",
          "file_path": "src/mcp/shared/progress.py",
          "line_start": 55,
          "line_end": 84,
          "docstring": null,
          "parameters": [
            "ctx",
            "total"
          ],
          "return_type": "Generator[ProgressContext[SendRequestT, SendNotificationT, SendResultT, ReceiveRequestT, ReceiveNotificationT], None]",
          "complexity": 4,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "Progress",
          "file_path": "src/mcp/shared/progress.py",
          "line_start": 20,
          "line_end": 22,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "ProgressContext",
          "file_path": "src/mcp/shared/progress.py",
          "line_start": 26,
          "line_end": 51,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Generic[SendRequestT, SendNotificationT, SendResultT, ReceiveRequestT, ReceiveNotificationT]"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 85,
      "complexity_score": 4.0
    },
    {
      "name": "session",
      "path": "src/mcp/shared/session.py",
      "docstring": null,
      "imports": [
        "logging",
        "collections.abc.Callable",
        "contextlib.AsyncExitStack",
        "datetime.timedelta",
        "types.TracebackType",
        "typing.Any",
        "typing.Generic",
        "typing.Protocol",
        "typing.TypeVar",
        "anyio",
        "httpx",
        "anyio.streams.memory.MemoryObjectReceiveStream",
        "anyio.streams.memory.MemoryObjectSendStream",
        "pydantic.BaseModel",
        "typing_extensions.Self",
        "mcp.shared.exceptions.McpError",
        "mcp.shared.message.MessageMetadata",
        "mcp.shared.message.ServerMessageMetadata",
        "mcp.shared.message.SessionMessage",
        "mcp.types.CONNECTION_CLOSED",
        "mcp.types.INVALID_PARAMS",
        "mcp.types.CancelledNotification",
        "mcp.types.ClientNotification",
        "mcp.types.ClientRequest",
        "mcp.types.ClientResult",
        "mcp.types.ErrorData",
        "mcp.types.JSONRPCError",
        "mcp.types.JSONRPCMessage",
        "mcp.types.JSONRPCNotification",
        "mcp.types.JSONRPCRequest",
        "mcp.types.JSONRPCResponse",
        "mcp.types.ProgressNotification",
        "mcp.types.RequestParams",
        "mcp.types.ServerNotification",
        "mcp.types.ServerRequest",
        "mcp.types.ServerResult"
      ],
      "functions": [
        {
          "name": "__init__",
          "file_path": "src/mcp/shared/session.py",
          "line_start": 72,
          "line_end": 95,
          "docstring": null,
          "parameters": [
            "self",
            "request_id",
            "request_meta",
            "request",
            "session",
            "on_complete",
            "message_metadata"
          ],
          "return_type": "None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__enter__",
          "file_path": "src/mcp/shared/session.py",
          "line_start": 97,
          "line_end": 102,
          "docstring": "Enter the context manager, enabling request cancellation tracking.",
          "parameters": [
            "self"
          ],
          "return_type": "'RequestResponder[ReceiveRequestT, SendResultT]'",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__exit__",
          "file_path": "src/mcp/shared/session.py",
          "line_start": 104,
          "line_end": 118,
          "docstring": "Exit the context manager, performing cleanup and notifying completion.",
          "parameters": [
            "self",
            "exc_type",
            "exc_val",
            "exc_tb"
          ],
          "return_type": "None",
          "complexity": 4,
          "is_async": false
        },
        {
          "name": "in_flight",
          "file_path": "src/mcp/shared/session.py",
          "line_start": 155,
          "line_end": 156,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": "bool",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "cancelled",
          "file_path": "src/mcp/shared/session.py",
          "line_start": 159,
          "line_end": 160,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": "bool",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "src/mcp/shared/session.py",
          "line_start": 187,
          "line_end": 205,
          "docstring": null,
          "parameters": [
            "self",
            "read_stream",
            "write_stream",
            "receive_request_type",
            "receive_notification_type",
            "read_timeout_seconds"
          ],
          "return_type": "None",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "ProgressFnT",
          "file_path": "src/mcp/shared/session.py",
          "line_start": 48,
          "line_end": 53,
          "docstring": "Protocol for progress notification callbacks.",
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Protocol"
          ]
        },
        {
          "name": "RequestResponder",
          "file_path": "src/mcp/shared/session.py",
          "line_start": 56,
          "line_end": 160,
          "docstring": "Handles responding to MCP requests and manages request lifecycle.\n\nThis class MUST be used as a context manager to ensure proper cleanup and\ncancellation handling:\n\nExample:\n    with request_responder as resp:\n        await resp.respond(result)\n\nThe context manager ensures:\n1. Proper cancellation scope setup and cleanup\n2. Request completion tracking\n3. Cleanup of in-flight requests",
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/shared/session.py",
              "line_start": 72,
              "line_end": 95,
              "docstring": null,
              "parameters": [
                "self",
                "request_id",
                "request_meta",
                "request",
                "session",
                "on_complete",
                "message_metadata"
              ],
              "return_type": "None",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "__enter__",
              "file_path": "src/mcp/shared/session.py",
              "line_start": 97,
              "line_end": 102,
              "docstring": "Enter the context manager, enabling request cancellation tracking.",
              "parameters": [
                "self"
              ],
              "return_type": "'RequestResponder[ReceiveRequestT, SendResultT]'",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "__exit__",
              "file_path": "src/mcp/shared/session.py",
              "line_start": 104,
              "line_end": 118,
              "docstring": "Exit the context manager, performing cleanup and notifying completion.",
              "parameters": [
                "self",
                "exc_type",
                "exc_val",
                "exc_tb"
              ],
              "return_type": "None",
              "complexity": 4,
              "is_async": false
            },
            {
              "name": "in_flight",
              "file_path": "src/mcp/shared/session.py",
              "line_start": 155,
              "line_end": 156,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": "bool",
              "complexity": 2,
              "is_async": false
            },
            {
              "name": "cancelled",
              "file_path": "src/mcp/shared/session.py",
              "line_start": 159,
              "line_end": 160,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": "bool",
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "request_id",
            "request_meta",
            "request",
            "message_metadata",
            "_session",
            "_completed",
            "_cancel_scope",
            "_on_complete",
            "_entered"
          ],
          "inheritance": [
            "Generic[ReceiveRequestT, SendResultT]"
          ]
        },
        {
          "name": "BaseSession",
          "file_path": "src/mcp/shared/session.py",
          "line_start": 163,
          "line_end": 489,
          "docstring": "Implements an MCP \"session\" on top of read/write streams, including features\nlike request/response linking, notifications, and progress.\n\nThis class is an async context manager that automatically starts processing\nmessages when entered.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "src/mcp/shared/session.py",
              "line_start": 187,
              "line_end": 205,
              "docstring": null,
              "parameters": [
                "self",
                "read_stream",
                "write_stream",
                "receive_request_type",
                "receive_notification_type",
                "read_timeout_seconds"
              ],
              "return_type": "None",
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "_read_stream",
            "_write_stream",
            "_response_streams",
            "_request_id",
            "_receive_request_type",
            "_receive_notification_type",
            "_session_read_timeout_seconds",
            "_in_flight",
            "_progress_callbacks",
            "_exit_stack"
          ],
          "inheritance": [
            "Generic[SendRequestT, SendNotificationT, SendResultT, ReceiveRequestT, ReceiveNotificationT]"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 490,
      "complexity_score": 1.6666666666666667
    },
    {
      "name": "version",
      "path": "src/mcp/shared/version.py",
      "docstring": null,
      "imports": [
        "mcp.types.LATEST_PROTOCOL_VERSION"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 4,
      "complexity_score": 0.0
    },
    {
      "name": "_httpx_utils",
      "path": "src/mcp/shared/_httpx_utils.py",
      "docstring": "Utilities for creating standardized httpx AsyncClient instances.",
      "imports": [
        "typing.Any",
        "typing.Protocol",
        "httpx"
      ],
      "functions": [
        {
          "name": "create_mcp_http_client",
          "file_path": "src/mcp/shared/_httpx_utils.py",
          "line_start": 19,
          "line_end": 83,
          "docstring": "Create a standardized httpx AsyncClient with MCP defaults.\n\nThis function provides common defaults used throughout the MCP codebase:\n- follow_redirects=True (always enabled)\n- Default timeout of 30 seconds if not specified\n\nArgs:\n    headers: Optional headers to include with all requests.\n    timeout: Request timeout as httpx.Timeout object.\n        Defaults to 30 seconds if not specified.\n    auth: Optional authentication handler.\n\nReturns:\n    Configured httpx.AsyncClient instance with MCP defaults.\n\nNote:\n    The returned AsyncClient must be used as a context manager to ensure\n    proper cleanup of connections.\n\nExamples:\n    # Basic usage with MCP defaults\n    async with create_mcp_http_client() as client:\n        response = await client.get(\"https://api.example.com\")\n\n    # With custom headers\n    headers = {\"Authorization\": \"Bearer token\"}\n    async with create_mcp_http_client(headers) as client:\n        response = await client.get(\"/endpoint\")\n\n    # With both custom headers and timeout\n    timeout = httpx.Timeout(60.0, read=300.0)\n    async with create_mcp_http_client(headers, timeout) as client:\n        response = await client.get(\"/long-request\")\n\n    # With authentication\n    from httpx import BasicAuth\n    auth = BasicAuth(username=\"user\", password=\"pass\")\n    async with create_mcp_http_client(headers, timeout, auth) as client:\n        response = await client.get(\"/protected-endpoint\")",
          "parameters": [
            "headers",
            "timeout",
            "auth"
          ],
          "return_type": "httpx.AsyncClient",
          "complexity": 4,
          "is_async": false
        },
        {
          "name": "__call__",
          "file_path": "src/mcp/shared/_httpx_utils.py",
          "line_start": 11,
          "line_end": 16,
          "docstring": null,
          "parameters": [
            "self",
            "headers",
            "timeout",
            "auth"
          ],
          "return_type": "httpx.AsyncClient",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "McpHttpClientFactory",
          "file_path": "src/mcp/shared/_httpx_utils.py",
          "line_start": 10,
          "line_end": 16,
          "docstring": null,
          "methods": [
            {
              "name": "__call__",
              "file_path": "src/mcp/shared/_httpx_utils.py",
              "line_start": 11,
              "line_end": 16,
              "docstring": null,
              "parameters": [
                "self",
                "headers",
                "timeout",
                "auth"
              ],
              "return_type": "httpx.AsyncClient",
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": [
            "Protocol"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 84,
      "complexity_score": 2.5
    },
    {
      "name": "conftest",
      "path": "tests/conftest.py",
      "docstring": null,
      "imports": [
        "pytest"
      ],
      "functions": [
        {
          "name": "anyio_backend",
          "file_path": "tests/conftest.py",
          "line_start": 5,
          "line_end": 6,
          "docstring": null,
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 7,
      "complexity_score": 1.0
    },
    {
      "name": "test_examples",
      "path": "tests/test_examples.py",
      "docstring": "Tests for example servers",
      "imports": [
        "sys",
        "pytest",
        "pytest_examples.CodeExample",
        "pytest_examples.EvalExample",
        "pytest_examples.find_examples",
        "mcp.shared.memory.create_connected_server_and_client_session",
        "mcp.types.TextContent",
        "mcp.types.TextResourceContents",
        "examples.fastmcp.simple_echo.mcp",
        "examples.fastmcp.complex_inputs.mcp",
        "pathlib.Path",
        "pydantic.AnyUrl",
        "examples.fastmcp.desktop.mcp"
      ],
      "functions": [
        {
          "name": "test_docs_examples",
          "file_path": "tests/test_examples.py",
          "line_start": 86,
          "line_end": 96,
          "docstring": null,
          "parameters": [
            "example",
            "eval_example"
          ],
          "return_type": null,
          "complexity": 2,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 97,
      "complexity_score": 2.0
    },
    {
      "name": "test_types",
      "path": "tests/test_types.py",
      "docstring": null,
      "imports": [
        "pytest",
        "mcp.types.LATEST_PROTOCOL_VERSION",
        "mcp.types.ClientRequest",
        "mcp.types.JSONRPCMessage",
        "mcp.types.JSONRPCRequest"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 33,
      "complexity_score": 0.0
    },
    {
      "name": "conftest",
      "path": "tests/client/conftest.py",
      "docstring": null,
      "imports": [
        "contextlib.asynccontextmanager",
        "unittest.mock.patch",
        "pytest",
        "mcp.shared.memory",
        "mcp.shared.message.SessionMessage",
        "mcp.types.JSONRPCNotification",
        "mcp.types.JSONRPCRequest"
      ],
      "functions": [
        {
          "name": "stream_spy",
          "file_path": "tests/client/conftest.py",
          "line_start": 89,
          "line_end": 145,
          "docstring": "Fixture that provides spies for both client and server write streams.\n\nExample usage:\n    async def test_something(stream_spy):\n        # ... set up server and client ...\n\n        spies = stream_spy()\n\n        # Run some operation that sends messages\n        await client.some_operation()\n\n        # Check the messages\n        requests = spies.get_client_requests(method=\"some/method\")\n        assert len(requests) == 1\n\n        # Clear for the next operation\n        spies.clear()",
          "parameters": [],
          "return_type": null,
          "complexity": 3,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "tests/client/conftest.py",
          "line_start": 15,
          "line_end": 17,
          "docstring": null,
          "parameters": [
            "self",
            "original_stream"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "tests/client/conftest.py",
          "line_start": 34,
          "line_end": 40,
          "docstring": null,
          "parameters": [
            "self",
            "client_spy",
            "server_spy"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "clear",
          "file_path": "tests/client/conftest.py",
          "line_start": 42,
          "line_end": 45,
          "docstring": "Clear all captured messages.",
          "parameters": [
            "self"
          ],
          "return_type": "None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_client_requests",
          "file_path": "tests/client/conftest.py",
          "line_start": 47,
          "line_end": 54,
          "docstring": "Get client-sent requests, optionally filtered by method.",
          "parameters": [
            "self",
            "method"
          ],
          "return_type": "list[JSONRPCRequest]",
          "complexity": 4,
          "is_async": false
        },
        {
          "name": "get_server_requests",
          "file_path": "tests/client/conftest.py",
          "line_start": 56,
          "line_end": 63,
          "docstring": "Get server-sent requests, optionally filtered by method.",
          "parameters": [
            "self",
            "method"
          ],
          "return_type": "list[JSONRPCRequest]",
          "complexity": 4,
          "is_async": false
        },
        {
          "name": "get_client_notifications",
          "file_path": "tests/client/conftest.py",
          "line_start": 65,
          "line_end": 74,
          "docstring": "Get client-sent notifications, optionally filtered by method.",
          "parameters": [
            "self",
            "method"
          ],
          "return_type": "list[JSONRPCNotification]",
          "complexity": 4,
          "is_async": false
        },
        {
          "name": "get_server_notifications",
          "file_path": "tests/client/conftest.py",
          "line_start": 76,
          "line_end": 85,
          "docstring": "Get server-sent notifications, optionally filtered by method.",
          "parameters": [
            "self",
            "method"
          ],
          "return_type": "list[JSONRPCNotification]",
          "complexity": 4,
          "is_async": false
        },
        {
          "name": "capture_spies",
          "file_path": "tests/client/conftest.py",
          "line_start": 112,
          "line_end": 115,
          "docstring": null,
          "parameters": [
            "c_spy",
            "s_spy"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_spy_collection",
          "file_path": "tests/client/conftest.py",
          "line_start": 140,
          "line_end": 143,
          "docstring": null,
          "parameters": [],
          "return_type": "StreamSpyCollection",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "SpyMemoryObjectSendStream",
          "file_path": "tests/client/conftest.py",
          "line_start": 14,
          "line_end": 30,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "file_path": "tests/client/conftest.py",
              "line_start": 15,
              "line_end": 17,
              "docstring": null,
              "parameters": [
                "self",
                "original_stream"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "original_stream"
          ],
          "inheritance": []
        },
        {
          "name": "StreamSpyCollection",
          "file_path": "tests/client/conftest.py",
          "line_start": 33,
          "line_end": 85,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "file_path": "tests/client/conftest.py",
              "line_start": 34,
              "line_end": 40,
              "docstring": null,
              "parameters": [
                "self",
                "client_spy",
                "server_spy"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "clear",
              "file_path": "tests/client/conftest.py",
              "line_start": 42,
              "line_end": 45,
              "docstring": "Clear all captured messages.",
              "parameters": [
                "self"
              ],
              "return_type": "None",
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "get_client_requests",
              "file_path": "tests/client/conftest.py",
              "line_start": 47,
              "line_end": 54,
              "docstring": "Get client-sent requests, optionally filtered by method.",
              "parameters": [
                "self",
                "method"
              ],
              "return_type": "list[JSONRPCRequest]",
              "complexity": 4,
              "is_async": false
            },
            {
              "name": "get_server_requests",
              "file_path": "tests/client/conftest.py",
              "line_start": 56,
              "line_end": 63,
              "docstring": "Get server-sent requests, optionally filtered by method.",
              "parameters": [
                "self",
                "method"
              ],
              "return_type": "list[JSONRPCRequest]",
              "complexity": 4,
              "is_async": false
            },
            {
              "name": "get_client_notifications",
              "file_path": "tests/client/conftest.py",
              "line_start": 65,
              "line_end": 74,
              "docstring": "Get client-sent notifications, optionally filtered by method.",
              "parameters": [
                "self",
                "method"
              ],
              "return_type": "list[JSONRPCNotification]",
              "complexity": 4,
              "is_async": false
            },
            {
              "name": "get_server_notifications",
              "file_path": "tests/client/conftest.py",
              "line_start": 76,
              "line_end": 85,
              "docstring": "Get server-sent notifications, optionally filtered by method.",
              "parameters": [
                "self",
                "method"
              ],
              "return_type": "list[JSONRPCNotification]",
              "complexity": 4,
              "is_async": false
            }
          ],
          "attributes": [
            "client",
            "server"
          ],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 146,
      "complexity_score": 2.4
    },
    {
      "name": "test_auth",
      "path": "tests/client/test_auth.py",
      "docstring": "Tests for OAuth client authentication implementation.",
      "imports": [
        "base64",
        "hashlib",
        "time",
        "unittest.mock.AsyncMock",
        "unittest.mock.Mock",
        "unittest.mock.patch",
        "urllib.parse.parse_qs",
        "urllib.parse.urlparse",
        "httpx",
        "pytest",
        "inline_snapshot.snapshot",
        "pydantic.AnyHttpUrl",
        "pydantic.AnyUrl",
        "mcp.client.auth.OAuthClientProvider",
        "mcp.server.auth.routes.build_metadata",
        "mcp.server.auth.settings.ClientRegistrationOptions",
        "mcp.server.auth.settings.RevocationOptions",
        "mcp.shared.auth.OAuthClientInformationFull",
        "mcp.shared.auth.OAuthClientMetadata",
        "mcp.shared.auth.OAuthMetadata",
        "mcp.shared.auth.OAuthToken"
      ],
      "functions": [
        {
          "name": "mock_storage",
          "file_path": "tests/client/test_auth.py",
          "line_start": 48,
          "line_end": 49,
          "docstring": null,
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "client_metadata",
          "file_path": "tests/client/test_auth.py",
          "line_start": 53,
          "line_end": 60,
          "docstring": null,
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "oauth_metadata",
          "file_path": "tests/client/test_auth.py",
          "line_start": 64,
          "line_end": 74,
          "docstring": null,
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "oauth_client_info",
          "file_path": "tests/client/test_auth.py",
          "line_start": 78,
          "line_end": 87,
          "docstring": null,
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "oauth_token",
          "file_path": "tests/client/test_auth.py",
          "line_start": 91,
          "line_end": 98,
          "docstring": null,
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_build_metadata",
          "file_path": "tests/client/test_auth.py",
          "line_start": 960,
          "line_end": 991,
          "docstring": null,
          "parameters": [
            "issuer_url",
            "service_documentation_url",
            "authorization_endpoint",
            "token_endpoint",
            "registration_endpoint",
            "revocation_endpoint"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "tests/client/test_auth.py",
          "line_start": 30,
          "line_end": 32,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_generate_code_verifier",
          "file_path": "tests/client/test_auth.py",
          "line_start": 129,
          "line_end": 144,
          "docstring": "Test PKCE code verifier generation.",
          "parameters": [
            "self",
            "oauth_provider"
          ],
          "return_type": null,
          "complexity": 2,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "MockTokenStorage",
          "file_path": "tests/client/test_auth.py",
          "line_start": 27,
          "line_end": 44,
          "docstring": "Mock token storage for testing.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "tests/client/test_auth.py",
              "line_start": 30,
              "line_end": 32,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "TestOAuthClientProvider",
          "file_path": "tests/client/test_auth.py",
          "line_start": 118,
          "line_end": 918,
          "docstring": "Test OAuth client provider functionality.",
          "methods": [
            {
              "name": "test_generate_code_verifier",
              "file_path": "tests/client/test_auth.py",
              "line_start": 129,
              "line_end": 144,
              "docstring": "Test PKCE code verifier generation.",
              "parameters": [
                "self",
                "oauth_provider"
              ],
              "return_type": null,
              "complexity": 2,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 992,
      "complexity_score": 1.125
    },
    {
      "name": "test_config",
      "path": "tests/client/test_config.py",
      "docstring": null,
      "imports": [
        "json",
        "subprocess",
        "pathlib.Path",
        "unittest.mock.patch",
        "pytest",
        "mcp.cli.claude.update_claude_config"
      ],
      "functions": [
        {
          "name": "temp_config_dir",
          "file_path": "tests/client/test_config.py",
          "line_start": 12,
          "line_end": 16,
          "docstring": "Create a temporary Claude config directory.",
          "parameters": [
            "tmp_path"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "mock_config_path",
          "file_path": "tests/client/test_config.py",
          "line_start": 20,
          "line_end": 23,
          "docstring": "Mock get_claude_config_path to return our temporary directory.",
          "parameters": [
            "temp_config_dir"
          ],
          "return_type": null,
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "test_command_execution",
          "file_path": "tests/client/test_config.py",
          "line_start": 26,
          "line_end": 52,
          "docstring": "Test that the generated command can actually be executed.",
          "parameters": [
            "mock_config_path"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_absolute_uv_path",
          "file_path": "tests/client/test_config.py",
          "line_start": 55,
          "line_end": 77,
          "docstring": "Test that the absolute path to uv is used when available.",
          "parameters": [
            "mock_config_path"
          ],
          "return_type": null,
          "complexity": 2,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 78,
      "complexity_score": 1.5
    },
    {
      "name": "test_list_methods_cursor",
      "path": "tests/client/test_list_methods_cursor.py",
      "docstring": null,
      "imports": [
        "pytest",
        "mcp.server.fastmcp.FastMCP",
        "mcp.shared.memory.create_connected_server_and_client_session"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 222,
      "complexity_score": 0.0
    },
    {
      "name": "test_list_roots_callback",
      "path": "tests/client/test_list_roots_callback.py",
      "docstring": null,
      "imports": [
        "pytest",
        "pydantic.FileUrl",
        "mcp.client.session.ClientSession",
        "mcp.server.fastmcp.server.Context",
        "mcp.shared.context.RequestContext",
        "mcp.shared.memory.create_connected_server_and_client_session",
        "mcp.types.ListRootsResult",
        "mcp.types.Root",
        "mcp.types.TextContent",
        "mcp.server.fastmcp.FastMCP"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 67,
      "complexity_score": 0.0
    },
    {
      "name": "test_logging_callback",
      "path": "tests/client/test_logging_callback.py",
      "docstring": null,
      "imports": [
        "typing.Literal",
        "pytest",
        "mcp.types",
        "mcp.shared.memory.create_connected_server_and_client_session",
        "mcp.shared.session.RequestResponder",
        "mcp.types.LoggingMessageNotificationParams",
        "mcp.types.TextContent",
        "mcp.server.fastmcp.FastMCP"
      ],
      "functions": [
        {
          "name": "__init__",
          "file_path": "tests/client/test_logging_callback.py",
          "line_start": 17,
          "line_end": 18,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "LoggingCollector",
          "file_path": "tests/client/test_logging_callback.py",
          "line_start": 16,
          "line_end": 21,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "file_path": "tests/client/test_logging_callback.py",
              "line_start": 17,
              "line_end": 18,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 86,
      "complexity_score": 1.0
    },
    {
      "name": "test_resource_cleanup",
      "path": "tests/client/test_resource_cleanup.py",
      "docstring": null,
      "imports": [
        "unittest.mock.patch",
        "anyio",
        "pytest",
        "mcp.shared.session.BaseSession",
        "mcp.types.ClientRequest",
        "mcp.types.EmptyResult",
        "mcp.types.PingRequest"
      ],
      "functions": [],
      "classes": [
        {
          "name": "TestSession",
          "file_path": "tests/client/test_resource_cleanup.py",
          "line_start": 23,
          "line_end": 25,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseSession"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 69,
      "complexity_score": 0.0
    },
    {
      "name": "test_sampling_callback",
      "path": "tests/client/test_sampling_callback.py",
      "docstring": null,
      "imports": [
        "pytest",
        "mcp.client.session.ClientSession",
        "mcp.shared.context.RequestContext",
        "mcp.shared.memory.create_connected_server_and_client_session",
        "mcp.types.CreateMessageRequestParams",
        "mcp.types.CreateMessageResult",
        "mcp.types.SamplingMessage",
        "mcp.types.TextContent",
        "mcp.server.fastmcp.FastMCP"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 74,
      "complexity_score": 0.0
    },
    {
      "name": "test_session",
      "path": "tests/client/test_session.py",
      "docstring": null,
      "imports": [
        "typing.Any",
        "anyio",
        "pytest",
        "mcp.types",
        "mcp.client.session.DEFAULT_CLIENT_INFO",
        "mcp.client.session.ClientSession",
        "mcp.shared.context.RequestContext",
        "mcp.shared.message.SessionMessage",
        "mcp.shared.session.RequestResponder",
        "mcp.shared.version.SUPPORTED_PROTOCOL_VERSIONS",
        "mcp.types.LATEST_PROTOCOL_VERSION",
        "mcp.types.ClientNotification",
        "mcp.types.ClientRequest",
        "mcp.types.Implementation",
        "mcp.types.InitializedNotification",
        "mcp.types.InitializeRequest",
        "mcp.types.InitializeResult",
        "mcp.types.JSONRPCMessage",
        "mcp.types.JSONRPCNotification",
        "mcp.types.JSONRPCRequest",
        "mcp.types.JSONRPCResponse",
        "mcp.types.ServerCapabilities",
        "mcp.types.ServerResult"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 550,
      "complexity_score": 0.0
    },
    {
      "name": "test_session_group",
      "path": "tests/client/test_session_group.py",
      "docstring": null,
      "imports": [
        "contextlib",
        "unittest.mock",
        "pytest",
        "mcp",
        "mcp.types",
        "mcp.client.session_group.ClientSessionGroup",
        "mcp.client.session_group.SseServerParameters",
        "mcp.client.session_group.StreamableHttpParameters",
        "mcp.client.stdio.StdioServerParameters",
        "mcp.shared.exceptions.McpError"
      ],
      "functions": [
        {
          "name": "mock_exit_stack",
          "file_path": "tests/client/test_session_group.py",
          "line_start": 18,
          "line_end": 23,
          "docstring": "Fixture for a mocked AsyncExitStack.",
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_init",
          "file_path": "tests/client/test_session_group.py",
          "line_start": 28,
          "line_end": 33,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_component_properties",
          "file_path": "tests/client/test_session_group.py",
          "line_start": 35,
          "line_end": 50,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "hook",
          "file_path": "tests/client/test_session_group.py",
          "line_start": 57,
          "line_end": 58,
          "docstring": null,
          "parameters": [
            "name",
            "server_info"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "name_hook",
          "file_path": "tests/client/test_session_group.py",
          "line_start": 140,
          "line_end": 141,
          "docstring": null,
          "parameters": [
            "name",
            "server_info"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "TestClientSessionGroup",
          "file_path": "tests/client/test_session_group.py",
          "line_start": 27,
          "line_end": 397,
          "docstring": null,
          "methods": [
            {
              "name": "test_init",
              "file_path": "tests/client/test_session_group.py",
              "line_start": 28,
              "line_end": 33,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "test_component_properties",
              "file_path": "tests/client/test_session_group.py",
              "line_start": 35,
              "line_end": 50,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 398,
      "complexity_score": 1.0
    },
    {
      "name": "test_stdio",
      "path": "tests/client/test_stdio.py",
      "docstring": null,
      "imports": [
        "shutil",
        "pytest",
        "mcp.client.session.ClientSession",
        "mcp.client.stdio.StdioServerParameters",
        "mcp.client.stdio.stdio_client",
        "mcp.shared.exceptions.McpError",
        "mcp.shared.message.SessionMessage",
        "mcp.types.CONNECTION_CLOSED",
        "mcp.types.JSONRPCMessage",
        "mcp.types.JSONRPCRequest",
        "mcp.types.JSONRPCResponse"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 99,
      "complexity_score": 0.0
    },
    {
      "name": "test_100_tool_listing",
      "path": "tests/issues/test_100_tool_listing.py",
      "docstring": null,
      "imports": [
        "pytest",
        "mcp.server.fastmcp.FastMCP"
      ],
      "functions": [
        {
          "name": "dummy_tool_func",
          "file_path": "tests/issues/test_100_tool_listing.py",
          "line_start": 16,
          "line_end": 18,
          "docstring": null,
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 36,
      "complexity_score": 1.0
    },
    {
      "name": "test_129_resource_templates",
      "path": "tests/issues/test_129_resource_templates.py",
      "docstring": null,
      "imports": [
        "pytest",
        "mcp.types",
        "mcp.server.fastmcp.FastMCP"
      ],
      "functions": [
        {
          "name": "get_greeting",
          "file_path": "tests/issues/test_129_resource_templates.py",
          "line_start": 14,
          "line_end": 16,
          "docstring": "Get a personalized greeting",
          "parameters": [
            "name"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_user_profile",
          "file_path": "tests/issues/test_129_resource_templates.py",
          "line_start": 19,
          "line_end": 21,
          "docstring": "Dynamic user data",
          "parameters": [
            "user_id"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 45,
      "complexity_score": 1.0
    },
    {
      "name": "test_141_resource_templates",
      "path": "tests/issues/test_141_resource_templates.py",
      "docstring": null,
      "imports": [
        "pytest",
        "pydantic.AnyUrl",
        "mcp.server.fastmcp.FastMCP",
        "mcp.shared.memory.create_connected_server_and_client_session",
        "mcp.types.ListResourceTemplatesResult",
        "mcp.types.TextResourceContents"
      ],
      "functions": [
        {
          "name": "get_user_post",
          "file_path": "tests/issues/test_141_resource_templates.py",
          "line_start": 21,
          "line_end": 22,
          "docstring": null,
          "parameters": [
            "user_id",
            "post_id"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_user_post",
          "file_path": "tests/issues/test_141_resource_templates.py",
          "line_start": 76,
          "line_end": 77,
          "docstring": null,
          "parameters": [
            "user_id",
            "post_id"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_user_profile",
          "file_path": "tests/issues/test_141_resource_templates.py",
          "line_start": 80,
          "line_end": 81,
          "docstring": null,
          "parameters": [
            "user_id"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_user_profile",
          "file_path": "tests/issues/test_141_resource_templates.py",
          "line_start": 28,
          "line_end": 29,
          "docstring": null,
          "parameters": [
            "user_id",
            "optional_param"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_user_profile_mismatch",
          "file_path": "tests/issues/test_141_resource_templates.py",
          "line_start": 35,
          "line_end": 36,
          "docstring": null,
          "parameters": [
            "different_param"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_user_profile_extra",
          "file_path": "tests/issues/test_141_resource_templates.py",
          "line_start": 42,
          "line_end": 43,
          "docstring": null,
          "parameters": [
            "user_id",
            "extra_param"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_user_profile_missing",
          "file_path": "tests/issues/test_141_resource_templates.py",
          "line_start": 49,
          "line_end": 50,
          "docstring": null,
          "parameters": [
            "user_id"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 121,
      "complexity_score": 1.0
    },
    {
      "name": "test_152_resource_mime_type",
      "path": "tests/issues/test_152_resource_mime_type.py",
      "docstring": null,
      "imports": [
        "base64",
        "pytest",
        "pydantic.AnyUrl",
        "mcp.types",
        "mcp.server.fastmcp.FastMCP",
        "mcp.server.lowlevel.Server",
        "mcp.server.lowlevel.helper_types.ReadResourceContents",
        "mcp.shared.memory.create_connected_server_and_client_session"
      ],
      "functions": [
        {
          "name": "get_image_as_string",
          "file_path": "tests/issues/test_152_resource_mime_type.py",
          "line_start": 26,
          "line_end": 28,
          "docstring": "Return a test image as base64 string.",
          "parameters": [],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_image_as_bytes",
          "file_path": "tests/issues/test_152_resource_mime_type.py",
          "line_start": 31,
          "line_end": 33,
          "docstring": "Return a test image as bytes.",
          "parameters": [],
          "return_type": "bytes",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 147,
      "complexity_score": 1.0
    },
    {
      "name": "test_176_progress_token",
      "path": "tests/issues/test_176_progress_token.py",
      "docstring": null,
      "imports": [
        "unittest.mock.AsyncMock",
        "unittest.mock.MagicMock",
        "pytest",
        "mcp.server.fastmcp.Context",
        "mcp.shared.context.RequestContext"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 50,
      "complexity_score": 0.0
    },
    {
      "name": "test_188_concurrency",
      "path": "tests/issues/test_188_concurrency.py",
      "docstring": null,
      "imports": [
        "anyio",
        "pytest",
        "pydantic.AnyUrl",
        "mcp.server.fastmcp.FastMCP",
        "mcp.shared.memory.create_connected_server_and_client_session",
        "logging"
      ],
      "functions": [
        {
          "name": "main",
          "file_path": "tests/issues/test_188_concurrency.py",
          "line_start": 42,
          "line_end": 43,
          "docstring": null,
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 52,
      "complexity_score": 1.0
    },
    {
      "name": "test_192_request_id",
      "path": "tests/issues/test_192_request_id.py",
      "docstring": null,
      "imports": [
        "anyio",
        "pytest",
        "mcp.server.lowlevel.NotificationOptions",
        "mcp.server.lowlevel.Server",
        "mcp.server.models.InitializationOptions",
        "mcp.shared.message.SessionMessage",
        "mcp.types.LATEST_PROTOCOL_VERSION",
        "mcp.types.ClientCapabilities",
        "mcp.types.Implementation",
        "mcp.types.InitializeRequestParams",
        "mcp.types.JSONRPCMessage",
        "mcp.types.JSONRPCNotification",
        "mcp.types.JSONRPCRequest",
        "mcp.types.NotificationParams"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 100,
      "complexity_score": 0.0
    },
    {
      "name": "test_342_base64_encoding",
      "path": "tests/issues/test_342_base64_encoding.py",
      "docstring": "Test for base64 encoding issue in MCP server.\n\nThis test demonstrates the issue in server.py where the server uses\nurlsafe_b64encode but the BlobResourceContents validator expects standard\nbase64 encoding.\n\nThe test should FAIL before fixing server.py to use b64encode instead of\nurlsafe_b64encode.\nAfter the fix, the test should PASS.",
      "imports": [
        "base64",
        "typing.cast",
        "pytest",
        "pydantic.AnyUrl",
        "mcp.server.lowlevel.helper_types.ReadResourceContents",
        "mcp.server.lowlevel.server.Server",
        "mcp.types.BlobResourceContents",
        "mcp.types.ReadResourceRequest",
        "mcp.types.ReadResourceRequestParams",
        "mcp.types.ReadResourceResult",
        "mcp.types.ServerResult"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 90,
      "complexity_score": 0.0
    },
    {
      "name": "test_355_type_error",
      "path": "tests/issues/test_355_type_error.py",
      "docstring": null,
      "imports": [
        "collections.abc.AsyncIterator",
        "contextlib.asynccontextmanager",
        "dataclasses.dataclass",
        "mcp.server.fastmcp.Context",
        "mcp.server.fastmcp.FastMCP"
      ],
      "functions": [
        {
          "name": "query_db",
          "file_path": "tests/issues/test_355_type_error.py",
          "line_start": 47,
          "line_end": 50,
          "docstring": "Tool that uses initialized resources",
          "parameters": [
            "ctx"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "query",
          "file_path": "tests/issues/test_355_type_error.py",
          "line_start": 16,
          "line_end": 17,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "Database",
          "file_path": "tests/issues/test_355_type_error.py",
          "line_start": 8,
          "line_end": 17,
          "docstring": null,
          "methods": [
            {
              "name": "query",
              "file_path": "tests/issues/test_355_type_error.py",
              "line_start": 16,
              "line_end": 17,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "AppContext",
          "file_path": "tests/issues/test_355_type_error.py",
          "line_start": 25,
          "line_end": 26,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 51,
      "complexity_score": 1.0
    },
    {
      "name": "test_88_random_error",
      "path": "tests/issues/test_88_random_error.py",
      "docstring": "Test to reproduce issue #88: Random error thrown on response.",
      "imports": [
        "collections.abc.Sequence",
        "datetime.timedelta",
        "pathlib.Path",
        "anyio",
        "pytest",
        "anyio.abc.TaskStatus",
        "mcp.client.session.ClientSession",
        "mcp.server.lowlevel.Server",
        "mcp.shared.exceptions.McpError",
        "mcp.types.AudioContent",
        "mcp.types.EmbeddedResource",
        "mcp.types.ImageContent",
        "mcp.types.TextContent"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 111,
      "complexity_score": 0.0
    },
    {
      "name": "test_malformed_input",
      "path": "tests/issues/test_malformed_input.py",
      "docstring": "Test for HackerOne vulnerability report #3156202 - malformed input DOS.",
      "imports": [
        "anyio",
        "pytest",
        "mcp.server.models.InitializationOptions",
        "mcp.server.session.ServerSession",
        "mcp.shared.message.SessionMessage",
        "mcp.types.INVALID_PARAMS",
        "mcp.types.JSONRPCError",
        "mcp.types.JSONRPCMessage",
        "mcp.types.JSONRPCRequest",
        "mcp.types.ServerCapabilities"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 172,
      "complexity_score": 0.0
    },
    {
      "name": "test_lifespan",
      "path": "tests/server/test_lifespan.py",
      "docstring": "Tests for lifespan functionality in both low-level and FastMCP servers.",
      "imports": [
        "collections.abc.AsyncIterator",
        "contextlib.asynccontextmanager",
        "anyio",
        "pytest",
        "pydantic.TypeAdapter",
        "mcp.server.fastmcp.Context",
        "mcp.server.fastmcp.FastMCP",
        "mcp.server.lowlevel.server.NotificationOptions",
        "mcp.server.lowlevel.server.Server",
        "mcp.server.models.InitializationOptions",
        "mcp.shared.message.SessionMessage",
        "mcp.types.ClientCapabilities",
        "mcp.types.Implementation",
        "mcp.types.InitializeRequestParams",
        "mcp.types.JSONRPCMessage",
        "mcp.types.JSONRPCNotification",
        "mcp.types.JSONRPCRequest"
      ],
      "functions": [
        {
          "name": "check_lifespan",
          "file_path": "tests/server/test_lifespan.py",
          "line_start": 157,
          "line_end": 162,
          "docstring": "Tool that checks lifespan context.",
          "parameters": [
            "ctx"
          ],
          "return_type": "bool",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 237,
      "complexity_score": 1.0
    },
    {
      "name": "test_lowlevel_tool_annotations",
      "path": "tests/server/test_lowlevel_tool_annotations.py",
      "docstring": "Tests for tool annotations in low-level server.",
      "imports": [
        "anyio",
        "pytest",
        "mcp.client.session.ClientSession",
        "mcp.server.Server",
        "mcp.server.lowlevel.NotificationOptions",
        "mcp.server.models.InitializationOptions",
        "mcp.server.session.ServerSession",
        "mcp.shared.message.SessionMessage",
        "mcp.shared.session.RequestResponder",
        "mcp.types.ClientResult",
        "mcp.types.ServerNotification",
        "mcp.types.ServerRequest",
        "mcp.types.Tool",
        "mcp.types.ToolAnnotations"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 112,
      "complexity_score": 0.0
    },
    {
      "name": "test_read_resource",
      "path": "tests/server/test_read_resource.py",
      "docstring": null,
      "imports": [
        "collections.abc.Iterable",
        "pathlib.Path",
        "tempfile.NamedTemporaryFile",
        "pytest",
        "pydantic.AnyUrl",
        "pydantic.FileUrl",
        "mcp.types",
        "mcp.server.lowlevel.server.ReadResourceContents",
        "mcp.server.lowlevel.server.Server"
      ],
      "functions": [
        {
          "name": "temp_file",
          "file_path": "tests/server/test_read_resource.py",
          "line_start": 13,
          "line_end": 22,
          "docstring": "Create a temporary file for testing.",
          "parameters": [],
          "return_type": null,
          "complexity": 3,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 115,
      "complexity_score": 3.0
    },
    {
      "name": "test_session",
      "path": "tests/server/test_session.py",
      "docstring": null,
      "imports": [
        "anyio",
        "pytest",
        "mcp.types",
        "mcp.client.session.ClientSession",
        "mcp.server.Server",
        "mcp.server.lowlevel.NotificationOptions",
        "mcp.server.models.InitializationOptions",
        "mcp.server.session.ServerSession",
        "mcp.shared.message.SessionMessage",
        "mcp.shared.session.RequestResponder",
        "mcp.types.ClientNotification",
        "mcp.types.InitializedNotification",
        "mcp.types.PromptsCapability",
        "mcp.types.ResourcesCapability",
        "mcp.types.ServerCapabilities"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 203,
      "complexity_score": 0.0
    },
    {
      "name": "test_stdio",
      "path": "tests/server/test_stdio.py",
      "docstring": null,
      "imports": [
        "io",
        "anyio",
        "pytest",
        "mcp.server.stdio.stdio_server",
        "mcp.shared.message.SessionMessage",
        "mcp.types.JSONRPCMessage",
        "mcp.types.JSONRPCRequest",
        "mcp.types.JSONRPCResponse"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 71,
      "complexity_score": 0.0
    },
    {
      "name": "test_streamable_http_manager",
      "path": "tests/server/test_streamable_http_manager.py",
      "docstring": "Tests for StreamableHTTPSessionManager.",
      "imports": [
        "anyio",
        "pytest",
        "mcp.server.lowlevel.Server",
        "mcp.server.streamable_http_manager.StreamableHTTPSessionManager"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 82,
      "complexity_score": 0.0
    },
    {
      "name": "test_error_handling",
      "path": "tests/server/auth/test_error_handling.py",
      "docstring": "Tests for OAuth error handling in the auth handlers.",
      "imports": [
        "unittest.mock",
        "urllib.parse.parse_qs",
        "urllib.parse.urlparse",
        "httpx",
        "pytest",
        "httpx.ASGITransport",
        "pydantic.AnyHttpUrl",
        "starlette.applications.Starlette",
        "mcp.server.auth.provider.AuthorizeError",
        "mcp.server.auth.provider.RegistrationError",
        "mcp.server.auth.provider.TokenError",
        "mcp.server.auth.routes.create_auth_routes",
        "tests.server.fastmcp.auth.test_auth_integration.MockOAuthProvider",
        "mcp.server.auth.settings.ClientRegistrationOptions",
        "mcp.server.auth.settings.RevocationOptions",
        "base64",
        "hashlib",
        "secrets"
      ],
      "functions": [
        {
          "name": "oauth_provider",
          "file_path": "tests/server/auth/test_error_handling.py",
          "line_start": 26,
          "line_end": 28,
          "docstring": "Return a MockOAuthProvider instance that can be configured to raise errors.",
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "app",
          "file_path": "tests/server/auth/test_error_handling.py",
          "line_start": 32,
          "line_end": 48,
          "docstring": null,
          "parameters": [
            "oauth_provider"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "client",
          "file_path": "tests/server/auth/test_error_handling.py",
          "line_start": 52,
          "line_end": 55,
          "docstring": null,
          "parameters": [
            "app"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "pkce_challenge",
          "file_path": "tests/server/auth/test_error_handling.py",
          "line_start": 59,
          "line_end": 73,
          "docstring": "Create a PKCE challenge with code_verifier and code_challenge.",
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "TestRegistrationErrorHandling",
          "file_path": "tests/server/auth/test_error_handling.py",
          "line_start": 95,
          "line_end": 126,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "TestAuthorizeErrorHandling",
          "file_path": "tests/server/auth/test_error_handling.py",
          "line_start": 129,
          "line_end": 167,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "TestTokenErrorHandling",
          "file_path": "tests/server/auth/test_error_handling.py",
          "line_start": 170,
          "line_end": 294,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 295,
      "complexity_score": 1.0
    },
    {
      "name": "test_auth_context",
      "path": "tests/server/auth/middleware/test_auth_context.py",
      "docstring": "Tests for the AuthContext middleware components.",
      "imports": [
        "time",
        "pytest",
        "starlette.types.Message",
        "starlette.types.Receive",
        "starlette.types.Scope",
        "starlette.types.Send",
        "mcp.server.auth.middleware.auth_context.AuthContextMiddleware",
        "mcp.server.auth.middleware.auth_context.auth_context_var",
        "mcp.server.auth.middleware.auth_context.get_access_token",
        "mcp.server.auth.middleware.bearer_auth.AuthenticatedUser",
        "mcp.server.auth.provider.AccessToken"
      ],
      "functions": [
        {
          "name": "valid_access_token",
          "file_path": "tests/server/auth/middleware/test_auth_context.py",
          "line_start": 39,
          "line_end": 46,
          "docstring": "Create a valid access token.",
          "parameters": [],
          "return_type": "AccessToken",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "tests/server/auth/middleware/test_auth_context.py",
          "line_start": 22,
          "line_end": 27,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "MockApp",
          "file_path": "tests/server/auth/middleware/test_auth_context.py",
          "line_start": 19,
          "line_end": 35,
          "docstring": "Mock ASGI app for testing.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "tests/server/auth/middleware/test_auth_context.py",
              "line_start": 22,
              "line_end": 27,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "called"
          ],
          "inheritance": []
        },
        {
          "name": "TestAuthContextMiddleware",
          "file_path": "tests/server/auth/middleware/test_auth_context.py",
          "line_start": 50,
          "line_end": 122,
          "docstring": "Tests for the AuthContextMiddleware class.",
          "methods": [],
          "attributes": [],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 123,
      "complexity_score": 1.0
    },
    {
      "name": "test_bearer_auth",
      "path": "tests/server/auth/middleware/test_bearer_auth.py",
      "docstring": "Tests for the BearerAuth middleware components.",
      "imports": [
        "time",
        "typing.Any",
        "typing.cast",
        "pytest",
        "starlette.authentication.AuthCredentials",
        "starlette.datastructures.Headers",
        "starlette.exceptions.HTTPException",
        "starlette.requests.Request",
        "starlette.types.Message",
        "starlette.types.Receive",
        "starlette.types.Scope",
        "starlette.types.Send",
        "mcp.server.auth.middleware.bearer_auth.AuthenticatedUser",
        "mcp.server.auth.middleware.bearer_auth.BearerAuthBackend",
        "mcp.server.auth.middleware.bearer_auth.RequireAuthMiddleware",
        "mcp.server.auth.provider.AccessToken",
        "mcp.server.auth.provider.OAuthAuthorizationServerProvider"
      ],
      "functions": [
        {
          "name": "add_token_to_provider",
          "file_path": "tests/server/auth/middleware/test_bearer_auth.py",
          "line_start": 45,
          "line_end": 56,
          "docstring": "Helper function to add a token to a provider.\n\nThis is used to work around type checking issues with our mock provider.",
          "parameters": [
            "provider",
            "token",
            "access_token"
          ],
          "return_type": "None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "mock_oauth_provider",
          "file_path": "tests/server/auth/middleware/test_bearer_auth.py",
          "line_start": 76,
          "line_end": 79,
          "docstring": "Create a mock OAuth provider.",
          "parameters": [],
          "return_type": "OAuthAuthorizationServerProvider[Any, Any, Any]",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "valid_access_token",
          "file_path": "tests/server/auth/middleware/test_bearer_auth.py",
          "line_start": 83,
          "line_end": 90,
          "docstring": "Create a valid access token.",
          "parameters": [],
          "return_type": "AccessToken",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "expired_access_token",
          "file_path": "tests/server/auth/middleware/test_bearer_auth.py",
          "line_start": 94,
          "line_end": 101,
          "docstring": "Create an expired access token.",
          "parameters": [],
          "return_type": "AccessToken",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "no_expiry_access_token",
          "file_path": "tests/server/auth/middleware/test_bearer_auth.py",
          "line_start": 105,
          "line_end": 112,
          "docstring": "Create an access token with no expiry.",
          "parameters": [],
          "return_type": "AccessToken",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "tests/server/auth/middleware/test_bearer_auth.py",
          "line_start": 33,
          "line_end": 34,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "add_token",
          "file_path": "tests/server/auth/middleware/test_bearer_auth.py",
          "line_start": 36,
          "line_end": 38,
          "docstring": "Add a token to the provider.",
          "parameters": [
            "self",
            "token",
            "access_token"
          ],
          "return_type": "None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "tests/server/auth/middleware/test_bearer_auth.py",
          "line_start": 62,
          "line_end": 66,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "MockOAuthProvider",
          "file_path": "tests/server/auth/middleware/test_bearer_auth.py",
          "line_start": 26,
          "line_end": 42,
          "docstring": "Mock OAuth provider for testing.\n\nThis is a simplified version that only implements the methods needed for testing\nthe BearerAuthMiddleware components.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "tests/server/auth/middleware/test_bearer_auth.py",
              "line_start": 33,
              "line_end": 34,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "add_token",
              "file_path": "tests/server/auth/middleware/test_bearer_auth.py",
              "line_start": 36,
              "line_end": 38,
              "docstring": "Add a token to the provider.",
              "parameters": [
                "self",
                "token",
                "access_token"
              ],
              "return_type": "None",
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "tokens"
          ],
          "inheritance": []
        },
        {
          "name": "MockApp",
          "file_path": "tests/server/auth/middleware/test_bearer_auth.py",
          "line_start": 59,
          "line_end": 72,
          "docstring": "Mock ASGI app for testing.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "tests/server/auth/middleware/test_bearer_auth.py",
              "line_start": 62,
              "line_end": 66,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "called"
          ],
          "inheritance": []
        },
        {
          "name": "TestBearerAuthBackend",
          "file_path": "tests/server/auth/middleware/test_bearer_auth.py",
          "line_start": 116,
          "line_end": 283,
          "docstring": "Tests for the BearerAuthBackend class.",
          "methods": [],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "TestRequireAuthMiddleware",
          "file_path": "tests/server/auth/middleware/test_bearer_auth.py",
          "line_start": 287,
          "line_end": 452,
          "docstring": "Tests for the RequireAuthMiddleware class.",
          "methods": [],
          "attributes": [],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 453,
      "complexity_score": 1.0
    },
    {
      "name": "test_func_metadata",
      "path": "tests/server/fastmcp/test_func_metadata.py",
      "docstring": null,
      "imports": [
        "typing.Annotated",
        "annotated_types",
        "pytest",
        "pydantic.BaseModel",
        "pydantic.Field",
        "mcp.server.fastmcp.utilities.func_metadata.func_metadata"
      ],
      "functions": [
        {
          "name": "complex_arguments_fn",
          "file_path": "tests/server/fastmcp/test_func_metadata.py",
          "line_start": 23,
          "line_end": 85,
          "docstring": null,
          "parameters": [
            "an_int",
            "must_be_none",
            "must_be_none_dumb_annotation",
            "list_of_ints",
            "list_str_or_str",
            "an_int_annotated_with_field",
            "an_int_annotated_with_field_and_others",
            "an_int_annotated_with_junk",
            "field_with_default_via_field_annotation_before_nondefault_arg",
            "unannotated",
            "my_model_a",
            "my_model_a_forward_ref",
            "my_model_b",
            "an_int_annotated_with_field_default",
            "unannotated_with_default",
            "my_model_a_with_default",
            "an_int_with_default",
            "must_be_none_with_default",
            "an_int_with_equals_field",
            "int_annotated_with_default"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_str_vs_list_str",
          "file_path": "tests/server/fastmcp/test_func_metadata.py",
          "line_start": 152,
          "line_end": 176,
          "docstring": "Test handling of string vs list[str] type annotations.\n\nThis is tricky as '\"hello\"' can be parsed as a JSON string or a Python string.\nWe want to make sure it's kept as a python string.",
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_skip_names",
          "file_path": "tests/server/fastmcp/test_func_metadata.py",
          "line_start": 179,
          "line_end": 199,
          "docstring": "Test that skipped parameters are not included in the model",
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_complex_function_json_schema",
          "file_path": "tests/server/fastmcp/test_func_metadata.py",
          "line_start": 237,
          "line_end": 401,
          "docstring": "Test JSON schema generation for complex function arguments.\n\nNote: Different versions of pydantic output slightly different\nJSON Schema formats for model fields with defaults. The format changed in 2.9.0:\n\n1. Before 2.9.0:\n   {\n     \"allOf\": [{\"$ref\": \"#/$defs/Model\"}],\n     \"default\": {}\n   }\n\n2. Since 2.9.0:\n   {\n     \"$ref\": \"#/$defs/Model\",\n     \"default\": {}\n   }\n\nBoth formats are valid and functionally equivalent. This test accepts either format\nto ensure compatibility across our supported pydantic versions.\n\nThis change in format does not affect runtime behavior since:\n1. Both schemas validate the same way\n2. The actual model classes and validation logic are unchanged\n3. func_metadata uses model_validate/model_dump, not the schema directly",
          "parameters": [],
          "return_type": null,
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "test_str_vs_int",
          "file_path": "tests/server/fastmcp/test_func_metadata.py",
          "line_start": 404,
          "line_end": 416,
          "docstring": "Test that string values are kept as strings even when they contain numbers,\nwhile numbers are parsed correctly.",
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "func_with_str_types",
          "file_path": "tests/server/fastmcp/test_func_metadata.py",
          "line_start": 159,
          "line_end": 160,
          "docstring": null,
          "parameters": [
            "str_or_list"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "func_with_many_params",
          "file_path": "tests/server/fastmcp/test_func_metadata.py",
          "line_start": 182,
          "line_end": 185,
          "docstring": null,
          "parameters": [
            "keep_this",
            "skip_this",
            "also_keep",
            "also_skip"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "func_with_str_and_int",
          "file_path": "tests/server/fastmcp/test_func_metadata.py",
          "line_start": 410,
          "line_end": 411,
          "docstring": null,
          "parameters": [
            "a",
            "b"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "SomeInputModelA",
          "file_path": "tests/server/fastmcp/test_func_metadata.py",
          "line_start": 10,
          "line_end": 11,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "SomeInputModelB",
          "file_path": "tests/server/fastmcp/test_func_metadata.py",
          "line_start": 14,
          "line_end": 20,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "InnerModel",
          "file_path": "tests/server/fastmcp/test_func_metadata.py",
          "line_start": 15,
          "line_end": 16,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 417,
      "complexity_score": 1.125
    },
    {
      "name": "test_integration",
      "path": "tests/server/fastmcp/test_integration.py",
      "docstring": "Integration tests for FastMCP server functionality.\n\nThese tests validate the proper functioning of FastMCP in various configurations,\nincluding with and without authentication.",
      "imports": [
        "json",
        "multiprocessing",
        "socket",
        "time",
        "collections.abc.Generator",
        "typing.Any",
        "pytest",
        "uvicorn",
        "pydantic.AnyUrl",
        "starlette.applications.Starlette",
        "starlette.requests.Request",
        "mcp.types",
        "mcp.client.session.ClientSession",
        "mcp.client.sse.sse_client",
        "mcp.client.streamable_http.streamablehttp_client",
        "mcp.server.fastmcp.FastMCP",
        "mcp.server.fastmcp.resources.FunctionResource",
        "mcp.shared.context.RequestContext",
        "mcp.types.CreateMessageRequestParams",
        "mcp.types.CreateMessageResult",
        "mcp.types.GetPromptResult",
        "mcp.types.InitializeResult",
        "mcp.types.ReadResourceResult",
        "mcp.types.SamplingMessage",
        "mcp.types.TextContent",
        "mcp.types.TextResourceContents",
        "mcp.server.fastmcp.Context"
      ],
      "functions": [
        {
          "name": "server_port",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 41,
          "line_end": 45,
          "docstring": "Get a free port for testing.",
          "parameters": [],
          "return_type": "int",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "server_url",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 49,
          "line_end": 51,
          "docstring": "Get the server URL for testing.",
          "parameters": [
            "server_port"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "http_server_port",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 55,
          "line_end": 59,
          "docstring": "Get a free port for testing the StreamableHTTP server.",
          "parameters": [],
          "return_type": "int",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "http_server_url",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 63,
          "line_end": 65,
          "docstring": "Get the StreamableHTTP server URL for testing.",
          "parameters": [
            "http_server_port"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "stateless_http_server_port",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 69,
          "line_end": 73,
          "docstring": "Get a free port for testing the stateless StreamableHTTP server.",
          "parameters": [],
          "return_type": "int",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "stateless_http_server_url",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 77,
          "line_end": 79,
          "docstring": "Get the stateless StreamableHTTP server URL for testing.",
          "parameters": [
            "stateless_http_server_port"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "make_fastmcp_app",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 83,
          "line_end": 95,
          "docstring": "Create a FastMCP server without auth settings.",
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "make_everything_fastmcp",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 98,
          "line_end": 225,
          "docstring": "Create a FastMCP server with all features enabled for testing.",
          "parameters": [],
          "return_type": "FastMCP",
          "complexity": 5,
          "is_async": false
        },
        {
          "name": "make_everything_fastmcp_app",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 228,
          "line_end": 233,
          "docstring": "Create a comprehensive FastMCP server with SSE transport.",
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "make_fastmcp_streamable_http_app",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 236,
          "line_end": 249,
          "docstring": "Create a FastMCP server with StreamableHTTP transport.",
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "make_everything_fastmcp_streamable_http_app",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 252,
          "line_end": 259,
          "docstring": "Create a comprehensive FastMCP server with StreamableHTTP transport.",
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "make_fastmcp_stateless_http_app",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 262,
          "line_end": 275,
          "docstring": "Create a FastMCP server with stateless StreamableHTTP transport.",
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "run_server",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 278,
          "line_end": 287,
          "docstring": "Run the server.",
          "parameters": [
            "server_port"
          ],
          "return_type": "None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "run_everything_legacy_sse_http_server",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 290,
          "line_end": 299,
          "docstring": "Run the comprehensive server with all features.",
          "parameters": [
            "server_port"
          ],
          "return_type": "None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "run_streamable_http_server",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 302,
          "line_end": 311,
          "docstring": "Run the StreamableHTTP server.",
          "parameters": [
            "server_port"
          ],
          "return_type": "None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "run_everything_server",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 314,
          "line_end": 323,
          "docstring": "Run the comprehensive StreamableHTTP server with all features.",
          "parameters": [
            "server_port"
          ],
          "return_type": "None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "run_stateless_http_server",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 326,
          "line_end": 335,
          "docstring": "Run the stateless StreamableHTTP server.",
          "parameters": [
            "server_port"
          ],
          "return_type": "None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "server",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 339,
          "line_end": 366,
          "docstring": "Start the server in a separate process and clean up after the test.",
          "parameters": [
            "server_port"
          ],
          "return_type": "Generator[None, None, None]",
          "complexity": 5,
          "is_async": false
        },
        {
          "name": "streamable_http_server",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 370,
          "line_end": 401,
          "docstring": "Start the StreamableHTTP server in a separate process.",
          "parameters": [
            "http_server_port"
          ],
          "return_type": "Generator[None, None, None]",
          "complexity": 5,
          "is_async": false
        },
        {
          "name": "stateless_http_server",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 405,
          "line_end": 440,
          "docstring": "Start the stateless StreamableHTTP server in a separate process.",
          "parameters": [
            "stateless_http_server_port"
          ],
          "return_type": "Generator[None, None, None]",
          "complexity": 5,
          "is_async": false
        },
        {
          "name": "everything_server_port",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 514,
          "line_end": 518,
          "docstring": "Get a free port for testing the comprehensive server.",
          "parameters": [],
          "return_type": "int",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "everything_server_url",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 522,
          "line_end": 524,
          "docstring": "Get the comprehensive server URL for testing.",
          "parameters": [
            "everything_server_port"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "everything_http_server_port",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 528,
          "line_end": 532,
          "docstring": "Get a free port for testing the comprehensive StreamableHTTP server.",
          "parameters": [],
          "return_type": "int",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "everything_http_server_url",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 536,
          "line_end": 538,
          "docstring": "Get the comprehensive StreamableHTTP server URL for testing.",
          "parameters": [
            "everything_http_server_port"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "everything_server",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 542,
          "line_end": 575,
          "docstring": "Start the comprehensive server in a separate process and clean up after.",
          "parameters": [
            "everything_server_port"
          ],
          "return_type": "Generator[None, None, None]",
          "complexity": 5,
          "is_async": false
        },
        {
          "name": "everything_streamable_http_server",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 579,
          "line_end": 615,
          "docstring": "Start the comprehensive StreamableHTTP server in a separate process.",
          "parameters": [
            "everything_http_server_port"
          ],
          "return_type": "Generator[None, None, None]",
          "complexity": 5,
          "is_async": false
        },
        {
          "name": "echo",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 89,
          "line_end": 90,
          "docstring": null,
          "parameters": [
            "message"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "echo",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 123,
          "line_end": 124,
          "docstring": null,
          "parameters": [
            "message"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_static_info",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 165,
          "line_end": 166,
          "docstring": null,
          "parameters": [],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "dynamic_resource",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 178,
          "line_end": 179,
          "docstring": null,
          "parameters": [
            "category"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "template_resource",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 183,
          "line_end": 184,
          "docstring": null,
          "parameters": [
            "id"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "simple_prompt",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 188,
          "line_end": 189,
          "docstring": null,
          "parameters": [
            "topic"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "complex_prompt",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 193,
          "line_end": 196,
          "docstring": null,
          "parameters": [
            "user_query",
            "context"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "echo_headers",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 200,
          "line_end": 206,
          "docstring": "Returns the request headers as JSON.",
          "parameters": [
            "ctx"
          ],
          "return_type": "str",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "echo_context",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 210,
          "line_end": 223,
          "docstring": "Returns request context including headers and custom data.",
          "parameters": [
            "custom_request_id",
            "ctx"
          ],
          "return_type": "str",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "echo",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 243,
          "line_end": 244,
          "docstring": null,
          "parameters": [
            "message"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "echo",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 269,
          "line_end": 270,
          "docstring": null,
          "parameters": [
            "message"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 619,
          "line_end": 623,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "NotificationCollector",
          "file_path": "tests/server/fastmcp/test_integration.py",
          "line_start": 618,
          "line_end": 648,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "file_path": "tests/server/fastmcp/test_integration.py",
              "line_start": 619,
              "line_end": 623,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 932,
      "complexity_score": 1.8157894736842106
    },
    {
      "name": "test_parameter_descriptions",
      "path": "tests/server/fastmcp/test_parameter_descriptions.py",
      "docstring": "Test that parameter descriptions are properly exposed through list_tools",
      "imports": [
        "pytest",
        "pydantic.Field",
        "mcp.server.fastmcp.FastMCP"
      ],
      "functions": [
        {
          "name": "greet",
          "file_path": "tests/server/fastmcp/test_parameter_descriptions.py",
          "line_start": 14,
          "line_end": 19,
          "docstring": "A greeting tool",
          "parameters": [
            "name",
            "title"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 31,
      "complexity_score": 1.0
    },
    {
      "name": "test_server",
      "path": "tests/server/fastmcp/test_server.py",
      "docstring": null,
      "imports": [
        "base64",
        "pathlib.Path",
        "typing.TYPE_CHECKING",
        "unittest.mock.patch",
        "pytest",
        "pydantic.AnyUrl",
        "starlette.routing.Mount",
        "starlette.routing.Route",
        "mcp.server.fastmcp.Context",
        "mcp.server.fastmcp.FastMCP",
        "mcp.server.fastmcp.prompts.base.EmbeddedResource",
        "mcp.server.fastmcp.prompts.base.Message",
        "mcp.server.fastmcp.prompts.base.UserMessage",
        "mcp.server.fastmcp.resources.FileResource",
        "mcp.server.fastmcp.resources.FunctionResource",
        "mcp.server.fastmcp.utilities.types.Image",
        "mcp.shared.exceptions.McpError",
        "mcp.shared.memory.create_connected_server_and_client_session",
        "mcp.types.AudioContent",
        "mcp.types.BlobResourceContents",
        "mcp.types.ImageContent",
        "mcp.types.TextContent",
        "mcp.types.TextResourceContents",
        "mcp.server.fastmcp.Context",
        "mcp.server.session"
      ],
      "functions": [
        {
          "name": "tool_fn",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 199,
          "line_end": 200,
          "docstring": null,
          "parameters": [
            "x",
            "y"
          ],
          "return_type": "int",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "error_tool_fn",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 203,
          "line_end": 204,
          "docstring": null,
          "parameters": [],
          "return_type": "None",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "image_tool_fn",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 207,
          "line_end": 208,
          "docstring": null,
          "parameters": [
            "path"
          ],
          "return_type": "Image",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "mixed_content_tool_fn",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 211,
          "line_end": 216,
          "docstring": null,
          "parameters": [],
          "return_type": "list[TextContent | ImageContent | AudioContent]",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_prompt_decorator_error",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 777,
          "line_end": 784,
          "docstring": "Test error when decorator is used incorrectly.",
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "hello_world",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 138,
          "line_end": 139,
          "docstring": null,
          "parameters": [
            "name"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "add",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 161,
          "line_end": 162,
          "docstring": null,
          "parameters": [
            "x",
            "y"
          ],
          "return_type": "int",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_data",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 181,
          "line_end": 182,
          "docstring": null,
          "parameters": [
            "x"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "mixed_list_fn",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 336,
          "line_end": 342,
          "docstring": null,
          "parameters": [],
          "return_type": "list",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_text",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 373,
          "line_end": 374,
          "docstring": null,
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_binary",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 390,
          "line_end": 391,
          "docstring": null,
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_data",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 453,
          "line_end": 455,
          "docstring": "get_data returns a string",
          "parameters": [],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_data",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 497,
          "line_end": 498,
          "docstring": null,
          "parameters": [
            "param"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_data",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 506,
          "line_end": 507,
          "docstring": null,
          "parameters": [
            "name"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_data",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 531,
          "line_end": 532,
          "docstring": null,
          "parameters": [
            "org",
            "repo"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_static_data",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 556,
          "line_end": 557,
          "docstring": null,
          "parameters": [],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_data",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 570,
          "line_end": 571,
          "docstring": null,
          "parameters": [
            "name"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "tool_with_context",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 592,
          "line_end": 593,
          "docstring": null,
          "parameters": [
            "x",
            "ctx"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "tool_with_context",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 603,
          "line_end": 605,
          "docstring": null,
          "parameters": [
            "x",
            "ctx"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "no_context",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 689,
          "line_end": 690,
          "docstring": null,
          "parameters": [
            "x"
          ],
          "return_type": "int",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_resource",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 706,
          "line_end": 707,
          "docstring": null,
          "parameters": [],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "fn",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 734,
          "line_end": 735,
          "docstring": null,
          "parameters": [],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "fn",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 751,
          "line_end": 752,
          "docstring": null,
          "parameters": [],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "fn",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 767,
          "line_end": 768,
          "docstring": null,
          "parameters": [],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "fn",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 792,
          "line_end": 793,
          "docstring": null,
          "parameters": [
            "name",
            "optional"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "fn",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 814,
          "line_end": 815,
          "docstring": null,
          "parameters": [
            "name"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "fn",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 832,
          "line_end": 842,
          "docstring": null,
          "parameters": [],
          "return_type": "Message",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "prompt_fn",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 870,
          "line_end": 871,
          "docstring": null,
          "parameters": [
            "name"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "add",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 173,
          "line_end": 174,
          "docstring": null,
          "parameters": [
            "x",
            "y"
          ],
          "return_type": "int",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_data",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 195,
          "line_end": 196,
          "docstring": null,
          "parameters": [
            "x"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_data_fn",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 477,
          "line_end": 478,
          "docstring": null,
          "parameters": [
            "param"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_data",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 488,
          "line_end": 489,
          "docstring": null,
          "parameters": [],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_data",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 522,
          "line_end": 523,
          "docstring": null,
          "parameters": [
            "user"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_data_mismatched",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 549,
          "line_end": 550,
          "docstring": null,
          "parameters": [
            "org",
            "repo_2"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "fn",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 783,
          "line_end": 784,
          "docstring": null,
          "parameters": [],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "TestServer",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 30,
          "line_end": 196,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "TestServerTools",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 219,
          "line_end": 365,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "TestServerResources",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 368,
          "line_end": 464,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "TestServerResourceTemplates",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 467,
          "line_end": 581,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "TestContextInjection",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 584,
          "line_end": 722,
          "docstring": "Test context injection in tools.",
          "methods": [],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "TestServerPrompts",
          "file_path": "tests/server/fastmcp/test_server.py",
          "line_start": 725,
          "line_end": 875,
          "docstring": "Test prompt functionality in FastMCP server.",
          "methods": [
            {
              "name": "test_prompt_decorator_error",
              "file_path": "tests/server/fastmcp/test_server.py",
              "line_start": 777,
              "line_end": 784,
              "docstring": "Test error when decorator is used incorrectly.",
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 2,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 876,
      "complexity_score": 1.0285714285714285
    },
    {
      "name": "test_tool_manager",
      "path": "tests/server/fastmcp/test_tool_manager.py",
      "docstring": null,
      "imports": [
        "json",
        "logging",
        "pytest",
        "pydantic.BaseModel",
        "mcp.server.fastmcp.Context",
        "mcp.server.fastmcp.FastMCP",
        "mcp.server.fastmcp.exceptions.ToolError",
        "mcp.server.fastmcp.tools.Tool",
        "mcp.server.fastmcp.tools.ToolManager",
        "mcp.server.fastmcp.utilities.func_metadata.ArgModelBase",
        "mcp.server.fastmcp.utilities.func_metadata.FuncMetadata",
        "mcp.server.session.ServerSessionT",
        "mcp.shared.context.LifespanContextT",
        "mcp.shared.context.RequestT",
        "mcp.types.ToolAnnotations"
      ],
      "functions": [
        {
          "name": "test_basic_function",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 17,
          "line_end": 33,
          "docstring": "Test registering and running a basic function.",
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_init_with_tools",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 35,
          "line_end": 62,
          "docstring": null,
          "parameters": [
            "self",
            "caplog"
          ],
          "return_type": null,
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "test_pydantic_model_function",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 82,
          "line_end": 103,
          "docstring": "Test registering a function that takes a Pydantic model.",
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_add_callable_object",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 105,
          "line_end": 119,
          "docstring": "Test registering a callable object.",
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_add_invalid_tool",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 138,
          "line_end": 141,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "test_add_lambda",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 143,
          "line_end": 146,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_add_lambda_with_no_name",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 148,
          "line_end": 153,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "test_warn_on_duplicate_tools",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 155,
          "line_end": 165,
          "docstring": "Test warning on duplicate tools.",
          "parameters": [
            "self",
            "caplog"
          ],
          "return_type": null,
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "test_disable_warn_on_duplicate_tools",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 167,
          "line_end": 178,
          "docstring": "Test disabling warning on duplicate tools.",
          "parameters": [
            "self",
            "caplog"
          ],
          "return_type": null,
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "test_context_parameter_detection",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 332,
          "line_end": 355,
          "docstring": "Test that context parameters are properly detected in\nTool.from_function().",
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_tool_annotations",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 419,
          "line_end": 438,
          "docstring": "Test that tool annotations are correctly added to tools.",
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "add",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 20,
          "line_end": 22,
          "docstring": "Add two numbers.",
          "parameters": [
            "a",
            "b"
          ],
          "return_type": "int",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "add",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 36,
          "line_end": 37,
          "docstring": null,
          "parameters": [
            "a",
            "b"
          ],
          "return_type": "int",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "create_user",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 89,
          "line_end": 91,
          "docstring": "Create a new user.",
          "parameters": [
            "user",
            "flag"
          ],
          "return_type": "dict",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "f",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 158,
          "line_end": 159,
          "docstring": null,
          "parameters": [
            "x"
          ],
          "return_type": "int",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "f",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 170,
          "line_end": 171,
          "docstring": null,
          "parameters": [
            "x"
          ],
          "return_type": "int",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "add",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 184,
          "line_end": 186,
          "docstring": "Add two numbers.",
          "parameters": [
            "a",
            "b"
          ],
          "return_type": "int",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "add",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 234,
          "line_end": 236,
          "docstring": "Add two numbers.",
          "parameters": [
            "a",
            "b"
          ],
          "return_type": "int",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "add",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 245,
          "line_end": 247,
          "docstring": "Add two numbers.",
          "parameters": [
            "a",
            "b"
          ],
          "return_type": "int",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "sum_vals",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 262,
          "line_end": 263,
          "docstring": null,
          "parameters": [
            "vals"
          ],
          "return_type": "int",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "concat_strs",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 275,
          "line_end": 276,
          "docstring": null,
          "parameters": [
            "vals"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "name_shrimp",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 299,
          "line_end": 300,
          "docstring": null,
          "parameters": [
            "tank",
            "ctx"
          ],
          "return_type": "list[str]",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "something",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 319,
          "line_end": 320,
          "docstring": null,
          "parameters": [
            "a",
            "ctx"
          ],
          "return_type": "int",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "tool_with_context",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 336,
          "line_end": 337,
          "docstring": null,
          "parameters": [
            "x",
            "ctx"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "tool_without_context",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 343,
          "line_end": 344,
          "docstring": null,
          "parameters": [
            "x"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "tool_with_parametrized_context",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 349,
          "line_end": 352,
          "docstring": null,
          "parameters": [
            "x",
            "ctx"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "tool_with_context",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 361,
          "line_end": 363,
          "docstring": null,
          "parameters": [
            "x",
            "ctx"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "tool_with_context",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 393,
          "line_end": 394,
          "docstring": null,
          "parameters": [
            "x",
            "ctx"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "tool_with_context",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 406,
          "line_end": 407,
          "docstring": null,
          "parameters": [
            "x",
            "ctx"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "read_data",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 422,
          "line_end": 424,
          "docstring": "Read data from a file.",
          "parameters": [
            "path"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "echo",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 447,
          "line_end": 449,
          "docstring": "Echo a message back.",
          "parameters": [
            "message"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 109,
          "line_end": 110,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__call__",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 112,
          "line_end": 113,
          "docstring": null,
          "parameters": [
            "self",
            "x"
          ],
          "return_type": "int",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 126,
          "line_end": 127,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 207,
          "line_end": 208,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__call__",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 210,
          "line_end": 211,
          "docstring": null,
          "parameters": [
            "self",
            "x"
          ],
          "return_type": "int",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 221,
          "line_end": 222,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "TestAddTools",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 16,
          "line_end": 178,
          "docstring": null,
          "methods": [
            {
              "name": "test_basic_function",
              "file_path": "tests/server/fastmcp/test_tool_manager.py",
              "line_start": 17,
              "line_end": 33,
              "docstring": "Test registering and running a basic function.",
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "test_init_with_tools",
              "file_path": "tests/server/fastmcp/test_tool_manager.py",
              "line_start": 35,
              "line_end": 62,
              "docstring": null,
              "parameters": [
                "self",
                "caplog"
              ],
              "return_type": null,
              "complexity": 2,
              "is_async": false
            },
            {
              "name": "test_pydantic_model_function",
              "file_path": "tests/server/fastmcp/test_tool_manager.py",
              "line_start": 82,
              "line_end": 103,
              "docstring": "Test registering a function that takes a Pydantic model.",
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "test_add_callable_object",
              "file_path": "tests/server/fastmcp/test_tool_manager.py",
              "line_start": 105,
              "line_end": 119,
              "docstring": "Test registering a callable object.",
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "test_add_invalid_tool",
              "file_path": "tests/server/fastmcp/test_tool_manager.py",
              "line_start": 138,
              "line_end": 141,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 2,
              "is_async": false
            },
            {
              "name": "test_add_lambda",
              "file_path": "tests/server/fastmcp/test_tool_manager.py",
              "line_start": 143,
              "line_end": 146,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "test_add_lambda_with_no_name",
              "file_path": "tests/server/fastmcp/test_tool_manager.py",
              "line_start": 148,
              "line_end": 153,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 2,
              "is_async": false
            },
            {
              "name": "test_warn_on_duplicate_tools",
              "file_path": "tests/server/fastmcp/test_tool_manager.py",
              "line_start": 155,
              "line_end": 165,
              "docstring": "Test warning on duplicate tools.",
              "parameters": [
                "self",
                "caplog"
              ],
              "return_type": null,
              "complexity": 2,
              "is_async": false
            },
            {
              "name": "test_disable_warn_on_duplicate_tools",
              "file_path": "tests/server/fastmcp/test_tool_manager.py",
              "line_start": 167,
              "line_end": 178,
              "docstring": "Test disabling warning on duplicate tools.",
              "parameters": [
                "self",
                "caplog"
              ],
              "return_type": null,
              "complexity": 2,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "TestCallTools",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 181,
          "line_end": 313,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "TestToolSchema",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 316,
          "line_end": 326,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "TestContextHandling",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 329,
          "line_end": 415,
          "docstring": "Test context handling in the tool manager.",
          "methods": [
            {
              "name": "test_context_parameter_detection",
              "file_path": "tests/server/fastmcp/test_tool_manager.py",
              "line_start": 332,
              "line_end": 355,
              "docstring": "Test that context parameters are properly detected in\nTool.from_function().",
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "TestToolAnnotations",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 418,
          "line_end": 455,
          "docstring": null,
          "methods": [
            {
              "name": "test_tool_annotations",
              "file_path": "tests/server/fastmcp/test_tool_manager.py",
              "line_start": 419,
              "line_end": 438,
              "docstring": "Test that tool annotations are correctly added to tools.",
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "AddArguments",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 39,
          "line_end": 41,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "ArgModelBase"
          ]
        },
        {
          "name": "UserInput",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 85,
          "line_end": 87,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "MyTool",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 108,
          "line_end": 113,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "file_path": "tests/server/fastmcp/test_tool_manager.py",
              "line_start": 109,
              "line_end": 110,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "__call__",
              "file_path": "tests/server/fastmcp/test_tool_manager.py",
              "line_start": 112,
              "line_end": 113,
              "docstring": null,
              "parameters": [
                "self",
                "x"
              ],
              "return_type": "int",
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "__name__"
          ],
          "inheritance": []
        },
        {
          "name": "MyAsyncTool",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 125,
          "line_end": 130,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "file_path": "tests/server/fastmcp/test_tool_manager.py",
              "line_start": 126,
              "line_end": 127,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "__name__"
          ],
          "inheritance": []
        },
        {
          "name": "MyTool",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 206,
          "line_end": 211,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "file_path": "tests/server/fastmcp/test_tool_manager.py",
              "line_start": 207,
              "line_end": 208,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "__call__",
              "file_path": "tests/server/fastmcp/test_tool_manager.py",
              "line_start": 210,
              "line_end": 211,
              "docstring": null,
              "parameters": [
                "self",
                "x"
              ],
              "return_type": "int",
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "__name__"
          ],
          "inheritance": []
        },
        {
          "name": "MyAsyncTool",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 220,
          "line_end": 225,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "file_path": "tests/server/fastmcp/test_tool_manager.py",
              "line_start": 221,
              "line_end": 222,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "__name__"
          ],
          "inheritance": []
        },
        {
          "name": "MyShrimpTank",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 292,
          "line_end": 297,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "Shrimp",
          "file_path": "tests/server/fastmcp/test_tool_manager.py",
          "line_start": 293,
          "line_end": 294,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 456,
      "complexity_score": 1.162162162162162
    },
    {
      "name": "test_auth_integration",
      "path": "tests/server/fastmcp/auth/test_auth_integration.py",
      "docstring": "Integration tests for MCP authorization components.",
      "imports": [
        "base64",
        "hashlib",
        "secrets",
        "time",
        "unittest.mock",
        "urllib.parse.parse_qs",
        "urllib.parse.urlparse",
        "httpx",
        "pytest",
        "pydantic.AnyHttpUrl",
        "starlette.applications.Starlette",
        "mcp.server.auth.provider.AccessToken",
        "mcp.server.auth.provider.AuthorizationCode",
        "mcp.server.auth.provider.AuthorizationParams",
        "mcp.server.auth.provider.OAuthAuthorizationServerProvider",
        "mcp.server.auth.provider.RefreshToken",
        "mcp.server.auth.provider.construct_redirect_uri",
        "mcp.server.auth.routes.ClientRegistrationOptions",
        "mcp.server.auth.routes.RevocationOptions",
        "mcp.server.auth.routes.create_auth_routes",
        "mcp.shared.auth.OAuthClientInformationFull",
        "mcp.shared.auth.OAuthToken"
      ],
      "functions": [
        {
          "name": "mock_oauth_provider",
          "file_path": "tests/server/fastmcp/auth/test_auth_integration.py",
          "line_start": 200,
          "line_end": 201,
          "docstring": null,
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "auth_app",
          "file_path": "tests/server/fastmcp/auth/test_auth_integration.py",
          "line_start": 205,
          "line_end": 222,
          "docstring": null,
          "parameters": [
            "mock_oauth_provider"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "pkce_challenge",
          "file_path": "tests/server/fastmcp/auth/test_auth_integration.py",
          "line_start": 261,
          "line_end": 270,
          "docstring": "Create a PKCE challenge with code_verifier and code_challenge.",
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "tests/server/fastmcp/auth/test_auth_integration.py",
          "line_start": 38,
          "line_end": 42,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "MockOAuthProvider",
          "file_path": "tests/server/fastmcp/auth/test_auth_integration.py",
          "line_start": 37,
          "line_end": 196,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "file_path": "tests/server/fastmcp/auth/test_auth_integration.py",
              "line_start": 38,
              "line_end": 42,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "clients",
            "auth_codes",
            "tokens",
            "refresh_tokens"
          ],
          "inheritance": [
            "OAuthAuthorizationServerProvider"
          ]
        },
        {
          "name": "TestAuthEndpoints",
          "file_path": "tests/server/fastmcp/auth/test_auth_integration.py",
          "line_start": 346,
          "line_end": 987,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "TestAuthorizeEndpointErrors",
          "file_path": "tests/server/fastmcp/auth/test_auth_integration.py",
          "line_start": 990,
          "line_end": 1267,
          "docstring": "Test error handling in the OAuth authorization endpoint.",
          "methods": [],
          "attributes": [],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 1268,
      "complexity_score": 1.0
    },
    {
      "name": "__init__",
      "path": "tests/server/fastmcp/auth/__init__.py",
      "docstring": "Tests for the MCP server auth components.",
      "imports": [],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 4,
      "complexity_score": 0.0
    },
    {
      "name": "test_base",
      "path": "tests/server/fastmcp/prompts/test_base.py",
      "docstring": null,
      "imports": [
        "pytest",
        "pydantic.FileUrl",
        "mcp.server.fastmcp.prompts.base.AssistantMessage",
        "mcp.server.fastmcp.prompts.base.Message",
        "mcp.server.fastmcp.prompts.base.Prompt",
        "mcp.server.fastmcp.prompts.base.TextContent",
        "mcp.server.fastmcp.prompts.base.UserMessage",
        "mcp.types.EmbeddedResource",
        "mcp.types.TextResourceContents"
      ],
      "functions": [
        {
          "name": "fn",
          "file_path": "tests/server/fastmcp/prompts/test_base.py",
          "line_start": 17,
          "line_end": 18,
          "docstring": null,
          "parameters": [],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "TestRenderPrompt",
          "file_path": "tests/server/fastmcp/prompts/test_base.py",
          "line_start": 14,
          "line_end": 206,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 207,
      "complexity_score": 1.0
    },
    {
      "name": "test_manager",
      "path": "tests/server/fastmcp/prompts/test_manager.py",
      "docstring": null,
      "imports": [
        "pytest",
        "mcp.server.fastmcp.prompts.base.Prompt",
        "mcp.server.fastmcp.prompts.base.TextContent",
        "mcp.server.fastmcp.prompts.base.UserMessage",
        "mcp.server.fastmcp.prompts.manager.PromptManager"
      ],
      "functions": [
        {
          "name": "test_add_prompt",
          "file_path": "tests/server/fastmcp/prompts/test_manager.py",
          "line_start": 8,
          "line_end": 18,
          "docstring": "Test adding a prompt to the manager.",
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_add_duplicate_prompt",
          "file_path": "tests/server/fastmcp/prompts/test_manager.py",
          "line_start": 20,
          "line_end": 31,
          "docstring": "Test adding the same prompt twice.",
          "parameters": [
            "self",
            "caplog"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_disable_warn_on_duplicate_prompts",
          "file_path": "tests/server/fastmcp/prompts/test_manager.py",
          "line_start": 33,
          "line_end": 44,
          "docstring": "Test disabling warning on duplicate prompts.",
          "parameters": [
            "self",
            "caplog"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_list_prompts",
          "file_path": "tests/server/fastmcp/prompts/test_manager.py",
          "line_start": 46,
          "line_end": 62,
          "docstring": "Test listing all prompts.",
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "fn",
          "file_path": "tests/server/fastmcp/prompts/test_manager.py",
          "line_start": 11,
          "line_end": 12,
          "docstring": null,
          "parameters": [],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "fn",
          "file_path": "tests/server/fastmcp/prompts/test_manager.py",
          "line_start": 23,
          "line_end": 24,
          "docstring": null,
          "parameters": [],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "fn",
          "file_path": "tests/server/fastmcp/prompts/test_manager.py",
          "line_start": 36,
          "line_end": 37,
          "docstring": null,
          "parameters": [],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "fn1",
          "file_path": "tests/server/fastmcp/prompts/test_manager.py",
          "line_start": 49,
          "line_end": 50,
          "docstring": null,
          "parameters": [],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "fn2",
          "file_path": "tests/server/fastmcp/prompts/test_manager.py",
          "line_start": 52,
          "line_end": 53,
          "docstring": null,
          "parameters": [],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "fn",
          "file_path": "tests/server/fastmcp/prompts/test_manager.py",
          "line_start": 68,
          "line_end": 69,
          "docstring": null,
          "parameters": [],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "fn",
          "file_path": "tests/server/fastmcp/prompts/test_manager.py",
          "line_start": 83,
          "line_end": 84,
          "docstring": null,
          "parameters": [
            "name"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "fn",
          "file_path": "tests/server/fastmcp/prompts/test_manager.py",
          "line_start": 105,
          "line_end": 106,
          "docstring": null,
          "parameters": [
            "name"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "TestPromptManager",
          "file_path": "tests/server/fastmcp/prompts/test_manager.py",
          "line_start": 7,
          "line_end": 112,
          "docstring": null,
          "methods": [
            {
              "name": "test_add_prompt",
              "file_path": "tests/server/fastmcp/prompts/test_manager.py",
              "line_start": 8,
              "line_end": 18,
              "docstring": "Test adding a prompt to the manager.",
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "test_add_duplicate_prompt",
              "file_path": "tests/server/fastmcp/prompts/test_manager.py",
              "line_start": 20,
              "line_end": 31,
              "docstring": "Test adding the same prompt twice.",
              "parameters": [
                "self",
                "caplog"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "test_disable_warn_on_duplicate_prompts",
              "file_path": "tests/server/fastmcp/prompts/test_manager.py",
              "line_start": 33,
              "line_end": 44,
              "docstring": "Test disabling warning on duplicate prompts.",
              "parameters": [
                "self",
                "caplog"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "test_list_prompts",
              "file_path": "tests/server/fastmcp/prompts/test_manager.py",
              "line_start": 46,
              "line_end": 62,
              "docstring": "Test listing all prompts.",
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 113,
      "complexity_score": 1.0
    },
    {
      "name": "test_file_resources",
      "path": "tests/server/fastmcp/resources/test_file_resources.py",
      "docstring": null,
      "imports": [
        "os",
        "pathlib.Path",
        "tempfile.NamedTemporaryFile",
        "pytest",
        "pydantic.FileUrl",
        "mcp.server.fastmcp.resources.FileResource"
      ],
      "functions": [
        {
          "name": "temp_file",
          "file_path": "tests/server/fastmcp/resources/test_file_resources.py",
          "line_start": 12,
          "line_end": 25,
          "docstring": "Create a temporary file for testing.\n\nFile is automatically cleaned up after the test if it still exists.",
          "parameters": [],
          "return_type": null,
          "complexity": 3,
          "is_async": false
        },
        {
          "name": "test_file_resource_creation",
          "file_path": "tests/server/fastmcp/resources/test_file_resources.py",
          "line_start": 31,
          "line_end": 44,
          "docstring": "Test creating a FileResource.",
          "parameters": [
            "self",
            "temp_file"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_file_resource_str_path_conversion",
          "file_path": "tests/server/fastmcp/resources/test_file_resources.py",
          "line_start": 46,
          "line_end": 54,
          "docstring": "Test FileResource handles string paths.",
          "parameters": [
            "self",
            "temp_file"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_relative_path_error",
          "file_path": "tests/server/fastmcp/resources/test_file_resources.py",
          "line_start": 81,
          "line_end": 88,
          "docstring": "Test error on relative path.",
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 2,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "TestFileResource",
          "file_path": "tests/server/fastmcp/resources/test_file_resources.py",
          "line_start": 28,
          "line_end": 119,
          "docstring": "Test FileResource functionality.",
          "methods": [
            {
              "name": "test_file_resource_creation",
              "file_path": "tests/server/fastmcp/resources/test_file_resources.py",
              "line_start": 31,
              "line_end": 44,
              "docstring": "Test creating a FileResource.",
              "parameters": [
                "self",
                "temp_file"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "test_file_resource_str_path_conversion",
              "file_path": "tests/server/fastmcp/resources/test_file_resources.py",
              "line_start": 46,
              "line_end": 54,
              "docstring": "Test FileResource handles string paths.",
              "parameters": [
                "self",
                "temp_file"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "test_relative_path_error",
              "file_path": "tests/server/fastmcp/resources/test_file_resources.py",
              "line_start": 81,
              "line_end": 88,
              "docstring": "Test error on relative path.",
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 2,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 120,
      "complexity_score": 1.75
    },
    {
      "name": "test_function_resources",
      "path": "tests/server/fastmcp/resources/test_function_resources.py",
      "docstring": null,
      "imports": [
        "pytest",
        "pydantic.AnyUrl",
        "pydantic.BaseModel",
        "mcp.server.fastmcp.resources.FunctionResource"
      ],
      "functions": [
        {
          "name": "test_function_resource_creation",
          "file_path": "tests/server/fastmcp/resources/test_function_resources.py",
          "line_start": 10,
          "line_end": 26,
          "docstring": "Test creating a FunctionResource.",
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "my_func",
          "file_path": "tests/server/fastmcp/resources/test_function_resources.py",
          "line_start": 13,
          "line_end": 14,
          "docstring": null,
          "parameters": [],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_data",
          "file_path": "tests/server/fastmcp/resources/test_function_resources.py",
          "line_start": 32,
          "line_end": 33,
          "docstring": null,
          "parameters": [],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_data",
          "file_path": "tests/server/fastmcp/resources/test_function_resources.py",
          "line_start": 48,
          "line_end": 49,
          "docstring": null,
          "parameters": [],
          "return_type": "bytes",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_data",
          "file_path": "tests/server/fastmcp/resources/test_function_resources.py",
          "line_start": 63,
          "line_end": 64,
          "docstring": null,
          "parameters": [],
          "return_type": "dict",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "failing_func",
          "file_path": "tests/server/fastmcp/resources/test_function_resources.py",
          "line_start": 79,
          "line_end": 80,
          "docstring": null,
          "parameters": [],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_data",
          "file_path": "tests/server/fastmcp/resources/test_function_resources.py",
          "line_start": 113,
          "line_end": 114,
          "docstring": null,
          "parameters": [],
          "return_type": "CustomData",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__str__",
          "file_path": "tests/server/fastmcp/resources/test_function_resources.py",
          "line_start": 110,
          "line_end": 111,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "TestFunctionResource",
          "file_path": "tests/server/fastmcp/resources/test_function_resources.py",
          "line_start": 7,
          "line_end": 157,
          "docstring": "Test FunctionResource functionality.",
          "methods": [
            {
              "name": "test_function_resource_creation",
              "file_path": "tests/server/fastmcp/resources/test_function_resources.py",
              "line_start": 10,
              "line_end": 26,
              "docstring": "Test creating a FunctionResource.",
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "MyModel",
          "file_path": "tests/server/fastmcp/resources/test_function_resources.py",
          "line_start": 94,
          "line_end": 95,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "CustomData",
          "file_path": "tests/server/fastmcp/resources/test_function_resources.py",
          "line_start": 109,
          "line_end": 111,
          "docstring": null,
          "methods": [
            {
              "name": "__str__",
              "file_path": "tests/server/fastmcp/resources/test_function_resources.py",
              "line_start": 110,
              "line_end": 111,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": "str",
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 158,
      "complexity_score": 1.0
    },
    {
      "name": "test_resources",
      "path": "tests/server/fastmcp/resources/test_resources.py",
      "docstring": null,
      "imports": [
        "pytest",
        "pydantic.AnyUrl",
        "mcp.server.fastmcp.resources.FunctionResource",
        "mcp.server.fastmcp.resources.Resource"
      ],
      "functions": [
        {
          "name": "test_resource_uri_validation",
          "file_path": "tests/server/fastmcp/resources/test_resources.py",
          "line_start": 10,
          "line_end": 38,
          "docstring": "Test URI validation.",
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 3,
          "is_async": false
        },
        {
          "name": "test_resource_name_from_uri",
          "file_path": "tests/server/fastmcp/resources/test_resources.py",
          "line_start": 40,
          "line_end": 50,
          "docstring": "Test name is extracted from URI if not provided.",
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_resource_name_validation",
          "file_path": "tests/server/fastmcp/resources/test_resources.py",
          "line_start": 52,
          "line_end": 70,
          "docstring": "Test name validation.",
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "test_resource_mime_type",
          "file_path": "tests/server/fastmcp/resources/test_resources.py",
          "line_start": 72,
          "line_end": 91,
          "docstring": "Test mime type handling.",
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "dummy_func",
          "file_path": "tests/server/fastmcp/resources/test_resources.py",
          "line_start": 13,
          "line_end": 14,
          "docstring": null,
          "parameters": [],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "dummy_func",
          "file_path": "tests/server/fastmcp/resources/test_resources.py",
          "line_start": 43,
          "line_end": 44,
          "docstring": null,
          "parameters": [],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "dummy_func",
          "file_path": "tests/server/fastmcp/resources/test_resources.py",
          "line_start": 55,
          "line_end": 56,
          "docstring": null,
          "parameters": [],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "dummy_func",
          "file_path": "tests/server/fastmcp/resources/test_resources.py",
          "line_start": 75,
          "line_end": 76,
          "docstring": null,
          "parameters": [],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "TestResourceValidation",
          "file_path": "tests/server/fastmcp/resources/test_resources.py",
          "line_start": 7,
          "line_end": 101,
          "docstring": "Test base Resource validation.",
          "methods": [
            {
              "name": "test_resource_uri_validation",
              "file_path": "tests/server/fastmcp/resources/test_resources.py",
              "line_start": 10,
              "line_end": 38,
              "docstring": "Test URI validation.",
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 3,
              "is_async": false
            },
            {
              "name": "test_resource_name_from_uri",
              "file_path": "tests/server/fastmcp/resources/test_resources.py",
              "line_start": 40,
              "line_end": 50,
              "docstring": "Test name is extracted from URI if not provided.",
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "test_resource_name_validation",
              "file_path": "tests/server/fastmcp/resources/test_resources.py",
              "line_start": 52,
              "line_end": 70,
              "docstring": "Test name validation.",
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 2,
              "is_async": false
            },
            {
              "name": "test_resource_mime_type",
              "file_path": "tests/server/fastmcp/resources/test_resources.py",
              "line_start": 72,
              "line_end": 91,
              "docstring": "Test mime type handling.",
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "ConcreteResource",
          "file_path": "tests/server/fastmcp/resources/test_resources.py",
          "line_start": 97,
          "line_end": 98,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "Resource"
          ]
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 102,
      "complexity_score": 1.375
    },
    {
      "name": "test_resource_manager",
      "path": "tests/server/fastmcp/resources/test_resource_manager.py",
      "docstring": null,
      "imports": [
        "pathlib.Path",
        "tempfile.NamedTemporaryFile",
        "pytest",
        "pydantic.AnyUrl",
        "pydantic.FileUrl",
        "mcp.server.fastmcp.resources.FileResource",
        "mcp.server.fastmcp.resources.FunctionResource",
        "mcp.server.fastmcp.resources.ResourceManager",
        "mcp.server.fastmcp.resources.ResourceTemplate"
      ],
      "functions": [
        {
          "name": "temp_file",
          "file_path": "tests/server/fastmcp/resources/test_resource_manager.py",
          "line_start": 16,
          "line_end": 29,
          "docstring": "Create a temporary file for testing.\n\nFile is automatically cleaned up after the test if it still exists.",
          "parameters": [],
          "return_type": null,
          "complexity": 3,
          "is_async": false
        },
        {
          "name": "test_add_resource",
          "file_path": "tests/server/fastmcp/resources/test_resource_manager.py",
          "line_start": 35,
          "line_end": 45,
          "docstring": "Test adding a resource.",
          "parameters": [
            "self",
            "temp_file"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_add_duplicate_resource",
          "file_path": "tests/server/fastmcp/resources/test_resource_manager.py",
          "line_start": 47,
          "line_end": 58,
          "docstring": "Test adding the same resource twice.",
          "parameters": [
            "self",
            "temp_file"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_warn_on_duplicate_resources",
          "file_path": "tests/server/fastmcp/resources/test_resource_manager.py",
          "line_start": 60,
          "line_end": 70,
          "docstring": "Test warning on duplicate resources.",
          "parameters": [
            "self",
            "temp_file",
            "caplog"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_disable_warn_on_duplicate_resources",
          "file_path": "tests/server/fastmcp/resources/test_resource_manager.py",
          "line_start": 72,
          "line_end": 82,
          "docstring": "Test disabling warning on duplicate resources.",
          "parameters": [
            "self",
            "temp_file",
            "caplog"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_list_resources",
          "file_path": "tests/server/fastmcp/resources/test_resource_manager.py",
          "line_start": 124,
          "line_end": 141,
          "docstring": "Test listing all resources.",
          "parameters": [
            "self",
            "temp_file"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "greet",
          "file_path": "tests/server/fastmcp/resources/test_resource_manager.py",
          "line_start": 102,
          "line_end": 103,
          "docstring": null,
          "parameters": [
            "name"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "TestResourceManager",
          "file_path": "tests/server/fastmcp/resources/test_resource_manager.py",
          "line_start": 32,
          "line_end": 141,
          "docstring": "Test ResourceManager functionality.",
          "methods": [
            {
              "name": "test_add_resource",
              "file_path": "tests/server/fastmcp/resources/test_resource_manager.py",
              "line_start": 35,
              "line_end": 45,
              "docstring": "Test adding a resource.",
              "parameters": [
                "self",
                "temp_file"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "test_add_duplicate_resource",
              "file_path": "tests/server/fastmcp/resources/test_resource_manager.py",
              "line_start": 47,
              "line_end": 58,
              "docstring": "Test adding the same resource twice.",
              "parameters": [
                "self",
                "temp_file"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "test_warn_on_duplicate_resources",
              "file_path": "tests/server/fastmcp/resources/test_resource_manager.py",
              "line_start": 60,
              "line_end": 70,
              "docstring": "Test warning on duplicate resources.",
              "parameters": [
                "self",
                "temp_file",
                "caplog"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "test_disable_warn_on_duplicate_resources",
              "file_path": "tests/server/fastmcp/resources/test_resource_manager.py",
              "line_start": 72,
              "line_end": 82,
              "docstring": "Test disabling warning on duplicate resources.",
              "parameters": [
                "self",
                "temp_file",
                "caplog"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "test_list_resources",
              "file_path": "tests/server/fastmcp/resources/test_resource_manager.py",
              "line_start": 124,
              "line_end": 141,
              "docstring": "Test listing all resources.",
              "parameters": [
                "self",
                "temp_file"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 142,
      "complexity_score": 1.2857142857142858
    },
    {
      "name": "test_resource_template",
      "path": "tests/server/fastmcp/resources/test_resource_template.py",
      "docstring": null,
      "imports": [
        "json",
        "pytest",
        "pydantic.BaseModel",
        "mcp.server.fastmcp.resources.FunctionResource",
        "mcp.server.fastmcp.resources.ResourceTemplate"
      ],
      "functions": [
        {
          "name": "test_template_creation",
          "file_path": "tests/server/fastmcp/resources/test_resource_template.py",
          "line_start": 12,
          "line_end": 27,
          "docstring": "Test creating a template from a function.",
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_template_matches",
          "file_path": "tests/server/fastmcp/resources/test_resource_template.py",
          "line_start": 29,
          "line_end": 47,
          "docstring": "Test matching URIs against a template.",
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "my_func",
          "file_path": "tests/server/fastmcp/resources/test_resource_template.py",
          "line_start": 15,
          "line_end": 16,
          "docstring": null,
          "parameters": [
            "key",
            "value"
          ],
          "return_type": "dict",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "my_func",
          "file_path": "tests/server/fastmcp/resources/test_resource_template.py",
          "line_start": 32,
          "line_end": 33,
          "docstring": null,
          "parameters": [
            "key",
            "value"
          ],
          "return_type": "dict",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "my_func",
          "file_path": "tests/server/fastmcp/resources/test_resource_template.py",
          "line_start": 53,
          "line_end": 54,
          "docstring": null,
          "parameters": [
            "key",
            "value"
          ],
          "return_type": "dict",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "failing_func",
          "file_path": "tests/server/fastmcp/resources/test_resource_template.py",
          "line_start": 77,
          "line_end": 78,
          "docstring": null,
          "parameters": [
            "x"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_data",
          "file_path": "tests/server/fastmcp/resources/test_resource_template.py",
          "line_start": 141,
          "line_end": 142,
          "docstring": null,
          "parameters": [
            "key",
            "value"
          ],
          "return_type": "MyModel",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "get_data",
          "file_path": "tests/server/fastmcp/resources/test_resource_template.py",
          "line_start": 172,
          "line_end": 173,
          "docstring": null,
          "parameters": [
            "value"
          ],
          "return_type": "CustomData",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "tests/server/fastmcp/resources/test_resource_template.py",
          "line_start": 166,
          "line_end": 167,
          "docstring": null,
          "parameters": [
            "self",
            "value"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__str__",
          "file_path": "tests/server/fastmcp/resources/test_resource_template.py",
          "line_start": 169,
          "line_end": 170,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "TestResourceTemplate",
          "file_path": "tests/server/fastmcp/resources/test_resource_template.py",
          "line_start": 9,
          "line_end": 188,
          "docstring": "Test ResourceTemplate functionality.",
          "methods": [
            {
              "name": "test_template_creation",
              "file_path": "tests/server/fastmcp/resources/test_resource_template.py",
              "line_start": 12,
              "line_end": 27,
              "docstring": "Test creating a template from a function.",
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "test_template_matches",
              "file_path": "tests/server/fastmcp/resources/test_resource_template.py",
              "line_start": 29,
              "line_end": 47,
              "docstring": "Test matching URIs against a template.",
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": []
        },
        {
          "name": "MyModel",
          "file_path": "tests/server/fastmcp/resources/test_resource_template.py",
          "line_start": 137,
          "line_end": 139,
          "docstring": null,
          "methods": [],
          "attributes": [],
          "inheritance": [
            "BaseModel"
          ]
        },
        {
          "name": "CustomData",
          "file_path": "tests/server/fastmcp/resources/test_resource_template.py",
          "line_start": 165,
          "line_end": 170,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "file_path": "tests/server/fastmcp/resources/test_resource_template.py",
              "line_start": 166,
              "line_end": 167,
              "docstring": null,
              "parameters": [
                "self",
                "value"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            },
            {
              "name": "__str__",
              "file_path": "tests/server/fastmcp/resources/test_resource_template.py",
              "line_start": 169,
              "line_end": 170,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": "str",
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "value"
          ],
          "inheritance": []
        }
      ],
      "constants": [],
      "language": "python",
      "lines_of_code": 189,
      "complexity_score": 1.0
    },
    {
      "name": "test_file_server",
      "path": "tests/server/fastmcp/servers/test_file_server.py",
      "docstring": null,
      "imports": [
        "json",
        "pathlib.Path",
        "pytest",
        "mcp.server.fastmcp.FastMCP"
      ],
      "functions": [
        {
          "name": "test_dir",
          "file_path": "tests/server/fastmcp/servers/test_file_server.py",
          "line_start": 10,
          "line_end": 19,
          "docstring": "Create a temporary directory with test files.",
          "parameters": [
            "tmp_path_factory"
          ],
          "return_type": "Path",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "mcp",
          "file_path": "tests/server/fastmcp/servers/test_file_server.py",
          "line_start": 23,
          "line_end": 26,
          "docstring": null,
          "parameters": [],
          "return_type": "FastMCP",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "resources",
          "file_path": "tests/server/fastmcp/servers/test_file_server.py",
          "line_start": 30,
          "line_end": 60,
          "docstring": null,
          "parameters": [
            "mcp",
            "test_dir"
          ],
          "return_type": "FastMCP",
          "complexity": 5,
          "is_async": false
        },
        {
          "name": "tools",
          "file_path": "tests/server/fastmcp/servers/test_file_server.py",
          "line_start": 64,
          "line_end": 73,
          "docstring": null,
          "parameters": [
            "mcp",
            "test_dir"
          ],
          "return_type": "FastMCP",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "list_test_dir",
          "file_path": "tests/server/fastmcp/servers/test_file_server.py",
          "line_start": 32,
          "line_end": 34,
          "docstring": "List the files in the test directory",
          "parameters": [],
          "return_type": "list[str]",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "read_example_py",
          "file_path": "tests/server/fastmcp/servers/test_file_server.py",
          "line_start": 37,
          "line_end": 42,
          "docstring": "Read the example.py file",
          "parameters": [],
          "return_type": "str",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "read_readme_md",
          "file_path": "tests/server/fastmcp/servers/test_file_server.py",
          "line_start": 45,
          "line_end": 50,
          "docstring": "Read the readme.md file",
          "parameters": [],
          "return_type": "str",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "read_config_json",
          "file_path": "tests/server/fastmcp/servers/test_file_server.py",
          "line_start": 53,
          "line_end": 58,
          "docstring": "Read the config.json file",
          "parameters": [],
          "return_type": "str",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "delete_file",
          "file_path": "tests/server/fastmcp/servers/test_file_server.py",
          "line_start": 66,
          "line_end": 71,
          "docstring": null,
          "parameters": [
            "path"
          ],
          "return_type": "bool",
          "complexity": 2,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 129,
      "complexity_score": 2.111111111111111
    },
    {
      "name": "test_httpx_utils",
      "path": "tests/shared/test_httpx_utils.py",
      "docstring": "Tests for httpx utility functions.",
      "imports": [
        "httpx",
        "mcp.shared._httpx_utils.create_mcp_http_client"
      ],
      "functions": [
        {
          "name": "test_default_settings",
          "file_path": "tests/shared/test_httpx_utils.py",
          "line_start": 8,
          "line_end": 13,
          "docstring": "Test that default settings are applied correctly.",
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_custom_parameters",
          "file_path": "tests/shared/test_httpx_utils.py",
          "line_start": 16,
          "line_end": 24,
          "docstring": "Test custom headers and timeout are set correctly.",
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 25,
      "complexity_score": 1.0
    },
    {
      "name": "test_memory",
      "path": "tests/shared/test_memory.py",
      "docstring": null,
      "imports": [
        "pytest",
        "pydantic.AnyUrl",
        "typing_extensions.AsyncGenerator",
        "mcp.client.session.ClientSession",
        "mcp.server.Server",
        "mcp.shared.memory.create_connected_server_and_client_session",
        "mcp.types.EmptyResult",
        "mcp.types.Resource"
      ],
      "functions": [
        {
          "name": "mcp_server",
          "file_path": "tests/shared/test_memory.py",
          "line_start": 17,
          "line_end": 30,
          "docstring": null,
          "parameters": [],
          "return_type": "Server",
          "complexity": 1,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 48,
      "complexity_score": 1.0
    },
    {
      "name": "test_progress_notifications",
      "path": "tests/shared/test_progress_notifications.py",
      "docstring": null,
      "imports": [
        "typing.Any",
        "typing.cast",
        "anyio",
        "pytest",
        "mcp.types",
        "mcp.client.session.ClientSession",
        "mcp.server.Server",
        "mcp.server.lowlevel.NotificationOptions",
        "mcp.server.models.InitializationOptions",
        "mcp.server.session.ServerSession",
        "mcp.shared.context.RequestContext",
        "mcp.shared.progress.progress",
        "mcp.shared.session.BaseSession",
        "mcp.shared.session.RequestResponder",
        "mcp.shared.session.SessionMessage"
      ],
      "functions": [],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 350,
      "complexity_score": 0.0
    },
    {
      "name": "test_session",
      "path": "tests/shared/test_session.py",
      "docstring": null,
      "imports": [
        "collections.abc.AsyncGenerator",
        "anyio",
        "pytest",
        "mcp.types",
        "mcp.client.session.ClientSession",
        "mcp.server.lowlevel.server.Server",
        "mcp.shared.exceptions.McpError",
        "mcp.shared.memory.create_client_server_memory_streams",
        "mcp.shared.memory.create_connected_server_and_client_session",
        "mcp.types.CancelledNotification",
        "mcp.types.CancelledNotificationParams",
        "mcp.types.ClientNotification",
        "mcp.types.ClientRequest",
        "mcp.types.EmptyResult"
      ],
      "functions": [
        {
          "name": "mcp_server",
          "file_path": "tests/shared/test_session.py",
          "line_start": 24,
          "line_end": 25,
          "docstring": null,
          "parameters": [],
          "return_type": "Server",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "make_server",
          "file_path": "tests/shared/test_session.py",
          "line_start": 59,
          "line_end": 84,
          "docstring": null,
          "parameters": [],
          "return_type": "Server",
          "complexity": 2,
          "is_async": false
        }
      ],
      "classes": [],
      "constants": [],
      "language": "python",
      "lines_of_code": 184,
      "complexity_score": 1.5
    },
    {
      "name": "test_sse",
      "path": "tests/shared/test_sse.py",
      "docstring": null,
      "imports": [
        "json",
        "multiprocessing",
        "socket",
        "time",
        "collections.abc.AsyncGenerator",
        "collections.abc.Generator",
        "anyio",
        "httpx",
        "pytest",
        "uvicorn",
        "inline_snapshot.snapshot",
        "pydantic.AnyUrl",
        "starlette.applications.Starlette",
        "starlette.requests.Request",
        "starlette.responses.Response",
        "starlette.routing.Mount",
        "starlette.routing.Route",
        "mcp.types",
        "mcp.client.session.ClientSession",
        "mcp.client.sse.sse_client",
        "mcp.server.Server",
        "mcp.server.sse.SseServerTransport",
        "mcp.shared.exceptions.McpError",
        "mcp.types.EmptyResult",
        "mcp.types.ErrorData",
        "mcp.types.InitializeResult",
        "mcp.types.ReadResourceResult",
        "mcp.types.TextContent",
        "mcp.types.TextResourceContents",
        "mcp.types.Tool"
      ],
      "functions": [
        {
          "name": "server_port",
          "file_path": "tests/shared/test_sse.py",
          "line_start": 38,
          "line_end": 41,
          "docstring": null,
          "parameters": [],
          "return_type": "int",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "server_url",
          "file_path": "tests/shared/test_sse.py",
          "line_start": 45,
          "line_end": 46,
          "docstring": null,
          "parameters": [
            "server_port"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "make_server_app",
          "file_path": "tests/shared/test_sse.py",
          "line_start": 85,
          "line_end": 106,
          "docstring": "Create test Starlette app with SSE transport",
          "parameters": [],
          "return_type": "Starlette",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "run_server",
          "file_path": "tests/shared/test_sse.py",
          "line_start": 109,
          "line_end": 122,
          "docstring": null,
          "parameters": [
            "server_port"
          ],
          "return_type": "None",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "server",
          "file_path": "tests/shared/test_sse.py",
          "line_start": 126,
          "line_end": 155,
          "docstring": null,
          "parameters": [
            "server_port"
          ],
          "return_type": "Generator[None, None, None]",
          "complexity": 5,
          "is_async": false
        },
        {
          "name": "run_mounted_server",
          "file_path": "tests/shared/test_sse.py",
          "line_start": 260,
          "line_end": 274,
          "docstring": null,
          "parameters": [
            "server_port"
          ],
          "return_type": "None",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "mounted_server",
          "file_path": "tests/shared/test_sse.py",
          "line_start": 278,
          "line_end": 307,
          "docstring": null,
          "parameters": [
            "server_port"
          ],
          "return_type": "Generator[None, None, None]",
          "complexity": 5,
          "is_async": false
        },
        {
          "name": "run_context_server",
          "file_path": "tests/shared/test_sse.py",
          "line_start": 369,
          "line_end": 396,
          "docstring": "Run a server that captures request context",
          "parameters": [
            "server_port"
          ],
          "return_type": "None",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "context_server",
          "file_path": "tests/shared/test_sse.py",
          "line_start": 400,
          "line_end": 431,
          "docstring": "Fixture that provides a server with request context capture",
          "parameters": [
            "server_port"
          ],
          "return_type": "Generator[None, None, None]",
          "complexity": 5,
          "is_async": false
        },
        {
          "name": "test_sse_message_id_coercion",
          "file_path": "tests/shared/test_sse.py",
          "line_start": 510,
          "line_end": 521,
          "docstring": "Test that string message IDs that look like integers are parsed as integers.\n\nSee <https://github.com/modelcontextprotocol/python-sdk/pull/851> for more details.",
          "parameters": [],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "tests/shared/test_sse.py",
          "line_start": 51,
          "line_end": 81,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 3,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "tests/shared/test_sse.py",
          "line_start": 328,
          "line_end": 366,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 4,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "ServerTest",
          "file_path": "tests/shared/test_sse.py",
          "line_start": 50,
          "line_end": 81,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "file_path": "tests/shared/test_sse.py",
              "line_start": 51,
              "line_end": 81,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 3,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": [
            "Server"
          ]
        },
        {
          "name": "RequestContextServer",
          "file_path": "tests/shared/test_sse.py",
          "line_start": 327,
          "line_end": 366,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "file_path": "tests/shared/test_sse.py",
              "line_start": 328,
              "line_end": 366,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 4,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": [
            "Server[object, Request]"
          ]
        }
      ],
      "constants": [
        "SERVER_NAME"
      ],
      "language": "python",
      "lines_of_code": 522,
      "complexity_score": 2.8333333333333335
    },
    {
      "name": "test_streamable_http",
      "path": "tests/shared/test_streamable_http.py",
      "docstring": "Tests for the StreamableHTTP server and client transport.\n\nContains tests for both server and client sides of the StreamableHTTP transport.",
      "imports": [
        "json",
        "multiprocessing",
        "socket",
        "time",
        "collections.abc.Generator",
        "typing.Any",
        "anyio",
        "httpx",
        "pytest",
        "requests",
        "uvicorn",
        "pydantic.AnyUrl",
        "starlette.applications.Starlette",
        "starlette.requests.Request",
        "starlette.routing.Mount",
        "mcp.types",
        "mcp.client.session.ClientSession",
        "mcp.client.streamable_http.streamablehttp_client",
        "mcp.server.Server",
        "mcp.server.streamable_http.MCP_SESSION_ID_HEADER",
        "mcp.server.streamable_http.SESSION_ID_PATTERN",
        "mcp.server.streamable_http.EventCallback",
        "mcp.server.streamable_http.EventId",
        "mcp.server.streamable_http.EventMessage",
        "mcp.server.streamable_http.EventStore",
        "mcp.server.streamable_http.StreamableHTTPServerTransport",
        "mcp.server.streamable_http.StreamId",
        "mcp.server.streamable_http_manager.StreamableHTTPSessionManager",
        "mcp.shared.context.RequestContext",
        "mcp.shared.exceptions.McpError",
        "mcp.shared.message.ClientMessageMetadata",
        "mcp.shared.session.RequestResponder",
        "mcp.types.InitializeResult",
        "mcp.types.TextContent",
        "mcp.types.TextResourceContents",
        "mcp.types.Tool",
        "mcp.types",
        "mcp.shared.session.RequestResponder",
        "traceback"
      ],
      "functions": [
        {
          "name": "create_app",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 217,
          "line_end": 245,
          "docstring": "Create a Starlette application for testing using the session manager.\n\nArgs:\n    is_json_response_enabled: If True, use JSON responses instead of SSE streams.\n    event_store: Optional event store for testing resumability.",
          "parameters": [
            "is_json_response_enabled",
            "event_store"
          ],
          "return_type": "Starlette",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "run_server",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 248,
          "line_end": 280,
          "docstring": "Run the test server.\n\nArgs:\n    port: Port to listen on.\n    is_json_response_enabled: If True, use JSON responses instead of SSE streams.\n    event_store: Optional event store for testing resumability.",
          "parameters": [
            "port",
            "is_json_response_enabled",
            "event_store"
          ],
          "return_type": "None",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "basic_server_port",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 285,
          "line_end": 289,
          "docstring": "Find an available port for the basic server.",
          "parameters": [],
          "return_type": "int",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "json_server_port",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 293,
          "line_end": 297,
          "docstring": "Find an available port for the JSON response server.",
          "parameters": [],
          "return_type": "int",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "basic_server",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 301,
          "line_end": 326,
          "docstring": "Start a basic server.",
          "parameters": [
            "basic_server_port"
          ],
          "return_type": "Generator[None, None, None]",
          "complexity": 4,
          "is_async": false
        },
        {
          "name": "event_store",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 330,
          "line_end": 332,
          "docstring": "Create a test event store.",
          "parameters": [],
          "return_type": "SimpleEventStore",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "event_server_port",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 336,
          "line_end": 340,
          "docstring": "Find an available port for the event store server.",
          "parameters": [],
          "return_type": "int",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "event_server",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 344,
          "line_end": 373,
          "docstring": "Start a server with event store enabled.",
          "parameters": [
            "event_server_port",
            "event_store"
          ],
          "return_type": "Generator[tuple[SimpleEventStore, str], None, None]",
          "complexity": 4,
          "is_async": false
        },
        {
          "name": "json_response_server",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 377,
          "line_end": 404,
          "docstring": "Start a server with JSON response enabled.",
          "parameters": [
            "json_server_port"
          ],
          "return_type": "Generator[None, None, None]",
          "complexity": 4,
          "is_async": false
        },
        {
          "name": "basic_server_url",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 408,
          "line_end": 410,
          "docstring": "Get the URL for the basic test server.",
          "parameters": [
            "basic_server_port"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "json_server_url",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 414,
          "line_end": 416,
          "docstring": "Get the URL for the JSON response test server.",
          "parameters": [
            "json_server_port"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_accept_header_validation",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 420,
          "line_end": 429,
          "docstring": "Test that Accept header is properly validated.",
          "parameters": [
            "basic_server",
            "basic_server_url"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_content_type_validation",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 432,
          "line_end": 444,
          "docstring": "Test that Content-Type header is properly validated.",
          "parameters": [
            "basic_server",
            "basic_server_url"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_json_validation",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 447,
          "line_end": 459,
          "docstring": "Test that JSON content is properly validated.",
          "parameters": [
            "basic_server",
            "basic_server_url"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_json_parsing",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 462,
          "line_end": 474,
          "docstring": "Test that JSON content is properly parse.",
          "parameters": [
            "basic_server",
            "basic_server_url"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_method_not_allowed",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 477,
          "line_end": 489,
          "docstring": "Test that unsupported HTTP methods are rejected.",
          "parameters": [
            "basic_server",
            "basic_server_url"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_session_validation",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 492,
          "line_end": 506,
          "docstring": "Test session ID validation.",
          "parameters": [
            "basic_server",
            "basic_server_url"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_session_id_pattern",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 509,
          "line_end": 541,
          "docstring": "Test that SESSION_ID_PATTERN correctly validates session IDs.",
          "parameters": [],
          "return_type": null,
          "complexity": 4,
          "is_async": false
        },
        {
          "name": "test_streamable_http_transport_init_validation",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 544,
          "line_end": 564,
          "docstring": "Test that StreamableHTTPServerTransport validates session ID on init.",
          "parameters": [],
          "return_type": null,
          "complexity": 4,
          "is_async": false
        },
        {
          "name": "test_session_termination",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 567,
          "line_end": 598,
          "docstring": "Test session termination via DELETE and subsequent request handling.",
          "parameters": [
            "basic_server",
            "basic_server_url"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_response",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 601,
          "line_end": 629,
          "docstring": "Test response handling for a valid request.",
          "parameters": [
            "basic_server",
            "basic_server_url"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_json_response",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 632,
          "line_end": 644,
          "docstring": "Test response handling when is_json_response_enabled is True.",
          "parameters": [
            "json_response_server",
            "json_server_url"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_get_sse_stream",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 647,
          "line_end": 692,
          "docstring": "Test establishing an SSE stream via GET request.",
          "parameters": [
            "basic_server",
            "basic_server_url"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "test_get_validation",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 695,
          "line_end": 733,
          "docstring": "Test validation for GET requests.",
          "parameters": [
            "basic_server",
            "basic_server_url"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "run_context_aware_server",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 1296,
          "line_end": 1322,
          "docstring": "Run the context-aware test server.",
          "parameters": [
            "port"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "context_aware_server",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 1326,
          "line_end": 1354,
          "docstring": "Start the context-aware server in a separate process.",
          "parameters": [
            "basic_server_port"
          ],
          "return_type": "Generator[None, None, None]",
          "complexity": 5,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 71,
          "line_end": 73,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 114,
          "line_end": 214,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 6,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 1232,
          "line_end": 1292,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 7,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "SimpleEventStore",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 68,
          "line_end": 109,
          "docstring": "Simple in-memory event store for testing.",
          "methods": [
            {
              "name": "__init__",
              "file_path": "tests/shared/test_streamable_http.py",
              "line_start": 71,
              "line_end": 73,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 1,
              "is_async": false
            }
          ],
          "attributes": [
            "_event_id_counter"
          ],
          "inheritance": [
            "EventStore"
          ]
        },
        {
          "name": "ServerTest",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 113,
          "line_end": 214,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "file_path": "tests/shared/test_streamable_http.py",
              "line_start": 114,
              "line_end": 214,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 6,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": [
            "Server"
          ]
        },
        {
          "name": "ContextAwareServerTest",
          "file_path": "tests/shared/test_streamable_http.py",
          "line_start": 1231,
          "line_end": 1292,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "file_path": "tests/shared/test_streamable_http.py",
              "line_start": 1232,
              "line_end": 1292,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 7,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": [
            "Server"
          ]
        }
      ],
      "constants": [
        "SERVER_NAME",
        "TEST_SESSION_ID",
        "INIT_REQUEST"
      ],
      "language": "python",
      "lines_of_code": 1428,
      "complexity_score": 2.1724137931034484
    },
    {
      "name": "test_ws",
      "path": "tests/shared/test_ws.py",
      "docstring": null,
      "imports": [
        "multiprocessing",
        "socket",
        "time",
        "collections.abc.AsyncGenerator",
        "collections.abc.Generator",
        "anyio",
        "pytest",
        "uvicorn",
        "pydantic.AnyUrl",
        "starlette.applications.Starlette",
        "starlette.routing.WebSocketRoute",
        "mcp.client.session.ClientSession",
        "mcp.client.websocket.websocket_client",
        "mcp.server.Server",
        "mcp.server.websocket.websocket_server",
        "mcp.shared.exceptions.McpError",
        "mcp.types.EmptyResult",
        "mcp.types.ErrorData",
        "mcp.types.InitializeResult",
        "mcp.types.ReadResourceResult",
        "mcp.types.TextContent",
        "mcp.types.TextResourceContents",
        "mcp.types.Tool"
      ],
      "functions": [
        {
          "name": "server_port",
          "file_path": "tests/shared/test_ws.py",
          "line_start": 32,
          "line_end": 35,
          "docstring": null,
          "parameters": [],
          "return_type": "int",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "server_url",
          "file_path": "tests/shared/test_ws.py",
          "line_start": 39,
          "line_end": 40,
          "docstring": null,
          "parameters": [
            "server_port"
          ],
          "return_type": "str",
          "complexity": 1,
          "is_async": false
        },
        {
          "name": "make_server_app",
          "file_path": "tests/shared/test_ws.py",
          "line_start": 79,
          "line_end": 97,
          "docstring": "Create test Starlette app with WebSocket transport",
          "parameters": [],
          "return_type": "Starlette",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "run_server",
          "file_path": "tests/shared/test_ws.py",
          "line_start": 100,
          "line_end": 113,
          "docstring": null,
          "parameters": [
            "server_port"
          ],
          "return_type": "None",
          "complexity": 2,
          "is_async": false
        },
        {
          "name": "server",
          "file_path": "tests/shared/test_ws.py",
          "line_start": 117,
          "line_end": 146,
          "docstring": null,
          "parameters": [
            "server_port"
          ],
          "return_type": "Generator[None, None, None]",
          "complexity": 5,
          "is_async": false
        },
        {
          "name": "__init__",
          "file_path": "tests/shared/test_ws.py",
          "line_start": 45,
          "line_end": 75,
          "docstring": null,
          "parameters": [
            "self"
          ],
          "return_type": null,
          "complexity": 3,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "ServerTest",
          "file_path": "tests/shared/test_ws.py",
          "line_start": 44,
          "line_end": 75,
          "docstring": null,
          "methods": [
            {
              "name": "__init__",
              "file_path": "tests/shared/test_ws.py",
              "line_start": 45,
              "line_end": 75,
              "docstring": null,
              "parameters": [
                "self"
              ],
              "return_type": null,
              "complexity": 3,
              "is_async": false
            }
          ],
          "attributes": [],
          "inheritance": [
            "Server"
          ]
        }
      ],
      "constants": [
        "SERVER_NAME"
      ],
      "language": "python",
      "lines_of_code": 229,
      "complexity_score": 2.5
    }
  ]
}